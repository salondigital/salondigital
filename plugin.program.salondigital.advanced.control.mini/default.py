exec("import re;import base64");exec(base64.b64decode("aW1wb3J0IHhibWMsIHhibWNhZGRvbiwgeGJtY2d1aSwgeGJtY3BsdWdpbiwgb3MsIHN5cywgeGJtY3ZmcywgZ2xvYgppbXBvcnQgc2h1dGlsCmltcG9ydCB1cmxsaWIyLHVybGxpYgppbXBvcnQgcmUKaW1wb3J0IHppcGZpbGUKaW1wb3J0IGZubWF0Y2gKdHJ5OiAgICBmcm9tIHNxbGl0ZTMgaW1wb3J0IGRiYXBpMiBhcyBkYXRhYmFzZQpleGNlcHQ6IGZyb20gcHlzcWxpdGUyIGltcG9ydCBkYmFwaTIgYXMgZGF0YWJhc2UKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZSwgZGF0ZXRpbWUsIHRpbWVkZWx0YQpmcm9tIHVybHBhcnNlIGltcG9ydCB1cmxqb2luCmZyb20gcmVzb3VyY2VzLmxpYnMgaW1wb3J0IGV4dHJhY3QsIGRvd25sb2FkZXIsIG5vdGlmeSwgZGVicmlkaXQsIHRyYWt0aXQsIGxvZ2luaXQsIHNraW5Td2l0Y2gsIHVwbG9hZExvZywgeXQsIHdpemFyZCBhcyB3aXoKCkFERE9OX0lEICAgICAgICAgPSB4Ym1jYWRkb24uQWRkb24oKS5nZXRBZGRvbkluZm8oJ2lkJykKQURET05USVRMRSAgICAgICA9ICdTYWxvbkRpZ2l0YWwnCkVYQ0xVREVTICAgICAgICAgPSBbQURET05fSUQgLCAncmVwb3NpdG9yeS5zYWxvbmRpZ2l0YWwnXQpBVVRPSU5TVEFMTCAgICA9ICdZZXMnClJFUE9JRCAgICAgICAgID0gJ3JlcG9zaXRvcnkuc2Fsb25kaWdpdGFsJwpSRVBPQURET05YTUwgICA9ICdodHRwczovL2dpdGh1Yi5jb20vc2Fsb25kaWdpdGFsL3NhbG9uZGlnaXRhbC9yYXcvbWFzdGVyL3JlcG9zaXRvcnkuc2Fsb25kaWdpdGFsL2FkZG9uLnhtbCcKUkVQT1pJUFVSTCAgICAgPSAnaHR0cHM6Ly9naXRodWIuY29tL3NhbG9uZGlnaXRhbC9zYWxvbmRpZ2l0YWwvcmF3L21hc3Rlci8nCkJVSUxERklMRSAgICAgICAgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3BlZHJvanVhbmFtZWxpZS91bml2ZXJzaWRhZHBhbC9tYXN0ZXIvbWZoZzIudHh0JwpBRERPTiAgICAgICAgICAgID0gd2l6LmFkZG9uSWQoQURET05fSUQpClZFUlNJT04gICAgICAgICAgPSB3aXouYWRkb25JbmZvKEFERE9OX0lELCd2ZXJzaW9uJykKQURET05QQVRIICAgICAgICA9IHdpei5hZGRvbkluZm8oQURET05fSUQsJ3BhdGgnKQpESUFMT0cgICAgICAgICAgID0geGJtY2d1aS5EaWFsb2coKQpEUCAgICAgICAgICAgICAgID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpCkhPTUUgICAgICAgICAgICAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9ob21lLycpCkxPRyAgICAgICAgICAgICAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9sb2dwYXRoLycpClBST0ZJTEUgICAgICAgICAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9wcm9maWxlLycpCkFERE9OUyAgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oSE9NRSwgICAgICAnYWRkb25zJykKVVNFUkRBVEEgICAgICAgICA9IG9zLnBhdGguam9pbihIT01FLCAgICAgICd1c2VyZGF0YScpClBMVUdJTiAgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQURET05TLCAgICBBRERPTl9JRCkKUEFDS0FHRVMgICAgICAgICA9IG9zLnBhdGguam9pbihBRERPTlMsICAgICdwYWNrYWdlcycpCkFERE9ORCAgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICAnYWRkb25fZGF0YScpCkFERE9OREFUQSAgICAgICAgPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICAnYWRkb25fZGF0YScsIEFERE9OX0lEKQpBRFZBTkNFRCAgICAgICAgID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAgJ2FkdmFuY2Vkc2V0dGluZ3MueG1sJykKU09VUkNFUyAgICAgICAgICA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgICdzb3VyY2VzLnhtbCcpCkZBVk9VUklURVMgICAgICAgPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICAnZmF2b3VyaXRlcy54bWwnKQpQUk9GSUxFUyAgICAgICAgID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAgJ3Byb2ZpbGVzLnhtbCcpCkdVSVNFVFRJTkdTICAgICAgPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICAnZ3Vpc2V0dGluZ3MueG1sJykKVEhVTUJTICAgICAgICAgICA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgICdUaHVtYm5haWxzJykKREFUQUJBU0UgICAgICAgICA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgICdEYXRhYmFzZScpCkZBTkFSVCAgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQURET05QQVRILCAnZmFuYXJ0LmpwZycpCklDT04gICAgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQURET05QQVRILCAnaWNvbi5wbmcnKQpBUlQgICAgICAgICAgICAgID0gb3MucGF0aC5qb2luKEFERE9OUEFUSCwgJ3Jlc291cmNlcycsICdhcnQnKQpXSVpMT0cgICAgICAgICAgID0gb3MucGF0aC5qb2luKEFERE9OREFUQSwgJ3dpemFyZC5sb2cnKQpTS0lOICAgICAgICAgICAgID0geGJtYy5nZXRTa2luRGlyKCkKQlVJTEROQU1FICAgICAgICA9IHdpei5nZXRTKCdidWlsZG5hbWUnKQpERUZBVUxUU0tJTiAgICAgID0gd2l6LmdldFMoJ2RlZmF1bHRza2luJykKREVGQVVMVE5BTUUgICAgICA9IHdpei5nZXRTKCdkZWZhdWx0c2tpbm5hbWUnKQpERUZBVUxUSUdOT1JFICAgID0gd2l6LmdldFMoJ2RlZmF1bHRza2luaWdub3JlJykKQlVJTERWRVJTSU9OICAgICA9IHdpei5nZXRTKCdidWlsZHZlcnNpb24nKQpCVUlMRFRIRU1FICAgICAgID0gd2l6LmdldFMoJ2J1aWxkdGhlbWUnKQpCVUlMRExBVEVTVCAgICAgID0gd2l6LmdldFMoJ2xhdGVzdHZlcnNpb24nKQpJTlNUQUxMTUVUSE9EICAgID0gd2l6LmdldFMoJ2luc3RhbGxtZXRob2QnKQpTSE9XMTUgICAgICAgICAgID0gd2l6LmdldFMoJ3Nob3cxNScpClNIT1cxNiAgICAgICAgICAgPSB3aXouZ2V0Uygnc2hvdzE2JykKU0hPVzE3ICAgICAgICAgICA9IHdpei5nZXRTKCdzaG93MTcnKQpTSE9XMTggICAgICAgICAgID0gd2l6LmdldFMoJ3Nob3cxOCcpClNIT1dBRFVMVCAgICAgICAgPSB3aXouZ2V0UygnYWR1bHQnKQpTSE9XTUFJTlQgICAgICAgID0gd2l6LmdldFMoJ3Nob3dtYWludCcpCkFVVE9DTEVBTlVQICAgICAgPSB3aXouZ2V0UygnYXV0b2NsZWFuJykKQVVUT0NBQ0hFICAgICAgICA9IHdpei5nZXRTKCdjbGVhcmNhY2hlJykKQVVUT1BBQ0tBR0VTICAgICA9IHdpei5nZXRTKCdjbGVhcnBhY2thZ2VzJykKQVVUT1RIVU1CUyAgICAgICA9IHdpei5nZXRTKCdjbGVhcnRodW1icycpCkFVVE9GRVEgICAgICAgICAgPSB3aXouZ2V0UygnYXV0b2NsZWFuZmVxJykKQVVUT05FWFRSVU4gICAgICA9IHdpei5nZXRTKCduZXh0YXV0b2NsZWFudXAnKQpJTkNMVURFVklERU8gICAgID0gd2l6LmdldFMoJ2luY2x1ZGV2aWRlbycpCklOQ0xVREVBTEwgICAgICAgPSB3aXouZ2V0UygnaW5jbHVkZWFsbCcpCklOQ0xVREVCT0IgICAgICAgPSB3aXouZ2V0UygnaW5jbHVkZWJvYicpCklOQ0xVREVQSE9FTklYICAgPSB3aXouZ2V0UygnaW5jbHVkZXBob2VuaXgnKQpJTkNMVURFU1BFQ1RPICAgID0gd2l6LmdldFMoJ2luY2x1ZGVzcGVjdG8nKQpJTkNMVURFR0VORVNJUyAgID0gd2l6LmdldFMoJ2luY2x1ZGVnZW5lc2lzJykKSU5DTFVERUVYT0RVUyAgICA9IHdpei5nZXRTKCdpbmNsdWRlZXhvZHVzJykKSU5DTFVERU9ORUNIQU4gICA9IHdpei5nZXRTKCdpbmNsdWRlb25lY2hhbicpCklOQ0xVREVTQUxUUyAgICAgPSB3aXouZ2V0UygnaW5jbHVkZXNhbHRzJykKSU5DTFVERVNBTFRTSEQgICA9IHdpei5nZXRTKCdpbmNsdWRlc2FsdHNsaXRlJykKU0VQRVJBVEUgICAgICAgICA9IHdpei5nZXRTKCdzZXBlcmF0ZScpCk5PVElGWSAgICAgICAgICAgPSB3aXouZ2V0Uygnbm90aWZ5JykKTk9URUlEICAgICAgICAgICA9IHdpei5nZXRTKCdub3RlaWQnKQpOT1RFRElTTUlTUyAgICAgID0gd2l6LmdldFMoJ25vdGVkaXNtaXNzJykKVFJBS1RTQVZFICAgICAgICA9IHdpei5nZXRTKCd0cmFrdGxhc3RzYXZlJykKUkVBTFNBVkUgICAgICAgICA9IHdpei5nZXRTKCdkZWJyaWRsYXN0c2F2ZScpCkxPR0lOU0FWRSAgICAgICAgPSB3aXouZ2V0UygnbG9naW5sYXN0c2F2ZScpCktFRVBGQVZTICAgICAgICAgPSB3aXouZ2V0Uygna2VlcGZhdm91cml0ZXMnKQpLRUVQU09VUkNFUyAgICAgID0gd2l6LmdldFMoJ2tlZXBzb3VyY2VzJykKS0VFUFBST0ZJTEVTICAgICA9IHdpei5nZXRTKCdrZWVwcHJvZmlsZXMnKQpLRUVQQURWQU5DRUQgICAgID0gd2l6LmdldFMoJ2tlZXBhZHZhbmNlZCcpCktFRVBSRVBPUyAgICAgICAgPSB3aXouZ2V0Uygna2VlcHJlcG9zJykKS0VFUFNVUEVSICAgICAgICA9IHdpei5nZXRTKCdrZWVwc3VwZXInKQpLRUVQV0hJVEVMSVNUICAgID0gd2l6LmdldFMoJ2tlZXB3aGl0ZWxpc3QnKQpLRUVQVFJBS1QgICAgICAgID0gd2l6LmdldFMoJ2tlZXB0cmFrdCcpCktFRVBSRUFMICAgICAgICAgPSB3aXouZ2V0Uygna2VlcGRlYnJpZCcpCktFRVBMT0dJTiAgICAgICAgPSB3aXouZ2V0Uygna2VlcGxvZ2luJykKTE9HSU5TQVZFICAgICAgICA9IHdpei5nZXRTKCdsb2dpbmxhc3RzYXZlJykKREVWRUxPUEVSICAgICAgICA9IHdpei5nZXRTKCdkZXZlbG9wZXInKQpUSElSRFBBUlRZICAgICAgID0gd2l6LmdldFMoJ2VuYWJsZTNyZCcpClRISVJEMU5BTUUgICAgICAgPSB3aXouZ2V0Uygnd2l6YXJkMW5hbWUnKQpUSElSRDFVUkwgICAgICAgID0gd2l6LmdldFMoJ3dpemFyZDF1cmwnKQpUSElSRDJOQU1FICAgICAgID0gd2l6LmdldFMoJ3dpemFyZDJuYW1lJykKVEhJUkQyVVJMICAgICAgICA9IHdpei5nZXRTKCd3aXphcmQydXJsJykKVEhJUkQzTkFNRSAgICAgICA9IHdpei5nZXRTKCd3aXphcmQzbmFtZScpClRISVJEM1VSTCAgICAgICAgPSB3aXouZ2V0Uygnd2l6YXJkM3VybCcpCkJBQ0tVUExPQ0FUSU9OICAgPSBBRERPTi5nZXRTZXR0aW5nKCdwYXRoJykgaWYgbm90IEFERE9OLmdldFNldHRpbmcoJ3BhdGgnKSA9PSAnJyBlbHNlICdzcGVjaWFsOi8vaG9tZS8nCk1ZQlVJTERTICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQkFDS1VQTE9DQVRJT04sICdTYWxvbkRpZ2l0YWxfQmFja3VwJywgJycpCkFVVE9GRVEgICAgICAgICAgPSBpbnQoZmxvYXQoQVVUT0ZFUSkpIGlmIEFVVE9GRVEuaXNkaWdpdCgpIGVsc2UgMApUT0RBWSAgICAgICAgICAgID0gZGF0ZS50b2RheSgpClRPTU9SUk9XICAgICAgICAgPSBUT0RBWSArIHRpbWVkZWx0YShkYXlzPTEpClRIUkVFREFZUyAgICAgICAgPSBUT0RBWSArIHRpbWVkZWx0YShkYXlzPTMpCktPRElWICAgICAgICAgICAgPSBmbG9hdCh4Ym1jLmdldEluZm9MYWJlbCgiU3lzdGVtLkJ1aWxkVmVyc2lvbiIpWzo0XSkKTUNOQU1FICAgICAgICAgICA9IHdpei5tZWRpYUNlbnRlcigpCklOU1RBTExfUEFHRSAgICAgPSAnaHR0cDovL3NhbG9uZGlnaXRhbC5lcy9jaGVjay5waHAnClVTRVJfQUdFTlQgICAgICAgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS80Ny4wLjI1MjYuNzMgU2FmYXJpLzUzNy4zNiBSZXBsaWNhbnRXaXphcmQvMS4wLjAnCk1FTUJFUlNfVVJMICAgICAgPSAnaHR0cDovL3NhbG9uZGlnaXRhbC5lcy8nCldJWkFSRF9QQUdFICAgICAgPSAnd2l6YXJkLnBocCcKQVBLRklMRSAgICAgICAgICA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGVkcm9qdWFuYW1lbGllL3VuaXZlcnNpZGFkcGFsL21hc3Rlci9hbG1way50eHQnCllPVVRVQkVUSVRMRSAgICAgPSAnVmlkZW9zIGRlIFlvdXR1YmUnCllPVVRVQkVGSUxFICAgICAgPSAnaHR0cDovLycKQURET05GSUxFICAgICAgICA9ICdodHRwOi8vJwpBRFZBTkNFREZJTEUgICAgID0gJ2h0dHA6Ly8nClVQREFURUNIRUNLICAgICAgPSAwCk5FWFRDSEVDSyAgICAgICAgPSBUT0RBWSArIHRpbWVkZWx0YShkYXlzPVVQREFURUNIRUNLKQpOT1RJRklDQVRJT04gICAgID0gJ2h0dHA6Ly8nCkVOQUJMRSAgICAgICAgICAgPSAnTm8nCkhFQURFUlRZUEUgICAgICAgPSAnVGV4dCcKSEVBREVSTUVTU0FHRSAgICA9ICdTYWxvbkRpZ2l0YWwuLi4uLicKSEVBREVSSU1BR0UgICAgICA9ICcnCkJBQ0tHUk9VTkQgICAgICAgPSAnJwpBVVRPVVBEQVRFICAgICAgID0gJ05vJwpXSVpBUkRGSUxFICAgICAgID0gJ2h0dHBzOi8vc2Fsb25kaWdpdGFsLmVzL3dpemFyZC5waHAnCkhJREVDT05UQUNUICAgICAgPSAnTm8nCkNPTlRBQ1QgICAgICAgICAgPSAnR3JhY2lhcyBwb3IgYWRxdWlyaXIgdW5vIGRlIG51ZXN0cm9zIHByb2R1Y3RvcywgcGFyYSBkdWRhcyB5IHNvcG9ydGUgZGlyaWphc2UgYWwgZm9ybyBkZSBjbGllbnRlcyAtLT4gd3d3LnNhbG9uZGlnaXRhbC5lcy9mb3JvJwpDT05UQUNUSUNPTiAgICAgID0gJ2h0dHA6Ly8nCkNPTlRBQ1RGQU5BUlQgICAgPSAnaHR0cHM6Ly9pLmltZ3VyLmNvbS90UERDVVlkLnBuZycKSElERVNQQUNFUlMgICAgICA9ICdObycKU1BBQ0VSICAgICAgICAgICA9ICc9JwpDT0xPUjEgICAgICAgICAgID0gJ3JlZCcKQ09MT1IyICAgICAgICAgICA9ICd3aGl0ZScKVEhFTUUxICAgICAgICAgICA9ICdbQl1bQ09MT1IgJytDT0xPUjErJ11bL0NPTE9SXVsvQl0gW0NPTE9SICcrQ09MT1IyKyddJXNbL0NPTE9SXScKVEhFTUUyICAgICAgICAgICA9ICdbQ09MT1IgJytDT0xPUjIrJ10lc1svQ09MT1JdJwpUSEVNRTMgICAgICAgICAgID0gJ1tDT0xPUiAnK0NPTE9SMSsnXSVzWy9DT0xPUl0nClRIRU1FNCAgICAgICAgICAgPSAnW0JdW0NPTE9SICcrQ09MT1IxKyddVmVyc2lvbjpbL0NPTE9SXVsvQl0gW0NPTE9SICcrQ09MT1IyKyddJXNbL0NPTE9SXScKVEhFTUU1ICAgICAgICAgICA9ICdbQl1bQ09MT1IgJytDT0xPUjErJ11UZW1hIGFjdHVhbDpbL0NPTE9SXVsvQl0gW0NPTE9SICcrQ09MT1IyKyddJXNbL0NPTE9SXScKSUNPTk1BSU5UICAgICAgICA9IG9zLnBhdGguam9pbihBUlQsICdtYWludGVuYW5jZS5wbmcnKQpJQ09OQlVJTERTICAgICAgID0gb3MucGF0aC5qb2luKEFSVCwgJ2J1aWxkcy5wbmcnKQpJQ09OQ09OVEFDVCAgICAgID0gb3MucGF0aC5qb2luKEFSVCwgJ2NvbnRhY3QucG5nJykKSUNPTlNBVkUgICAgICAgICA9IG9zLnBhdGguam9pbihBUlQsICdzYXZlZGF0YS5wbmcnKQpJQ09OVFJBS1QgICAgICAgID0gb3MucGF0aC5qb2luKEFSVCwgJ3RyYWt0LnBuZycpCklDT05SRUFMICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQVJULCAncmVhbGRlYnJpZC5wbmcnKQpJQ09OTE9HSU4gICAgICAgID0gb3MucGF0aC5qb2luKEFSVCwgJ2xvZ2luLnBuZycpCklDT05BUEsgICAgICAgICAgPSBvcy5wYXRoLmpvaW4oQVJULCAnYXBraW5zdGFsbGVyLnBuZycpCklDT05TRVRUSU5HUyAgICAgPSBvcy5wYXRoLmpvaW4oQVJULCAnc2V0dGluZ3MucG5nJykKSUNPTkNVUlJFTlQgICAgICA9IG9zLnBhdGguam9pbihBUlQsICdjdXJyZW50LnBuZycpCklDT05ZT1VUVUJFICAgICAgPSBvcy5wYXRoLmpvaW4oQVJULCAneW91dHViZS5wbmcnKQpMT0dGSUxFUyAgICAgICAgID0gd2l6LkxPR0ZJTEVTClRSQUtUSUQgICAgICAgICAgPSB0cmFrdGl0LlRSQUtUSUQKREVCUklESUQgICAgICAgICA9IGRlYnJpZGl0LkRFQlJJRElECkxPR0lOSUQgICAgICAgICAgPSBsb2dpbml0LkxPR0lOSUQKTU9EVVJMICAgICAgICAgICA9ICdodHRwOi8vJwpNT0RVUkwyICAgICAgICAgID0gJ2h0dHA6Ly9taXJyb3JzLmtvZGkudHYvYWRkb25zL2tyeXB0b24vJwpJTlNUQUxMTUVUSE9EUyAgID0gWydQcmVndW50YXIgc2llbXByZScsICdSZWNhcmdhciBwZXJmaWwnLCAnRm96YXIgY2llcnJlJ10KREVGQVVMVFBMVUdJTlMgICA9IFsnbWV0YWRhdGEuYWxidW0udW5pdmVyc2FsJywgJ21ldGFkYXRhLmFydGlzdHMudW5pdmVyc2FsJywgJ21ldGFkYXRhLmNvbW1vbi5mYW5hcnQudHYnLCAnbWV0YWRhdGEuY29tbW9uLmltZGIuY29tJywgJ21ldGFkYXRhLmNvbW1vbi5tdXNpY2JyYWluei5vcmcnLCAnbWV0YWRhdGEudGhlbW92aWVkYi5vcmcnLCAnbWV0YWRhdGEudHZkYi5jb20nLCAnc2VydmljZS54Ym1jLnZlcnNpb25jaGVjayddCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyMjIEl0ZW1zIGRlbCBtZW51ICMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojYWRkRGlyIChkaXNwbGF5LG1vZGUsbmFtZT1Ob25lLHVybD1Ob25lLG1lbnU9Tm9uZSxvdmVyd3JpdGU9VHJ1ZSxmYW5hcnQ9RkFOQVJULGljb249SUNPTiwgdGhlbWVpdD1Ob25lKQojYWRkRmlsZShkaXNwbGF5LG1vZGUsbmFtZT1Ob25lLHVybD1Ob25lLG1lbnU9Tm9uZSxvdmVyd3JpdGU9VHJ1ZSxmYW5hcnQ9RkFOQVJULGljb249SUNPTiwgdGhlbWVpdD1Ob25lKQoKZGVmIGluZGV4KCk6CiAgICBpZiBBVVRPVVBEQVRFID09ICdZZXMnOgogICAgICAgIGlmIHdpei53b3JraW5nVVJMKFdJWkFSREZJTEUpID09IFRydWU6CiAgICAgICAgICAgIHZlciA9IHdpei5jaGVja1dpemFyZCgndmVyc2lvbicpCiAgICAgICAgICAgIGlmIHZlciA+IFZFUlNJT046IGFkZEZpbGUoJyVzIFt2JXNdIFtDT0xPUiByZWRdW0JdW0FDVFVBTElaQUNJT04gdiVzXVsvQl1bL0NPTE9SXScgJSAoQURET05USVRMRSwgVkVSU0lPTiwgdmVyKSwgJ3dpemFyZHVwZGF0ZScsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgICAgICBlbHNlOiBhZGRGaWxlKCclcyBbdiVzXScgJSAoQURET05USVRMRSwgVkVSU0lPTiksICcnLCB0aGVtZWl0PVRIRU1FMikKICAgICAgICBlbHNlOiBhZGRGaWxlKCclcyBbdiVzXScgJSAoQURET05USVRMRSwgVkVSU0lPTiksICcnLCB0aGVtZWl0PVRIRU1FMikKICAgIGVsc2U6IGFkZEZpbGUoJyVzIFt2JXNdJyAlIChBRERPTlRJVExFLCBWRVJTSU9OKSwgJycsIHRoZW1laXQ9VEhFTUUyKQogICAgaWYgbGVuKEJVSUxETkFNRSkgPiAwOgogICAgICAgIHZlcnNpb24gPSB3aXouY2hlY2tCdWlsZChCVUlMRE5BTUUsICd2ZXJzaW9uJykKICAgICAgICBidWlsZCA9ICclcyAodiVzKScgJSAoQlVJTEROQU1FLCBCVUlMRFZFUlNJT04pCiAgICAgICAgaWYgdmVyc2lvbiA+IEJVSUxEVkVSU0lPTjogYnVpbGQgPSAnJXMgW0NPTE9SIHJlZF1bQl1bQUNUVUFMSVpBQ0lPTiB2JXNdWy9CXVsvQ09MT1JdJyAlIChidWlsZCwgdmVyc2lvbikKICAgICAgICBhZGREaXIoYnVpbGQsJ3ZpZXdidWlsZCcsQlVJTEROQU1FLCBpY29uPUlDT05DVVJSRU5ULCB0aGVtZWl0PVRIRU1FNCkKICAgICAgICB0aGVtZWZpbGUgPSB3aXoudGhlbWVDb3VudChCVUlMRE5BTUUpCiAgICAgICAgaWYgbm90IHRoZW1lZmlsZSA9PSBGYWxzZToKICAgICAgICAgICAgYWRkRmlsZSgnTmluZ3VubycgaWYgQlVJTERUSEVNRSA9PSAiIiBlbHNlIEJVSUxEVEhFTUUsICd0aGVtZScsIEJVSUxETkFNRSwgaWNvbj1JQ09OQ1VSUkVOVCwgdGhlbWVpdD1USEVNRTUpCiAgICBlbHNlOiBhZGREaXIoJ05pbmd1bm8nLCAnYnVpbGRzJywgaWNvbj1JQ09OQ1VSUkVOVCwgdGhlbWVpdD1USEVNRTQpCiAgICBpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRGlyICgnW0ldSW5zdGFsYXJbL0ldJyAgICAgICAgLCdidWlsZHMnLCAgIGljb249SUNPTkJVSUxEUywgICB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZERpciAoJ1tJXU1hbnRlbmltaWVudG9bL0ldJyAgICwnbWFpbnQnLCAgICBpY29uPUlDT05NQUlOVCwgICAgdGhlbWVpdD1USEVNRTEpCiAgICBpZiB3aXoucGxhdGZvcm0oKSA9PSAnYW5kcm9pZCcgb3IgREVWRUxPUEVSID09ICd0cnVlJzogYWRkRGlyICgnW0ldQXBwcyBkZSBBbmRyb2lkIHBhcmEgU2Fsb25EaWdpdGFsIExpdGVbL0ldJyAsJ2FwaycsIGljb249SUNPTkFQSywgdGhlbWVpdD1USEVNRTEpCiAgICBpZiBub3QgQURET05GSUxFID09ICdodHRwOi8vJzogYWRkRGlyICgnW2ldSW5zdGFsYWRvciBkZSBBZGRvbnNbL2ldJyAsJ2FkZG9ucycsIGljb249SUNPTkFERE9OUywgdGhlbWVpdD1USEVNRTEpCiAgICBpZiBub3QgWU9VVFVCRUZJTEUgPT0gJ2h0dHA6Ly8nOiBhZGREaXIgKFlPVVRVQkVUSVRMRSAsJ3lvdXR1YmUnLCBpY29uPUlDT05ZT1VUVUJFLCB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZERpciAoJ1tJXUd1YXJkYXIgZGF0b3NbL0ldJyAgICAgLCdzYXZlZGF0YScsIGljb249SUNPTlNBVkUsICAgICB0aGVtZWl0PVRIRU1FMSkKICAgIGlmIEhJREVDT05UQUNUID09ICdObyc6IGFkZEZpbGUoJ1tJXUNvbnRhY3RvWy9JXScgLCdjb250YWN0JywgaWNvbj1JQ09OQ09OVEFDVCwgIHRoZW1laXQ9VEhFTUUxKQogICAgaWYgSElERVNQQUNFUlMgPT0gJ05vJzogYWRkRmlsZSh3aXouc2VwKCksICcnLCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ1tJXUFqdXN0ZXNbL0ldJyAgICAgICwnc2V0dGluZ3MnLCBpY29uPUlDT05TRVRUSU5HUywgdGhlbWVpdD1USEVNRTEpCiAgICBpZiBERVZFTE9QRVIgPT0gJ3RydWUnOiBhZGREaXIoJ1tJXU9wY2lvbmVzIGRlIGRlc2Fycm9sbGFkb3JbL0ldJywnZGV2ZWxvcGVyJywgaWNvbj1JQ09OU0VUVElOR1MsIHRoZW1laXQ9VEhFTUUxKQogICAgc2V0VmlldygnZmlsZXMnLCAndmlld1R5cGUnKQoKZGVmIGJ1aWxkTWVudSgpOgogICAgc3VtaW5zdGFsbCgpCiAgICBXT1JLSU5HVVJMID0gd2l6LndvcmtpbmdVUkwoQlVJTERGSUxFKQogICAgaWYgbm90IFdPUktJTkdVUkwgPT0gVHJ1ZToKICAgICAgICBhZGRGaWxlKCclcyBWZXJzaW9uOiAlcycgJSAoTUNOQU1FLCBLT0RJViksICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZERpciAoJ1tJXUd1YXJkYXIgZGF0b3NbL0ldJyAgICAgICAsJ3NhdmVkYXRhJywgaWNvbj1JQ09OU0FWRSwgICAgIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGlmIEhJREVTUEFDRVJTID09ICdObyc6IGFkZEZpbGUod2l6LnNlcCgpLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnVVJMIGFsIGFyY2hpdm8gVFhUIG5vIHZhbGlkbycsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJyVzJyAlIFdPUktJTkdVUkwsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQogICAgZWxzZToKICAgICAgICB0b3RhbCwgY291bnQxNSwgY291bnQxNiwgY291bnQxNywgY291bnQxOCwgYWR1bHRjb3VudCwgaGlkZGVuID0gd2l6LmJ1aWxkQ291bnQoKQogICAgICAgIHRoaXJkID0gRmFsc2U7IGFkZGluID0gW10KICAgICAgICBpZiBUSElSRFBBUlRZID09ICd0cnVlJzoKICAgICAgICAgICAgaWYgbm90IFRISVJEMU5BTUUgPT0gJycgYW5kIG5vdCBUSElSRDFVUkwgPT0gJyc6IHRoaXJkID0gVHJ1ZTsgYWRkaW4uYXBwZW5kKCcxJykKICAgICAgICAgICAgaWYgbm90IFRISVJEMk5BTUUgPT0gJycgYW5kIG5vdCBUSElSRDJVUkwgPT0gJyc6IHRoaXJkID0gVHJ1ZTsgYWRkaW4uYXBwZW5kKCcyJykKICAgICAgICAgICAgaWYgbm90IFRISVJEM05BTUUgPT0gJycgYW5kIG5vdCBUSElSRDNVUkwgPT0gJyc6IHRoaXJkID0gVHJ1ZTsgYWRkaW4uYXBwZW5kKCczJykKICAgICAgICBsaW5rICA9IHdpei5vcGVuVVJMKEJVSUxERklMRSkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpLnJlcGxhY2UoJ1x0JywnJykucmVwbGFjZSgnZ3VpPSIiJywgJ2d1aT0iaHR0cDovLyInKS5yZXBsYWNlKCd0aGVtZT0iIicsICd0aGVtZT0iaHR0cDovLyInKS5yZXBsYWNlKCdhZHVsdD0iIicsICdhZHVsdD0ibm8iJykKICAgICAgICBtYXRjaCA9IHJlLmNvbXBpbGUoJ25hbWU9IiguKz8pIi4rP2Vyc2lvbj0iKC4rPykiLis/cmw9IiguKz8pIi4rP3VpPSIoLis/KSIuKz9vZGk9IiguKz8pIi4rP2hlbWU9IiguKz8pIi4rP2Nvbj0iKC4rPykiLis/YW5hcnQ9IiguKz8pIi4rP2R1bHQ9IiguKz8pIi4rP2VzY3JpcHRpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICAgICBpZiB0b3RhbCA9PSAxIGFuZCB0aGlyZCA9PSBGYWxzZToKICAgICAgICAgICAgZm9yIG5hbWUsIHZlcnNpb24sIHVybCwgZ3VpLCBrb2RpLCB0aGVtZSwgaWNvbiwgZmFuYXJ0LCBhZHVsdCwgZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICBpZiBub3QgU0hPV0FEVUxUID09ICd0cnVlJyBhbmQgYWR1bHQubG93ZXIoKSA9PSAneWVzJzogY29udGludWUKICAgICAgICAgICAgICAgIGlmIG5vdCBERVZFTE9QRVIgPT0gJ3RydWUnIGFuZCB3aXouc3RyVGVzdChuYW1lKTogY29udGludWUKICAgICAgICAgICAgICAgIHZpZXdCdWlsZChtYXRjaFswXVswXSkKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIGFkZEZpbGUoJyVzIFZlcnNpb246ICVzJyAlIChNQ05BTUUsIEtPRElWKSwgJycsIGljb249SUNPTkJVSUxEUywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRGlyICgnW0ldR3VhcmRhciBkYXRvc1svSV0nICAgICAgICwnc2F2ZWRhdGEnLCBpY29uPUlDT05TQVZFLCAgICAgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgaWYgSElERVNQQUNFUlMgPT0gJ05vJzogYWRkRmlsZSh3aXouc2VwKCksICcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBpZiB0aGlyZCA9PSBUcnVlOgogICAgICAgICAgICBmb3IgaXRlbSBpbiBhZGRpbjoKICAgICAgICAgICAgICAgIG5hbWUgPSBldmFsKCdUSElSRCVzTkFNRScgJSBpdGVtKQogICAgICAgICAgICAgICAgYWRkRGlyICgiW0JdJXNbL0JdIiAlIG5hbWUsICd2aWV3dGhpcmRwYXJ0eScsIGl0ZW0sIGljb249SUNPTkJVSUxEUywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgaWYgbGVuKG1hdGNoKSA+PSAxOgogICAgICAgICAgICBpZiBTRVBFUkFURSA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICBmb3IgbmFtZSwgdmVyc2lvbiwgdXJsLCBndWksIGtvZGksIHRoZW1lLCBpY29uLCBmYW5hcnQsIGFkdWx0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICBpZiBub3QgU0hPV0FEVUxUID09ICd0cnVlJyBhbmQgYWR1bHQubG93ZXIoKSA9PSAneWVzJzogY29udGludWUKICAgICAgICAgICAgICAgICAgICBpZiBub3QgREVWRUxPUEVSID09ICd0cnVlJyBhbmQgd2l6LnN0clRlc3QobmFtZSk6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgbWVudSA9IGNyZWF0ZU1lbnUoJ2luc3RhbGwnLCAnJywgbmFtZSkKICAgICAgICAgICAgICAgICAgICBhZGREaXIoJ1slc10gJXMgKHYlcyknICUgKGZsb2F0KGtvZGkpLCBuYW1lLCB2ZXJzaW9uKSwgJ3ZpZXdidWlsZCcsIG5hbWUsIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uLCBmYW5hcnQ9ZmFuYXJ0LGljb249aWNvbiwgbWVudT1tZW51LCB0aGVtZWl0PVRIRU1FMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGNvdW50MTggPiAwOgogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJysnIGlmIFNIT1cxOCA9PSAnZmFsc2UnIGVsc2UgJy0nCiAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0JdJXMgVmVyc2lvbmVzIHBhcmEgTGVpYSglcylbL0JdJyAlIChzdGF0ZSwgY291bnQxOCksICd0b2dnbGVzZXR0aW5nJywgICdzaG93MTcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgICAgICAgICBpZiBTSE9XMTggPT0gJ3RydWUnOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbmFtZSwgdmVyc2lvbiwgdXJsLCBndWksIGtvZGksIHRoZW1lLCBpY29uLCBmYW5hcnQsIGFkdWx0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBTSE9XQURVTFQgPT0gJ3RydWUnIGFuZCBhZHVsdC5sb3dlcigpID09ICd5ZXMnOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IERFVkVMT1BFUiA9PSAndHJ1ZScgYW5kIHdpei5zdHJUZXN0KG5hbWUpOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAga29kaXYgPSBpbnQoZmxvYXQoa29kaSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBrb2RpdiA9PSAxODoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51ID0gY3JlYXRlTWVudSgnaW5zdGFsbCcsICcnLCBuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcignWyVzXSAlcyAodiVzKScgJSAoZmxvYXQoa29kaSksIG5hbWUsIHZlcnNpb24pLCAndmlld2J1aWxkJywgbmFtZSwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD1mYW5hcnQsaWNvbj1pY29uLCBtZW51PW1lbnUsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgICAgICAgICAgaWYgY291bnQxNyA+IDA6CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAnKycgaWYgU0hPVzE3ID09ICdmYWxzZScgZWxzZSAnLScKICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKCdbQl0lcyBWZXJzaW9uZXMgcGFyYSBLcnlwdG9uKCVzKVsvQl0nICUgKHN0YXRlLCBjb3VudDE3KSwgJ3RvZ2dsZXNldHRpbmcnLCAgJ3Nob3cxNycsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICAgICAgICAgIGlmIFNIT1cxNyA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuYW1lLCB2ZXJzaW9uLCB1cmwsIGd1aSwga29kaSwgdGhlbWUsIGljb24sIGZhbmFydCwgYWR1bHQsIGRlc2NyaXB0aW9uIGluIG1hdGNoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IFNIT1dBRFVMVCA9PSAndHJ1ZScgYW5kIGFkdWx0Lmxvd2VyKCkgPT0gJ3llcyc6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgREVWRUxPUEVSID09ICd0cnVlJyBhbmQgd2l6LnN0clRlc3QobmFtZSk6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrb2RpdiA9IGludChmbG9hdChrb2RpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGtvZGl2ID09IDE3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnUgPSBjcmVhdGVNZW51KCdpbnN0YWxsJywgJycsIG5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKCdbJXNdICVzICh2JXMpJyAlIChmbG9hdChrb2RpKSwgbmFtZSwgdmVyc2lvbiksICd2aWV3YnVpbGQnLCBuYW1lLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgZmFuYXJ0PWZhbmFydCxpY29uPWljb24sIG1lbnU9bWVudSwgdGhlbWVpdD1USEVNRTIpCiAgICAgICAgICAgICAgICBpZiBjb3VudDE2ID4gMDoKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICcrJyBpZiBTSE9XMTYgPT0gJ2ZhbHNlJyBlbHNlICctJwogICAgICAgICAgICAgICAgICAgIGFkZEZpbGUoJ1tCXSVzIFZlcnNpb25lcyBwYXJhIEphcnZpcyglcylbL0JdJyAlIChzdGF0ZSwgY291bnQxNiksICd0b2dnbGVzZXR0aW5nJywgICdzaG93MTYnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgICAgICAgICBpZiBTSE9XMTYgPT0gJ3RydWUnOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbmFtZSwgdmVyc2lvbiwgdXJsLCBndWksIGtvZGksIHRoZW1lLCBpY29uLCBmYW5hcnQsIGFkdWx0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBTSE9XQURVTFQgPT0gJ3RydWUnIGFuZCBhZHVsdC5sb3dlcigpID09ICd5ZXMnOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IERFVkVMT1BFUiA9PSAndHJ1ZScgYW5kIHdpei5zdHJUZXN0KG5hbWUpOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAga29kaXYgPSBpbnQoZmxvYXQoa29kaSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBrb2RpdiA9PSAxNjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51ID0gY3JlYXRlTWVudSgnaW5zdGFsbCcsICcnLCBuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcignWyVzXSAlcyAodiVzKScgJSAoZmxvYXQoa29kaSksIG5hbWUsIHZlcnNpb24pLCAndmlld2J1aWxkJywgbmFtZSwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD1mYW5hcnQsaWNvbj1pY29uLCBtZW51PW1lbnUsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgICAgICAgICAgaWYgY291bnQxNSA+IDA6CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAnKycgaWYgU0hPVzE1ID09ICdmYWxzZScgZWxzZSAnLScKICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKCdbQl0lcyBWZXJzaW9uZXMgcGFyYSBJc2VuZ2FyZCBvIGluZmVyaW9yKCVzKVsvQl0nICUgKHN0YXRlLCBjb3VudDE1KSwgJ3RvZ2dsZXNldHRpbmcnLCAgJ3Nob3cxNScsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICAgICAgICAgIGlmIFNIT1cxNSA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuYW1lLCB2ZXJzaW9uLCB1cmwsIGd1aSwga29kaSwgdGhlbWUsIGljb24sIGZhbmFydCwgYWR1bHQsIGRlc2NyaXB0aW9uIGluIG1hdGNoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IFNIT1dBRFVMVCA9PSAndHJ1ZScgYW5kIGFkdWx0Lmxvd2VyKCkgPT0gJ3llcyc6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgREVWRUxPUEVSID09ICd0cnVlJyBhbmQgd2l6LnN0clRlc3QobmFtZSk6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrb2RpdiA9IGludChmbG9hdChrb2RpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGtvZGl2IDw9IDE1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnUgPSBjcmVhdGVNZW51KCdpbnN0YWxsJywgJycsIG5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyKCdbJXNdICVzICh2JXMpJyAlIChmbG9hdChrb2RpKSwgbmFtZSwgdmVyc2lvbiksICd2aWV3YnVpbGQnLCBuYW1lLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgZmFuYXJ0PWZhbmFydCxpY29uPWljb24sIG1lbnU9bWVudSwgdGhlbWVpdD1USEVNRTIpCiAgICAgICAgZWxpZiBoaWRkZW4gPiAwOiAKICAgICAgICAgICAgaWYgYWR1bHRjb3VudCA+IDA6CiAgICAgICAgICAgICAgICBhZGRGaWxlKCdWZXJzaW9uZXMgc29sbyBkaXNwb25pYmxlcyBwYXJhIGFkdWx0b3MhJywgJycsIGljb249SUNPTkJVSUxEUywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgICAgICBhZGRGaWxlKCdIYWJpbGl0YSBsYSBvcGNpb24gIkFkdWx0b3MiIGVuICA+IE1hbnRlbmltaWVudG8vT3Ryb3MnLCAnJywgaWNvbj1JQ09OQlVJTERTLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGFkZEZpbGUoJ05vIGhheSBuaW5ndW5hIHZlcnNpb24gZGlzcG9uaWJsZSBwYXJhICVzJyAlIEFERE9OVElUTEUsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGVsc2U6IGFkZEZpbGUoJ0VsIGFyY2hpdm8gVFhUIHF1ZSBjb250aWVuZSBsYXMgdmVyc2lvbmVzIG5vIGVzdGEgZm9ybWF0ZWFkbyBjb3JyZWN0YW1lbnRlLicsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQogICAgc2V0VmlldygnZmlsZXMnLCAndmlld1R5cGUnKQoKZGVmIHN1bWluc3RhbGwocmVkbz1GYWxzZSk6CiAgICBpZiB3aXouZ2V0UygnbG9naW4nKSA9PSAnJyBvciB3aXouZ2V0UygncGFzcycpID09ICcnIG9yIHJlZG8gPT0gVHJ1ZToKICAgICAgICBpZiByZWRvID09IFRydWU6IGNob2ljZSA9IDEKICAgICAgICBlbHNlOiBjaG9pY2UgPSBESUFMT0cueWVzbm8oQURET05USVRMRSwgIk5lY2VzaXRhcyBlc3RhciByZWdpc3RyYWRvIHBhcmEgYWNjZWRlciBhIGxhcyBhY3R1YWxpemFjaW9uZXMgZGUgJXMhIiAlIEFERE9OVElUTEUsICJRdWllcmVzIGludHJvZHVjaXIgdHVzIGRhdG9zIGRlIHVzdWFyaW8/IiwgIlBvciBmYXZvciwgcmVnaXN0cmF0ZSBlbiBlbCBmb3JvIGRlICVzIHBhcmEgYWNjZWRlciEiICUgTUVNQkVSU19VUkwsIHllc2xhYmVsPSJJbnRyb2R1Y2lyIGRhdG9zIiwgbm9sYWJlbD0iQ2FuY2VsYXIiKQogICAgICAgIGlmIGNob2ljZSA9PSAxOiAKICAgICAgICAgICAgbG9naW4gICAgPSB3aXouZ2V0S2V5Ym9hcmQod2l6LmdldFMoJ2xvZ2luJyksICdJbnRyb2R1Y2UgdHUgRU1BSUwgdXNhZG8gcGFyYSBlbCByZWdpc3RybyBlbiBlbCBmb3JvIGRlIFNhbG9uRGlnaXRhbCcpCiAgICAgICAgICAgIHBhc3N3b3JkID0gd2l6LmdldEtleWJvYXJkKHdpei5nZXRTKCdwYXNzJyksICdJbnRyb2R1Y2UgdHUgUGFzc3dvcmQnKQogICAgICAgICAgICB3aXouc2V0UygnbG9naW4nLCBsb2dpbikKICAgICAgICAgICAgd2l6LnNldFMoJ3Bhc3MnLCBwYXNzd29yZCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzeXMuZXhpdCgpCiAgICB1cmwgPSAiJXM/ZW1haWw9JXMmcGFzcz0lcyIgJSAoSU5TVEFMTF9QQUdFLCB3aXouZ2V0UygnbG9naW4nKSwgd2l6LmdldFMoJ3Bhc3MnKSkKICAgIGxpbmsgID0gd2l6Lm9wZW5VUkwodXJsKS5yZXBsYWNlKCdcbicsICcnKS5yZXBsYWNlKCdccicsICcnKQogICAgd2l6LmxvZyhzdHIobGluaykpCiAgICB0b3RhbCA9IHJlLmNvbXBpbGUoJ2luc3RhbGw9IihcZCkiJykuZmluZGFsbChsaW5rKQogICAgdHJ5OgogICAgICAgIGlmIChsaW5rICE9ICcxJyk6CiAgICAgICAgICAgIHN5cy5leGl0KCkKICAgIGV4Y2VwdDogCiAgICAgICAgaWYgRElBTE9HLnllc25vKCdFcnJvciBkZSBhdXRlbnRpZmljYWNpb24nLCAnUG9yIGZhdm9yLCByZWdpc3RyYXRlIGVuIGh0dHA6Ly9zYWxvbmRpZ2l0YWwuZXMvZm9yby92aWV3dG9waWMucGhwP2Y9MjEmdD0zNDQnLCB5ZXNsYWJlbD0iSW50cm9kdWNpciBkYXRvcyIsIG5vbGFiZWw9IkNhbmNlbGFyIik6CiAgICAgICAgICAgIHN1bWluc3RhbGwoVHJ1ZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgICAgIApkZWYgb3BlblVybCh1cmwpOgogICAgcmVxdWVzdCAgPSB1cmxsaWIyLlJlcXVlc3QodXJsKQogICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgVVNFUl9BR0VOVCkKCiAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXF1ZXN0KQogICAgbGluayA9IHJlc3BvbnNlLnJlYWQoKQoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHJldHVybiBsaW5rCiAgICAKZGVmIHZpZXdCdWlsZChuYW1lKToKICAgIHN1bWluc3RhbGwoKQogICAgV09SS0lOR1VSTCA9IHdpei53b3JraW5nVVJMKEJVSUxERklMRSkKICAgIGlmIG5vdCBXT1JLSU5HVVJMID09IFRydWU6CiAgICAgICAgYWRkRmlsZSgnVVJMIGFsIGFyY2hpdm8gVFhUIG5vIHZhbGlkbycsICcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCclcycgJSBXT1JLSU5HVVJMLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgcmV0dXJuCiAgICBpZiB3aXouY2hlY2tCdWlsZChuYW1lLCAndmVyc2lvbicpID09IEZhbHNlOiAKICAgICAgICBhZGRGaWxlKCdFcnJvciBsZXllbmRvIGVsIGFyY2hpdm8gVFhULicsICcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCclcyBubyBoYSBlbmNvbnRyYWRvIG5pbmd1bmEgdmVyc2lvbiBkaXNwb25pYmxlJyAlIG5hbWUsICcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICByZXR1cm4KICAgIGxpbmsgPSB3aXoub3BlblVSTChCVUlMREZJTEUpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKS5yZXBsYWNlKCdcdCcsJycpLnJlcGxhY2UoJ2d1aT0iIicsICdndWk9Imh0dHA6Ly8iJykucmVwbGFjZSgndGhlbWU9IiInLCAndGhlbWU9Imh0dHA6Ly8iJykKICAgIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iJXMiLis/ZXJzaW9uPSIoLis/KSIuKz9ybD0iKC4rPykiLis/dWk9IiguKz8pIi4rP29kaT0iKC4rPykiLis/aGVtZT0iKC4rPykiLis/Y29uPSIoLis/KSIuKz9hbmFydD0iKC4rPykiLis/cmV2aWV3PSIoLis/KSIuKz9kdWx0PSIoLis/KSIuKz9lc2NyaXB0aW9uPSIoLis/KSInICUgbmFtZSkuZmluZGFsbChsaW5rKQogICAgZm9yIHZlcnNpb24sIHVybCwgZ3VpLCBrb2RpLCB0aGVtZWZpbGUsIGljb24sIGZhbmFydCwgcHJldmlldywgYWR1bHQsIGRlc2NyaXB0aW9uIGluIG1hdGNoOgogICAgICAgIGljb24gICAgICAgID0gaWNvbiAgIGlmIHdpei53b3JraW5nVVJMKGljb24pICAgZWxzZSBJQ09OCiAgICAgICAgZmFuYXJ0ICAgICAgPSBmYW5hcnQgaWYgd2l6LndvcmtpbmdVUkwoZmFuYXJ0KSBlbHNlIEZBTkFSVAogICAgICAgIGJ1aWxkICAgICAgID0gJyVzICh2JXMpJyAlIChuYW1lLCB2ZXJzaW9uKQogICAgICAgIGlmIEJVSUxETkFNRSA9PSBuYW1lIGFuZCB2ZXJzaW9uID4gQlVJTERWRVJTSU9OOgogICAgICAgICAgICBidWlsZCA9ICclcyBbQ09MT1IgcmVkXVtWRVJTSU9OIElOU1RBTEFEQSB2JXNdWy9DT0xPUl0nICUgKGJ1aWxkLCBCVUlMRFZFUlNJT04pCiAgICAgICAgYWRkRmlsZShidWlsZCwgJycsIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uLCBmYW5hcnQ9ZmFuYXJ0LCBpY29uPWljb24sIHRoZW1laXQ9VEhFTUU0KQogICAgICAgIGlmIEhJREVTUEFDRVJTID09ICdObyc6IGFkZEZpbGUod2l6LnNlcCgpLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRGlyICgnW0ldR3VhcmRhciBkYXRvc1svSV0nLCAgICAgICAnc2F2ZWRhdGEnLCBpY29uPUlDT05TQVZFLCAgICAgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnW0ldSW5mb3JtYWNpb24gZGUgbGEgdmVyc2lvblsvSV0nLCAgICAnYnVpbGRpbmZvJywgbmFtZSwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD1mYW5hcnQsIGljb249aWNvbiwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgaWYgbm90IHByZXZpZXcgPT0gImh0dHA6Ly8iOiBhZGRGaWxlKCdbSV1WZXIgdmlkZW8gZGUgcHJlc2VudGFjaW9uWy9pXScsICdidWlsZHByZXZpZXcnLCBuYW1lLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgZmFuYXJ0PWZhbmFydCwgaWNvbj1pY29uLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICB0ZW1wMSA9IGludChmbG9hdChLT0RJVikpOyB0ZW1wMiA9IGludChmbG9hdChrb2RpKSkKICAgICAgICBpZiBub3QgdGVtcDEgPT0gdGVtcDI6IAogICAgICAgICAgICBpZiB0ZW1wMSA9PSAxNiBhbmQgdGVtcDIgPD0gMTU6IHdhcm5pbmcgPSBGYWxzZQogICAgICAgICAgICBlbHNlOiB3YXJuaW5nID0gVHJ1ZQogICAgICAgIGVsc2U6IHdhcm5pbmcgPSBGYWxzZQogICAgICAgIGlmIHdhcm5pbmcgPT0gVHJ1ZToKICAgICAgICAgICAgYWRkRmlsZSgnW0ldVmVyc2lvbiBkZXNhcnJvbGxhZGEgcGFyYSBLb2RpICVzKGluc3RhbGFkbzogJXMpWy9JXScgJSAoc3RyKGtvZGkpLCBzdHIoS09ESVYpKSwgJycsIGZhbmFydD1mYW5hcnQsIGljb249aWNvbiwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSh3aXouc2VwKCdJTlNUQUxBUicpLCAnJywgZmFuYXJ0PWZhbmFydCwgaWNvbj1pY29uLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdJbnN0YWxhY2lvbiBsaW1waWEnICAgLCAnaW5zdGFsbCcsIG5hbWUsICdmcmVzaCcgICwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD1mYW5hcnQsIGljb249aWNvbiwgdGhlbWVpdD1USEVNRTEpCiAgICAgICAgYWRkRmlsZSgnQWN0dWFsaXphY2lvbicsICdpbnN0YWxsJywgbmFtZSwgJ25vcm1hbCcgLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgZmFuYXJ0PWZhbmFydCwgaWNvbj1pY29uLCB0aGVtZWl0PVRIRU1FMSkKICAgICAgICBpZiBub3QgZ3VpID09ICdodHRwOi8vJzogYWRkRmlsZSgnUmVpbnN0YWxhciBza2luIHkgc3VzIGRhdG9zJyAgICAsICdpbnN0YWxsJywgbmFtZSwgJ2d1aScgICAgICwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD1mYW5hcnQsIGljb249aWNvbiwgdGhlbWVpdD1USEVNRTEpCiAgICAgICAgaWYgbm90IHRoZW1lZmlsZSA9PSAnaHR0cDovLyc6CiAgICAgICAgICAgIGlmIHdpei53b3JraW5nVVJMKHRoZW1lZmlsZSkgPT0gVHJ1ZToKICAgICAgICAgICAgICAgIGFkZEZpbGUod2l6LnNlcCgnVEVNQVMnKSwgJycsIGZhbmFydD1mYW5hcnQsIGljb249aWNvbiwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgICAgICBsaW5rICA9IHdpei5vcGVuVVJMKHRoZW1lZmlsZSkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpLnJlcGxhY2UoJ1x0JywnJykKICAgICAgICAgICAgICAgIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iKC4rPykiLis/cmw9IiguKz8pIi4rP2Nvbj0iKC4rPykiLis/YW5hcnQ9IiguKz8pIi4rP2R1bHQ9IiguKz8pIi4rP2VzY3JpcHRpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICAgICAgICAgICAgIGZvciB0aGVtZW5hbWUsIHRoZW1ldXJsLCB0aGVtZWljb24sIHRoZW1lZmFuYXJ0LCB0aGVtZWFkdWx0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICBpZiBub3QgU0hPV0FEVUxUID09ICd0cnVlJyBhbmQgdGhlbWVhZHVsdC5sb3dlcigpID09ICd5ZXMnOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIHRoZW1laWNvbiAgID0gdGhlbWVpY29uICAgaWYgdGhlbWVpY29uICAgPT0gJ2h0dHA6Ly8nIGVsc2UgaWNvbgogICAgICAgICAgICAgICAgICAgIHRoZW1lZmFuYXJ0ID0gdGhlbWVmYW5hcnQgaWYgdGhlbWVmYW5hcnQgPT0gJ2h0dHA6Ly8nIGVsc2UgZmFuYXJ0CiAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSh0aGVtZW5hbWUgaWYgbm90IHRoZW1lbmFtZSA9PSBCVUlMRFRIRU1FIGVsc2UgIltCXSVzIChJbnN0YWxhZG8pWy9CXSIgJSB0aGVtZW5hbWUsICd0aGVtZScsIG5hbWUsIHRoZW1lbmFtZSwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGZhbmFydD10aGVtZWZhbmFydCwgaWNvbj10aGVtZWljb24sIHRoZW1laXQ9VEhFTUUzKQogICAgc2V0VmlldygnZmlsZXMnLCAndmlld1R5cGUnKQoKI2RlZiB2aWV3VGhpcmRMaXN0KG51bWJlcik6CiMgICBuYW1lID0gZXZhbCgnVEhJUkQlc05BTUUnICUgbnVtYmVyKQojICAgdXJsICA9IGV2YWwoJ1RISVJEJXNVUkwnICUgbnVtYmVyKQojICAgd29yayA9IHdpei53b3JraW5nVVJMKHVybCkKIyAgIGlmIG5vdCB3b3JrID09IFRydWU6CiMgICAgICAgYWRkRmlsZSgnVVJMIGFsIGFyY2hpdm8gVFhUIG5vIHZhbGlkbycsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQojICAgICAgIGFkZEZpbGUoJyVzJyAlIFdPUktJTkdVUkwsICcnLCBpY29uPUlDT05CVUlMRFMsIHRoZW1laXQ9VEhFTUUzKQojICAgZWxzZToKIyAgICAgICB0eXBlLCBidWlsZHNsaXN0ID0gd2l6LnRoaXJkUGFydHkodXJsKQojICAgICAgIGFkZEZpbGUoIltCXSVzWy9CXSIgJSBuYW1lLCAnJywgdGhlbWVpdD1USEVNRTMpCiMgICAgICAgaWYgSElERVNQQUNFUlMgPT0gJ05vJzogYWRkRmlsZSh3aXouc2VwKCksICcnLCB0aGVtZWl0PVRIRU1FMykKIyAgICAgICBpZiB0eXBlOgojICAgICAgICAgICBmb3IgbmFtZSwgdmVyc2lvbiwgdXJsLCBrb2RpLCBpY29uLCBmYW5hcnQsIGFkdWx0LCBkZXNjcmlwdGlvbiBpbiBidWlsZHNsaXN0OgojICAgICAgICAgICAgICAgaWYgbm90IFNIT1dBRFVMVCA9PSAndHJ1ZScgYW5kIGFkdWx0Lmxvd2VyKCkgPT0gJ3llcyc6IGNvbnRpbnVlCiMgICAgICAgICAgICAgICBhZGRGaWxlKCJbJXNdICVzIHYlcyIgJSAoa29kaSwgbmFtZSwgdmVyc2lvbiksICdpbnN0YWxsdGhpcmQnLCBuYW1lLCB1cmwsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIHRoZW1laXQ9VEhFTUUyKQojICAgICAgIGVsc2U6CiMgICAgICAgICAgIGZvciBuYW1lLCB1cmwsIGljb24sIGZhbmFydCwgZGVzY3JpcHRpb24gaW4gYnVpbGRzbGlzdDoKIyAgICAgICAgICAgICAgIGFkZEZpbGUobmFtZSwgJ2luc3RhbGx0aGlyZCcsIG5hbWUsIHVybCwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgdGhlbWVpdD1USEVNRTIpCgojZGVmIGVkaXRUaGlyZFBhcnR5KG51bWJlcik6CiMgICBuYW1lICA9IGV2YWwoJ1RISVJEJXNOQU1FJyAlIG51bWJlcikKIyAgIHVybCAgID0gZXZhbCgnVEhJUkQlc1VSTCcgJSBudW1iZXIpCiMgICBuYW1lMiA9IHdpei5nZXRLZXlib2FyZChuYW1lLCAnSW50cm9kdXpjYSBlbCBub21icmUgZGVsIHdpemFyZCcpCiMgICB1cmwyICA9IHdpei5nZXRLZXlib2FyZCh1cmwsICdJbnRyb2R1emNhIGVsIG5vbWJyZSBkZWwgYXJjaGl2byBUWFQgcXVlIGNvbnRlbmdhIGxhcyB2ZXJzaW9uZXMnKQojICAgCiMgICB3aXouc2V0Uygnd2l6YXJkJXNuYW1lJyAlIG51bWJlciwgbmFtZTIpCiMgICB3aXouc2V0Uygnd2l6YXJkJXN1cmwnICUgbnVtYmVyLCB1cmwyKQoKI2RlZiBhcGtTY3JhcGVyKG5hbWU9IiIpOgojICAgaWYgbmFtZSA9PSAna29kaSc6CiMgICAgICAga29kaXVybDEgPSAnaHR0cDovL21pcnJvcnMua29kaS50di9yZWxlYXNlcy9hbmRyb2lkL2FybS8nCiMgICAgICAga29kaXVybDIgPSAnaHR0cDovL21pcnJvcnMua29kaS50di9yZWxlYXNlcy9hbmRyb2lkL2FybS9vbGQvJwojICAgICAgIHVybDEgPSB3aXoub3BlblVSTChrb2RpdXJsMSkucmVwbGFjZSgnXG4nLCAnJykucmVwbGFjZSgnXHInLCAnJykucmVwbGFjZSgnXHQnLCAnJykKIyAgICAgICB1cmwyID0gd2l6Lm9wZW5VUkwoa29kaXVybDIpLnJlcGxhY2UoJ1xuJywgJycpLnJlcGxhY2UoJ1xyJywgJycpLnJlcGxhY2UoJ1x0JywgJycpCiMgICAgICAgeCA9IDAKIyAgICAgICBtYXRjaDEgPSByZS5jb21waWxlKCc8dHI+PHRkPjxhIGhyZWY9IiguKz8pIj4oLis/KTwvYT48L3RkPjx0ZD4oLis/KTwvdGQ+PHRkPiguKz8pPC90ZD48L3RyPicpLmZpbmRhbGwodXJsMSkKIyAgICAgICBtYXRjaDIgPSByZS5jb21waWxlKCc8dHI+PHRkPjxhIGhyZWY9IiguKz8pIj4oLis/KTwvYT48L3RkPjx0ZD4oLis/KTwvdGQ+PHRkPiguKz8pPC90ZD48L3RyPicpLmZpbmRhbGwodXJsMikKIyAgICAgICAKIyAgICAgICBhZGRGaWxlKCJLb2RpIG9maWNpYWwgcGFyYSBBbmRyb2lkIiwgdGhlbWVpdD1USEVNRTEpCiMgICAgICAgcmMgPSBGYWxzZQojICAgICAgIGZvciB1cmwsIG5hbWUsIHNpemUsIGRhdGUgaW4gbWF0Y2gxOgojICAgICAgICAgICBpZiB1cmwgaW4gWycuLi8nLCAnb2xkLyddOiBjb250aW51ZQojICAgICAgICAgICBpZiBub3QgdXJsLmVuZHN3aXRoKCcuYXBrJyk6IGNvbnRpbnVlCiMgICAgICAgICAgIGlmIG5vdCB1cmwuZmluZCgnXycpID09IC0xIGFuZCByYyA9PSBUcnVlOiBjb250aW51ZQojICAgICAgICAgICB0cnk6CiMgICAgICAgICAgICAgICB0ZW1wbmFtZSA9IG5hbWUuc3BsaXQoJy0nKQojICAgICAgICAgICAgICAgaWYgbm90IHVybC5maW5kKCdfJykgPT0gLTE6CiMgICAgICAgICAgICAgICAgICAgcmMgPSBUcnVlCiMgICAgICAgICAgICAgICAgICAgbmFtZTIsIHYyID0gdGVtcG5hbWVbMl0uc3BsaXQoJ18nKQojICAgICAgICAgICAgICAgZWxzZTogCiMgICAgICAgICAgICAgICAgICAgbmFtZTIgPSB0ZW1wbmFtZVsyXQojICAgICAgICAgICAgICAgICAgIHYyID0gJycKIyAgICAgICAgICAgICAgIHRpdGxlID0gIltDT0xPUiAlc10lcyB2JXMlcyAlc1svQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIHRlbXBuYW1lWzBdLnRpdGxlKCksIHRlbXBuYW1lWzFdLCB2Mi51cHBlcigpLCBuYW1lMiwgQ09MT1IyLCBzaXplLnJlcGxhY2UoJyAnLCAnJyksIENPTE9SMSwgZGF0ZSkKIyAgICAgICAgICAgICAgIGRvd25sb2FkID0gdXJsam9pbihrb2RpdXJsMSwgdXJsKQojICAgICAgICAgICAgICAgYWRkRmlsZSh0aXRsZSwgJ2Fwa2luc3RhbGwnLCAiJXMgdiVzJXMgJXMiICUgKHRlbXBuYW1lWzBdLnRpdGxlKCksIHRlbXBuYW1lWzFdLCB2Mi51cHBlcigpLCBuYW1lMiksIGRvd25sb2FkKQojICAgICAgICAgICAgICAgeCArPSAxCiMgICAgICAgICAgIGV4Y2VwdDoKIyAgICAgICAgICAgICAgIHdpei5sb2coIkVycm9yIG9uOiAlcyIgJSBuYW1lKQojICAgICAgICAgICAKIyAgICAgICBmb3IgdXJsLCBuYW1lLCBzaXplLCBkYXRlIGluIG1hdGNoMjoKIyAgICAgICAgICAgaWYgdXJsIGluIFsnLi4vJywgJ29sZC8nXTogY29udGludWUKIyAgICAgICAgICAgaWYgbm90IHVybC5lbmRzd2l0aCgnLmFwaycpOiBjb250aW51ZQojICAgICAgICAgICBpZiBub3QgdXJsLmZpbmQoJ18nKSA9PSAtMTogY29udGludWUKIyAgICAgICAgICAgdHJ5OgojICAgICAgICAgICAgICAgdGVtcG5hbWUgPSBuYW1lLnNwbGl0KCctJykKIyAgICAgICAgICAgICAgIHRpdGxlID0gIltDT0xPUiAlc10lcyB2JXMgJXNbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCB0ZW1wbmFtZVswXS50aXRsZSgpLCB0ZW1wbmFtZVsxXSwgdGVtcG5hbWVbMl0sIENPTE9SMiwgc2l6ZS5yZXBsYWNlKCcgJywgJycpLCBDT0xPUjEsIGRhdGUpCiMgICAgICAgICAgICAgICBkb3dubG9hZCA9IHVybGpvaW4oa29kaXVybDIsIHVybCkKIyAgICAgICAgICAgICAgIGFkZEZpbGUodGl0bGUsICdhcGtpbnN0YWxsJywgIiVzIHYlcyAlcyIgJSAodGVtcG5hbWVbMF0udGl0bGUoKSwgdGVtcG5hbWVbMV0sIHRlbXBuYW1lWzJdKSwgZG93bmxvYWQpCiMgICAgICAgICAgICAgICB4ICs9IDEKIyAgICAgICAgICAgZXhjZXB0OgojICAgICAgICAgICAgICAgd2l6LmxvZygiRXJyb3IgZW46ICVzIiAlIG5hbWUpCiMgICAgICAgaWYgeCA9PSAwOiBhZGRGaWxlKCJFbCBzZXJ2aWRvciBkZSBkZXNjYXJnYXMgZGUgS29kaSBlc3RhIGNhaWRvLiIpCiMgICBlbGlmIG5hbWUgPT0gJ3NwbWMnOgojICAgICAgIHNwbWN1cmwxID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9rb3lpbmcvU1BNQy9yZWxlYXNlcycKIyAgICAgICB1cmwxID0gd2l6Lm9wZW5VUkwoc3BtY3VybDEpLnJlcGxhY2UoJ1xuJywgJycpLnJlcGxhY2UoJ1xyJywgJycpLnJlcGxhY2UoJ1x0JywgJycpCiMgICAgICAgeCA9IDAKIyAgICAgICBtYXRjaDEgPSByZS5jb21waWxlKCc8ZGl2Lis/bGFzcz0icmVsZWFzZS1ib2R5Lis/ZGl2IGNsYXNzPSJyZWxlYXNlLWhlYWRlciIuKz9hIGhyZWY9Lis/PiguKz8pPC9hPi4rP3VsIGNsYXNzPSJyZWxlYXNlLWRvd25sb2FkcyI+KC4rPyk8L3VsPi4rPy9kaXY+JykuZmluZGFsbCh1cmwxKQojICAgICAgIAojICAgICAgIGFkZEZpbGUoIlNQTUMgb2ZpY2lhbCBwYXJhIEFuZHJvaWQiLCB0aGVtZWl0PVRIRU1FMSkKIwojICAgICAgIGZvciBuYW1lLCB1cmxzIGluIG1hdGNoMToKIyAgICAgICAgICAgdGVtcHVybCA9ICcnCiMgICAgICAgICAgIG1hdGNoMiA9IHJlLmNvbXBpbGUoJzxsaT4uKz88YSBocmVmPSIoLis/KSIgcmVsPSJub2ZvbGxvdyI+Lis/PHNtYWxsIGNsYXNzPSJ0ZXh0LWdyYXkgZmxvYXQtcmlnaHQiPiguKz8pPC9zbWFsbD4uKz9zdHJvbmc+KC4rPyk8L3N0cm9uZz4uKz88L2E+Lis/PC9saT4nKS5maW5kYWxsKHVybHMpCiMgICAgICAgICAgIGZvciBhcGt1cmwsIGFwa3NpemUsIGFwa25hbWUgaW4gbWF0Y2gyOgojICAgICAgICAgICAgICAgaWYgYXBrbmFtZS5maW5kKCdhcm1lYWJpJykgPT0gLTE6IGNvbnRpbnVlCiMgICAgICAgICAgICAgICBpZiBhcGtuYW1lLmZpbmQoJ2xhdW5jaGVyJykgPiAtMTogY29udGludWUKIyAgICAgICAgICAgICAgIHRlbXB1cmwgPSB1cmxqb2luKCdodHRwczovL2dpdGh1Yi5jb20nLCBhcGt1cmwpCiMgICAgICAgICAgICAgICBicmVhawojICAgICAgICAgICBpZiB0ZW1wdXJsID09ICcnOiBjb250aW51ZQojICAgICAgICAgICB0cnk6CiMgICAgICAgICAgICAgICBuYW1lID0gIlNQTUMgJXMiICUgbmFtZQojICAgICAgICAgICAgICAgdGl0bGUgPSAiW0NPTE9SICVzXSVzWy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgbmFtZSwgQ09MT1IyLCBhcGtzaXplLnJlcGxhY2UoJyAnLCAnJykpCiMgICAgICAgICAgICAgICBkb3dubG9hZCA9IHRlbXB1cmwKIyAgICAgICAgICAgICAgIGFkZEZpbGUodGl0bGUsICdhcGtpbnN0YWxsJywgbmFtZSwgZG93bmxvYWQpCiMgICAgICAgICAgICAgICB4ICs9IDEKIyAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiwgZToKIyAgICAgICAgICAgICAgIHdpei5sb2coIkVycm9yIGVuOiAlcyAvICVzIiAlIChuYW1lLCBzdHIoZSkpKQojICAgICAgIGlmIHggPT0gMDogYWRkRmlsZSgiRWwgc2Vydmlkb3IgZGUgZGVzY2FyZ2FzIGRlIFNQTUMgZXN0YSBjYWlkby4iKQoKZGVmIGFwa01lbnUodXJsPU5vbmUpOgogICAgc3VtaW5zdGFsbCgpCiAgICAjaWYgdXJsID09IE5vbmU6CiAgICAgICAgI2FkZERpciAoJ0Rlc2NhcmdhciBLb2RpJywgJ2Fwa3NjcmFwZScsICdrb2RpJywgaWNvbj1JQ09OQVBLLCB0aGVtZWl0PVRIRU1FMSkKICAgICAgICAjYWRkRGlyICgnRGVzY2FyZ2FyIFNQTUMnLCAnYXBrc2NyYXBlJywgJ3NwbWMnLCBpY29uPUlDT05BUEssIHRoZW1laXQ9VEhFTUUxKQogICAgICAgICNpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgaWYgbm90IEFQS0ZJTEUgPT0gJ2h0dHA6Ly8nOgogICAgICAgIGlmIHVybCA9PSBOb25lOgogICAgICAgICAgICBBUEtXT1JLSU5HICA9IHdpei53b3JraW5nVVJMKEFQS0ZJTEUpCiAgICAgICAgICAgIFRFTVBBUEtGSUxFID0gQVBLRklMRQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIEFQS1dPUktJTkcgID0gd2l6LndvcmtpbmdVUkwodXJsKQogICAgICAgICAgICBURU1QQVBLRklMRSA9IHVybAogICAgICAgIGlmIEFQS1dPUktJTkcgPT0gVHJ1ZToKICAgICAgICAgICAgbGluayA9IHdpei5vcGVuVVJMKFRFTVBBUEtGSUxFKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykucmVwbGFjZSgnXHQnLCcnKQogICAgICAgICAgICBtYXRjaCA9IHJlLmNvbXBpbGUoJ25hbWU9IiguKz8pIi4rP2VjdGlvbj0iKC4rPykiLis/cmw9IiguKz8pIi4rP2Nvbj0iKC4rPykiLis/YW5hcnQ9IiguKz8pIi4rP2R1bHQ9IiguKz8pIi4rP2VzY3JpcHRpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICAgICAgICAgaWYgbGVuKG1hdGNoKSA+IDA6CiAgICAgICAgICAgICAgICB4ID0gMAogICAgICAgICAgICAgICAgZm9yIG5hbWUsIHNlY3Rpb24sIHVybCwgaWNvbiwgZmFuYXJ0LCBhZHVsdCwgZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IFNIT1dBRFVMVCA9PSAndHJ1ZScgYW5kIGFkdWx0Lmxvd2VyKCkgPT0gJ3llcyc6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaWYgc2VjdGlvbi5sb3dlcigpID09ICd5ZXMnOgogICAgICAgICAgICAgICAgICAgICAgICB4ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGlyICgiW0JdJXNbL0JdIiAlIG5hbWUsICdhcGsnLCB1cmwsIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKG5hbWUsICdhcGtpbnN0YWxsJywgbmFtZSwgdXJsLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCB0aGVtZWl0PVRIRU1FMikKICAgICAgICAgICAgICAgICAgICBpZiB4IDwgMToKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgiTm8gc2UgaGFuIGFncmVnYWRvIGFkZG9ucyBhIGVzdGUgbWVudSB0b2RhdmlhISIsICcnLCB0aGVtZWl0PVRIRU1FMikKICAgICAgICAgICAgZWxzZTogd2l6LmxvZygiW0FQSyBNZW51XSBFUlJPUjogRm9ybWF0byBubyB2YWxpZG8uIiwgeGJtYy5MT0dFUlJPUikKICAgICAgICBlbHNlOiAKICAgICAgICAgICAgd2l6LmxvZygiW0FQSyBNZW51XSBFUlJPUjogVVJMIGRlIGxhIGxpc3RhIGRlIEFQS3Mgbm8gdmFsaWRvIiwgeGJtYy5MT0dFUlJPUikKICAgICAgICAgICAgYWRkRmlsZSgnVVJMIGFsIGFyY2hpdm8gVFhUIG5vIHZhbGlkbycsICcnLCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgYWRkRmlsZSgnJXMnICUgQVBLV09SS0lORywgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIHJldHVybgogICAgZWxzZTogd2l6LmxvZygiW0FQSyBNZW51XSBObyBoYXkgbGlzdGFkbyBuaW5ndW5hIEFQSyB0b2RhdmlhLiIpCiAgICBzZXRWaWV3KCdmaWxlcycsICd2aWV3VHlwZScpCgpkZWYgYWRkb25NZW51KHVybD1Ob25lKToKICAgIGlmIG5vdCBBRERPTkZJTEUgPT0gJ2h0dHA6Ly8nOgogICAgICAgIGlmIHVybCA9PSBOb25lOgogICAgICAgICAgICBBRERPTldPUktJTkcgID0gd2l6LndvcmtpbmdVUkwoQURET05GSUxFKQogICAgICAgICAgICBURU1QQURET05GSUxFID0gQURET05GSUxFCiAgICAgICAgZWxzZToKICAgICAgICAgICAgQURET05XT1JLSU5HICA9IHdpei53b3JraW5nVVJMKHVybCkKICAgICAgICAgICAgVEVNUEFERE9ORklMRSA9IHVybAogICAgICAgIGlmIEFERE9OV09SS0lORyA9PSBUcnVlOgogICAgICAgICAgICBsaW5rID0gd2l6Lm9wZW5VUkwoVEVNUEFERE9ORklMRSkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpLnJlcGxhY2UoJ1x0JywnJykucmVwbGFjZSgncmVwb3NpdG9yeT0iIicsICdyZXBvc2l0b3J5PSJub25lIicpLnJlcGxhY2UoJ3JlcG9zaXRvcnl1cmw9IiInLCAncmVwb3NpdG9yeXVybD0iaHR0cDovLyInKS5yZXBsYWNlKCdyZXBvc2l0b3J5eG1sPSIiJywgJ3JlcG9zaXRvcnl4bWw9Imh0dHA6Ly8iJykKICAgICAgICAgICAgbWF0Y2ggPSByZS5jb21waWxlKCduYW1lPSIoLis/KSIuKz9sdWdpbj0iKC4rPykiLis/cmw9IiguKz8pIi4rP2Vwb3NpdG9yeT0iKC4rPykiLis/ZXBvc2l0b3J5eG1sPSIoLis/KSIuKz9lcG9zaXRvcnl1cmw9IiguKz8pIi4rP2Nvbj0iKC4rPykiLis/YW5hcnQ9IiguKz8pIi4rP2R1bHQ9IiguKz8pIi4rP2VzY3JpcHRpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICAgICAgICAgaWYgbGVuKG1hdGNoKSA+IDA6CiAgICAgICAgICAgICAgICB4ID0gMAogICAgICAgICAgICAgICAgZm9yIG5hbWUsIHBsdWdpbiwgdXJsLCByZXBvc2l0b3J5LCByZXBvc2l0b3J5eG1sLCByZXBvc2l0b3J5dXJsLCBpY29uLCBmYW5hcnQsIGFkdWx0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICBpZiBwbHVnaW4ubG93ZXIoKSA9PSAnc2VjdGlvbic6CiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIgKCJbQl0lc1svQl0iICUgbmFtZSwgJ2FkZG9ucycsIHVybCwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IFNIT1dBRFVMVCA9PSAndHJ1ZScgYW5kIGFkdWx0Lmxvd2VyKCkgPT0gJ3llcyc6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZCAgICA9IHhibWNhZGRvbi5BZGRvbihpZD1wbHVnaW4pLmdldEFkZG9uSW5mbygncGF0aCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhhZGQpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgICA9ICJbQ09MT1IgZ3JlZW5dW0luc3RhbGFkb11bL0NPTE9SXSAlcyIgJSBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgeCArPSAxCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZpbGUobmFtZSwgJ2FkZG9uaW5zdGFsbCcsIHBsdWdpbiwgVEVNUEFERE9ORklMRSwgZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgdGhlbWVpdD1USEVNRTIpCiAgICAgICAgICAgICAgICAgICAgaWYgeCA8IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZpbGUoIk5vIHNlIGhhbiBhZ3JlZ2FkbyBhZGRvbnMgYWwgbWVudSB0b2RhdmlhISIsICcnLCB0aGVtZWl0PVRIRU1FMikKICAgICAgICAgICAgZWxzZTogCiAgICAgICAgICAgICAgICBhZGRGaWxlKCdBcmNoaXZvIGRlIHRleHRvIG5vIGZvcm1hdGVhZG8gY29ycmVjdGFtZW50ZSEnLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgICAgICB3aXoubG9nKCJbQWRkb24gTWVudV0gRVJST1I6IEZvcm1hdG8gbm8gdmFsaWRvLiIpCiAgICAgICAgZWxzZTogCiAgICAgICAgICAgIHdpei5sb2coIltBZGRvbiBNZW51XSBFUlJPUjogVVJMIGFsIGFyY2hpdm8gZGUgYWRkb25zIGNhaWRvLiIpCiAgICAgICAgICAgIGFkZEZpbGUoJ1VSTCBhbCBhcmNoaXZvIFRYVCBubyB2YWxpZG8nLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgIGFkZEZpbGUoJyVzJyAlIEFERE9OV09SS0lORywgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgZWxzZTogd2l6LmxvZygiW0FkZG9uIE1lbnVdIE5vIHNlIGhhIGxpc3RhZG8gbmluZ3VuIGFkZG9uIHRvZGF2aWEuIikKICAgIHNldFZpZXcoJ2ZpbGVzJywgJ3ZpZXdUeXBlJykKCmRlZiBhZGRvbkluc3RhbGxlcihwbHVnaW4sIHVybCk6CiAgICBpZiBub3QgQURET05GSUxFID09ICdodHRwOi8vJzoKICAgICAgICBBRERPTldPUktJTkcgPSB3aXoud29ya2luZ1VSTCh1cmwpCiAgICAgICAgaWYgQURET05XT1JLSU5HID09IFRydWU6CiAgICAgICAgICAgIGxpbmsgPSB3aXoub3BlblVSTCh1cmwpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKS5yZXBsYWNlKCdcdCcsJycpLnJlcGxhY2UoJ3JlcG9zaXRvcnk9IiInLCAncmVwb3NpdG9yeT0ibm9uZSInKS5yZXBsYWNlKCdyZXBvc2l0b3J5dXJsPSIiJywgJ3JlcG9zaXRvcnl1cmw9Imh0dHA6Ly8iJykucmVwbGFjZSgncmVwb3NpdG9yeXhtbD0iIicsICdyZXBvc2l0b3J5eG1sPSJodHRwOi8vIicpCiAgICAgICAgICAgIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iKC4rPykiLis/bHVnaW49IiVzIi4rP3JsPSIoLis/KSIuKz9lcG9zaXRvcnk9IiguKz8pIi4rP2Vwb3NpdG9yeXhtbD0iKC4rPykiLis/ZXBvc2l0b3J5dXJsPSIoLis/KSIuKz9jb249IiguKz8pIi4rP2FuYXJ0PSIoLis/KSIuKz9kdWx0PSIoLis/KSIuKz9lc2NyaXB0aW9uPSIoLis/KSInICUgcGx1Z2luKS5maW5kYWxsKGxpbmspCiAgICAgICAgICAgIGlmIGxlbihtYXRjaCkgPiAwOgogICAgICAgICAgICAgICAgZm9yIG5hbWUsIHVybCwgcmVwb3NpdG9yeSwgcmVwb3NpdG9yeXhtbCwgcmVwb3NpdG9yeXVybCwgaWNvbiwgZmFuYXJ0LCBhZHVsdCwgZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKEFERE9OUywgcGx1Z2luKSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRvICAgICAgICA9IFsnTGFuemFyIGFkZG9uJywgJ0VsaW1pbmFyIEFkZG9uJ10KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBESUFMT0cuc2VsZWN0KCJbQ09MT1IgJXNdRWwgYWRkb24gc2UgaGEgaW5zdGFsYWRvIGNvcnJlY3RhbWVudGUsIGFob3JhIHF1ZSBxdWllcmVzIGhhY2VyP1svQ09MT1JdIiAlIENPTE9SMiwgZG8pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGVjdGVkID09IDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXouZWJpKCdSdW5BZGRvbiglcyknICUgcGx1Z2luKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeGJtYy5zbGVlcCg1MDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHNlbGVjdGVkID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXouY2xlYW5Ib3VzZShvcy5wYXRoLmpvaW4oQURET05TLCBwbHVnaW4pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OiB3aXoucmVtb3ZlRm9sZGVyKG9zLnBhdGguam9pbihBRERPTlMsIHBsdWdpbikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgZWxpbWluYXIgbG9zIGRhdG9zIGRlbCBhZGRvbiBwYXJhOiIgJSBDT0xPUjIsICJbQ09MT1IgJXNdJXNbL0NPTE9SXT9bL0NPTE9SXSIgJSAoQ09MT1IxLCBwbHVnaW4pLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVNpLCBlbGltaW5hbG9zWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Ob1svQ09MT1JdWy9CXSIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUFkZG9uRGF0YShwbHVnaW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXoucmVmcmVzaCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgcmVwbyA9IG9zLnBhdGguam9pbihBRERPTlMsIHJlcG9zaXRvcnkpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHJlcG9zaXRvcnkubG93ZXIoKSA9PSAnbm9uZScgYW5kIG5vdCBvcy5wYXRoLmV4aXN0cyhyZXBvKToKICAgICAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygiUmVwb3NpdG9yaW8gbm8gaW5zdGFsYWRvLCBpbnN0YWxhbmRvbG8iKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIGluc3RhbGFyIGVsIHJlcG9zaXRvcmlvIHBhcmEgW0NPTE9SICVzXSVzWy9DT0xPUl06IiAlIChDT0xPUjIsIENPTE9SMSwgcGx1Z2luKSwgIltDT0xPUiAlc10lc1svQ09MT1JdP1svQ09MT1JdIiAlIChDT0xPUjEsIHJlcG9zaXRvcnkpLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVNpWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Ob1svQ09MT1JdWy9CXSIpOiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlciA9IHdpei5wYXJzZURPTSh3aXoub3BlblVSTChyZXBvc2l0b3J5eG1sKSwgJ2FkZG9uJywgcmV0PSd2ZXJzaW9uJywgYXR0cnMgPSB7J2lkJzogcmVwb3NpdG9yeX0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4odmVyKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3ppcCA9ICclcyVzLSVzLnppcCcgJSAocmVwb3NpdG9yeXVybCwgcmVwb3NpdG9yeSwgdmVyWzBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2cocmVwb3ppcCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBLT0RJViA+PSAxNzogd2l6LmFkZG9uRGF0YWJhc2UocmVwb3NpdG9yeSwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsQWRkb24ocmVwb3NpdG9yeSwgcmVwb3ppcCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXouZWJpKCdVcGRhdGVBZGRvblJlcG9zKCknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3aXouZWJpKCdVcGRhdGVMb2NhbEFkZG9ucygpJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXoubG9nKCJJbnN0YWxhbmRvIGFkZG9uIHBhcmEgS29kaSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbCA9IGluc3RhbGxGcm9tS29kaShwbHVnaW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygiSW5zdGFsYXIgcGFyYSBLb2RpOiAlcyIgJSBpbnN0YWxsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluc3RhbGw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5yZWZyZXNoKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygiW0FkZG9uIEluc3RhbGxlcl0gUmVwb3NpdG9yaW8gbm8gaW5zdGFsYWRvOiBJbXBvc2libGUgb2J0ZW5lciBsYSB1cmwhICglcykiICUgcmVwb3NpdG9yeSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTogd2l6LmxvZygiW0FkZG9uIEluc3RhbGxlcl0gUmVwb3NpdG9yaW8gcGFyYSAlcyBubyBpbnN0YWxhZG86ICVzIiAlIChwbHVnaW4sIHJlcG9zaXRvcnkpKQogICAgICAgICAgICAgICAgICAgIGVsaWYgcmVwb3NpdG9yeS5sb3dlcigpID09ICdub25lJzoKICAgICAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygiTm8gaGF5IHJlcG9zaXRvcmlvLCBpbnN0YWxhbmRvIGFkZG9uIikKICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luaWQgPSBwbHVnaW4KICAgICAgICAgICAgICAgICAgICAgICAgemlwdXJsID0gdXJsCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxBZGRvbihwbHVnaW4sIHVybCkKICAgICAgICAgICAgICAgICAgICAgICAgd2l6LnJlZnJlc2goKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2coIlJlcG9zaXRvcmlvIGluc3RhbGFkbywgaW5zdGFsYW5kbyBhZGRvbiIpCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGwgPSBpbnN0YWxsRnJvbUtvZGkocGx1Z2luLCBGYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW5zdGFsbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5yZWZyZXNoKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKEFERE9OUywgcGx1Z2luKSk6IHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgdmVyMiA9IHdpei5wYXJzZURPTSh3aXoub3BlblVSTChyZXBvc2l0b3J5eG1sKSwgJ2FkZG9uJywgcmV0PSd2ZXJzaW9uJywgYXR0cnMgPSB7J2lkJzogcGx1Z2lufSkKICAgICAgICAgICAgICAgICAgICBpZiBsZW4odmVyMikgPiAwOgogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiJXMlcy0lcy56aXAiICUgKHVybCwgcGx1Z2luLCB2ZXIyWzBdKQogICAgICAgICAgICAgICAgICAgICAgICB3aXoubG9nKHN0cih1cmwpKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBLT0RJViA+PSAxNzogd2l6LmFkZG9uRGF0YWJhc2UocGx1Z2luLCAxKQogICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsQWRkb24ocGx1Z2luLCB1cmwpCiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5yZWZyZXNoKCkKICAgICAgICAgICAgICAgICAgICBlbHNlOiAKICAgICAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygibm8gbWF0Y2giKTsgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGVsc2U6IHdpei5sb2coIltBZGRvbiBJbnN0YWxsZXJdIEZvcm1hdG8gbm8gdmFsaWRvIikKICAgICAgICBlbHNlOiB3aXoubG9nKCJbQWRkb24gSW5zdGFsbGVyXSBBcmNoaXZvIGRlIHRleHRvOiAlcyIgJSBBRERPTldPUktJTkcpCiAgICBlbHNlOiB3aXoubG9nKCJbQWRkb24gSW5zdGFsbGVyXSBObyBlc3RhIGFjdGl2YWRvLiIpCgpkZWYgaW5zdGFsbEZyb21Lb2RpKHBsdWdpbiwgb3Zlcj1UcnVlKToKICAgIGlmIG92ZXIgPT0gVHJ1ZToKICAgICAgICB4Ym1jLnNsZWVwKDIwMDApCiAgICAjd2l6LmViaSgnSW5zdGFsbEFkZG9uKCVzKScgJSBwbHVnaW4pCiAgICB3aXouZWJpKCdSdW5QbHVnaW4ocGx1Z2luOi8vJXMpJyAlIHBsdWdpbikKICAgIGlmIG5vdCB3aXoud2hpbGVXaW5kb3coJ3llc25vZGlhbG9nJyk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICB4Ym1jLnNsZWVwKDUwMCkKICAgIGlmIHdpei53aGlsZVdpbmRvdygnb2tkaWFsb2cnKToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIHdpei53aGlsZVdpbmRvdygncHJvZ3Jlc3NkaWFsb2cnKQogICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKEFERE9OUywgcGx1Z2luKSk6IHJldHVybiBUcnVlCiAgICBlbHNlOiByZXR1cm4gRmFsc2UKCmRlZiBpbnN0YWxsQWRkb24obmFtZSwgdXJsKToKICAgIGlmIG5vdCB3aXoud29ya2luZ1VSTCh1cmwpID09IFRydWU6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc11BZGRvbiBJbnN0YWxsZXJbL0NPTE9SXSIgJSBDT0xPUjEsICdbQ09MT1IgJXNdJXM6Wy9DT0xPUl0gW0NPTE9SICVzXVVSTCBwYXJhIGVsIGFyY2hpdm8gWklQIG5vIHZhbGlkbyFbL0NPTE9SXScgJSAoQ09MT1IxLCBuYW1lLCBDT0xPUjIpKTsgcmV0dXJuCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoUEFDS0FHRVMpOiBvcy5tYWtlZGlycyhQQUNLQUdFUykKICAgIERQLmNyZWF0ZShBRERPTlRJVExFLCdbQ09MT1IgJXNdW0JdRG93bmxvYWRpbmc6Wy9CXVsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSksICcnLCAnW0NPTE9SICVzXVBvciBmYXZvciwgZXNwZXJlWy9DT0xPUl0nICUgQ09MT1IyKQogICAgdXJsc3BsaXQgPSB1cmwuc3BsaXQoJy8nKQogICAgbGliPW9zLnBhdGguam9pbihQQUNLQUdFUywgdXJsc3BsaXRbLTFdKQogICAgdHJ5OiBvcy5yZW1vdmUobGliKQogICAgZXhjZXB0OiBwYXNzCiAgICBkb3dubG9hZGVyLmRvd25sb2FkKHVybCwgbGliLCBEUCkKICAgIHRpdGxlID0gJ1tDT0xPUiAlc11bQl1JbnN0YWxhbmRvOlsvQl1bL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IyLCBDT0xPUjEsIG5hbWUpCiAgICBEUC51cGRhdGUoMCwgdGl0bGUsJycsICdbQ09MT1IgJXNdUG9yIGZhdm9yIGVzcGVyZVsvQ09MT1JdJyAlIENPTE9SMikKICAgIHBlcmNlbnQsIGVycm9ycywgZXJyb3IgPSBleHRyYWN0LmFsbChsaWIsQURET05TLERQLCB0aXRsZT10aXRsZSkKICAgIERQLnVwZGF0ZSgwLCB0aXRsZSwnJywgJ1tDT0xPUiAlc11JbnN0YWxhbmRvIGRlcGVuZGVuY2lhc1svQ09MT1JdJyAlIENPTE9SMikKICAgIGluc3RhbGxlZChuYW1lKQogICAgaW5zdGFsbERlcChuYW1lLCBEUCkKICAgIERQLmNsb3NlKCkKICAgIHdpei5lYmkoJ1VwZGF0ZUFkZG9uUmVwb3MoKScpCiAgICB3aXouZWJpKCdVcGRhdGVMb2NhbEFkZG9ucygpJykKICAgIHdpei5yZWZyZXNoKCkKCmRlZiBpbnN0YWxsRGVwKG5hbWUsIERQPU5vbmUpOgogICAgZGVwPW9zLnBhdGguam9pbihBRERPTlMsbmFtZSwnYWRkb24ueG1sJykKICAgIGlmIG9zLnBhdGguZXhpc3RzKGRlcCk6CiAgICAgICAgc291cmNlID0gb3BlbihkZXAsbW9kZT0ncicpOyBsaW5rID0gc291cmNlLnJlYWQoKTsgc291cmNlLmNsb3NlKCk7IAogICAgICAgIG1hdGNoICA9IHdpei5wYXJzZURPTShsaW5rLCAnaW1wb3J0JywgcmV0PSdhZGRvbicpCiAgICAgICAgZm9yIGRlcGVuZHMgaW4gbWF0Y2g6CiAgICAgICAgICAgIGlmIG5vdCAneGJtYy5weXRob24nIGluIGRlcGVuZHM6CiAgICAgICAgICAgICAgICBpZiBub3QgRFAgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICBEUC51cGRhdGUoMCwgJycsICdbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBkZXBlbmRzKSkKICAgICAgICAgICAgICAgIHdpei5jcmVhdGVUZW1wKGRlcGVuZHMpCiAgICAgICAgICAgICAgICAjIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAjIGRlcGVuZHNwYXRoPW9zLnBhdGguam9pbihBRERPTlMsIGRlcGVuZHMpCiAgICAgICAgICAgICAgICAjIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhkZXBlbmRzcGF0aCk6CiAgICAgICAgICAgICAgICAgICAgIyB6aXBuYW1lID0gJyVzLSVzLnppcCcgJSAoZGVwZW5kcywgbWF0Y2gyW21hdGNoLmluZGV4KGRlcGVuZHMpXSkKICAgICAgICAgICAgICAgICAgICAjIGRlcHppcCA9IHVybGpvaW4oIiVzJXMvIiAlIChNT0RVUkwyLCBkZXBlbmRzKSwgemlwbmFtZSkKICAgICAgICAgICAgICAgICAgICAjIGlmIG5vdCB3aXoud29ya2luZ1VSTChkZXB6aXApID09IFRydWU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgZGVwemlwID0gdXJsam9pbihNT0RVUkwsICclcy56aXAnICUgZGVwZW5kcykKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiBub3Qgd2l6LndvcmtpbmdVUkwoZGVwemlwKSA9PSBUcnVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3aXouY3JlYXRlVGVtcChkZXBlbmRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiBLT0RJViA+PSAxNzogd2l6LmFkZG9uRGF0YWJhc2UoZGVwZW5kcywgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY29udGludWUKICAgICAgICAgICAgICAgICAgICAjIGxpYj1vcy5wYXRoLmpvaW4oUEFDS0FHRVMsICclcy56aXAnICUgZGVwZW5kcykKICAgICAgICAgICAgICAgICAgICAjIHRyeTogb3MucmVtb3ZlKGxpYikKICAgICAgICAgICAgICAgICAgICAjIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgICMgRFAudXBkYXRlKDAsICdbQ09MT1IgJXNdW0JdRG93bmxvYWRpbmcgRGVwZW5kZW5jeTpbL0JdWy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxLCBkZXBlbmRzKSwnJywgJ1BsZWFzZSBXYWl0JykKICAgICAgICAgICAgICAgICAgICAjIGRvd25sb2FkZXIuZG93bmxvYWQoZGVwemlwLCBsaWIsIERQKQogICAgICAgICAgICAgICAgICAgICMgeGJtYy5zbGVlcCgxMDApCiAgICAgICAgICAgICAgICAgICAgIyB0aXRsZSA9ICdbQ09MT1IgJXNdW0JdSW5zdGFsbGluZyBEZXBlbmRlbmN5OlsvQl1bL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IyLCBDT0xPUjEsIGRlcGVuZHMpCiAgICAgICAgICAgICAgICAgICAgIyBEUC51cGRhdGUoMCwgdGl0bGUsJycsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgICAgICAgICAgICAgIyBwZXJjZW50LCBlcnJvcnMsIGVycm9yID0gZXh0cmFjdC5hbGwobGliLEFERE9OUyxEUCwgdGl0bGU9dGl0bGUpCiAgICAgICAgICAgICAgICAgICAgIyBpZiBLT0RJViA+PSAxNzogd2l6LmFkZG9uRGF0YWJhc2UoZGVwZW5kcywgMSkKICAgICAgICAgICAgICAgICAgICAjIGluc3RhbGxlZChkZXBlbmRzKQogICAgICAgICAgICAgICAgICAgICMgaW5zdGFsbERlcChkZXBlbmRzKQogICAgICAgICAgICAgICAgICAgICMgeGJtYy5zbGVlcCgxMDApCiAgICAgICAgICAgICAgICAgICAgIyBEUC5jbG9zZSgpCgpkZWYgaW5zdGFsbGVkKGFkZG9uKToKICAgIHVybCA9IG9zLnBhdGguam9pbihBRERPTlMsYWRkb24sJ2FkZG9uLnhtbCcpCiAgICBpZiBvcy5wYXRoLmV4aXN0cyh1cmwpOgogICAgICAgIHRyeToKICAgICAgICAgICAgbGlzdCAgPSBvcGVuKHVybCxtb2RlPSdyJyk7IGcgPSBsaXN0LnJlYWQoKTsgbGlzdC5jbG9zZSgpCiAgICAgICAgICAgIG5hbWUgPSB3aXoucGFyc2VET00oZywgJ2FkZG9uJywgcmV0PSduYW1lJywgYXR0cnMgPSB7J2lkJzogYWRkb259KQogICAgICAgICAgICBpY29uICA9IG9zLnBhdGguam9pbihBRERPTlMsYWRkb24sJ2ljb24ucG5nJykKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgbmFtZVswXSksICdbQ09MT1IgJXNdQWRkb24gQWN0aXZhZG9bL0NPTE9SXScgJSBDT0xPUjIsICcyMDAwJywgaWNvbikKICAgICAgICBleGNlcHQ6IHBhc3MKCmRlZiB5b3V0dWJlTWVudSh1cmw9Tm9uZSk6CiAgICBpZiBub3QgWU9VVFVCRUZJTEUgPT0gJ2h0dHA6Ly8nOgogICAgICAgIGlmIHVybCA9PSBOb25lOgogICAgICAgICAgICBZT1VUVUJFV09SS0lORyAgPSB3aXoud29ya2luZ1VSTChZT1VUVUJFRklMRSkKICAgICAgICAgICAgVEVNUFlPVVRVQkVGSUxFID0gWU9VVFVCRUZJTEUKICAgICAgICBlbHNlOgogICAgICAgICAgICBZT1VUVUJFV09SS0lORyAgPSB3aXoud29ya2luZ1VSTCh1cmwpCiAgICAgICAgICAgIFRFTVBZT1VUVUJFRklMRSA9IHVybAogICAgICAgIGlmIFlPVVRVQkVXT1JLSU5HID09IFRydWU6CiAgICAgICAgICAgIGxpbmsgPSB3aXoub3BlblVSTChURU1QWU9VVFVCRUZJTEUpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKS5yZXBsYWNlKCdcdCcsJycpCiAgICAgICAgICAgIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iKC4rPykiLis/ZWN0aW9uPSIoLis/KSIuKz9ybD0iKC4rPykiLis/Y29uPSIoLis/KSIuKz9hbmFydD0iKC4rPykiLis/ZXNjcmlwdGlvbj0iKC4rPykiJykuZmluZGFsbChsaW5rKQogICAgICAgICAgICBpZiBsZW4obWF0Y2gpID4gMDoKICAgICAgICAgICAgICAgIGZvciBuYW1lLCBzZWN0aW9uLCB1cmwsIGljb24sIGZhbmFydCwgZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICAgICAgaWYgc2VjdGlvbi5sb3dlcigpID09ICJ5ZXMiOgogICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIgKCJbQl0lc1svQl0iICUgbmFtZSwgJ3lvdXR1YmUnLCB1cmwsIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZpbGUobmFtZSwgJ3ZpZXdWaWRlbycsIHVybD11cmwsIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgICAgICBlbHNlOiB3aXoubG9nKCJbWW91VHViZSBNZW51XSBFUlJPUjogRm9ybWF0byBubyB2YWxpZG8uIikKICAgICAgICBlbHNlOiAKICAgICAgICAgICAgd2l6LmxvZygiW1lvdVR1YmUgTWVudV0gRVJST1I6IExhIFVSTCBwYXJhIGVsZW1lbnRvcyBkZSBZb3V0dWJlIG5vIGVzIHZhbGlkby4iKQogICAgICAgICAgICBhZGRGaWxlKCdVcmwgcGFyYSBlbCBhcmNoaXZvIFRYVCBubyB2YWxpZG8nLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgICAgIGFkZEZpbGUoJyVzJyAlIFlPVVRVQkVXT1JLSU5HLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICBlbHNlOiB3aXoubG9nKCJbWW91VHViZSBNZW51XSBObyBzZSBoYSBhZ3JlZ2FkbyBlbGVtZW50b3MgZGUgWW90dWJlIGEgZXN0YSBsaXN0YSB0b2RhdmlhLiIpCiAgICBzZXRWaWV3KCdmaWxlcycsICd2aWV3VHlwZScpCgpkZWYgbWFpbnRNZW51KHZpZXc9Tm9uZSk6CiAgICBzdW1pbnN0YWxsKCkKICAgIG9uID0gJ1tCXVtDT0xPUiBncmVlbl1PTlsvQ09MT1JdWy9CXSc7IG9mZiA9ICdbQl1bQ09MT1IgcmVkXU9GRlsvQ09MT1JdWy9CXScKICAgIGF1dG9jbGVhbiAgID0gJ3RydWUnIGlmIEFVVE9DTEVBTlVQICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIGNhY2hlICAgICAgID0gJ3RydWUnIGlmIEFVVE9DQUNIRSAgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIHBhY2thZ2VzICAgID0gJ3RydWUnIGlmIEFVVE9QQUNLQUdFUyAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIHRodW1icyAgICAgID0gJ3RydWUnIGlmIEFVVE9USFVNQlMgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIG1haW50ICAgICAgID0gJ3RydWUnIGlmIFNIT1dNQUlOVCAgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIGluY2x1ZGV2aWQgID0gJ3RydWUnIGlmIElOQ0xVREVWSURFTyAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIGluY2x1ZGVhbGwgID0gJ3RydWUnIGlmIElOQ0xVREVBTEwgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIHRoaXJkcGFydHkgID0gJ3RydWUnIGlmIFRISVJEUEFSVFkgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIGlmIHdpei5HcmFiX0xvZyhUcnVlKSA9PSBGYWxzZToga29kaWxvZyA9IDAKICAgIGVsc2U6IGtvZGlsb2cgPSBlcnJvckNoZWNraW5nKHdpei5HcmFiX0xvZyhUcnVlKSwgVHJ1ZSwgVHJ1ZSkKICAgIGlmIHdpei5HcmFiX0xvZyhUcnVlLCBUcnVlKSA9PSBGYWxzZToga29kaW9sZGxvZyA9IDAKICAgIGVsc2U6IGtvZGlvbGRsb2cgPSBlcnJvckNoZWNraW5nKHdpei5HcmFiX0xvZyhUcnVlLFRydWUpLCBUcnVlLCBUcnVlKQogICAgZXJyb3JzaW5sb2cgPSBpbnQoa29kaWxvZykgKyBpbnQoa29kaW9sZGxvZykKICAgIGVycm9yc2ZvdW5kID0gc3RyKGVycm9yc2lubG9nKSArICcgRXJyb3IoZXMpIEVuY29udHJhZG8ocyknIGlmIGVycm9yc2lubG9nID4gMCBlbHNlICdOaW5ndW5vJwogICAgd2l6bG9nc2l6ZSA9ICc6IFtDT0xPUiByZWRdTm8gZW5jb250cmFkb1svQ09MT1JdJyBpZiBub3Qgb3MucGF0aC5leGlzdHMoV0laTE9HKSBlbHNlICI6IFtDT0xPUiBncmVlbl0lc1svQ09MT1JdIiAlIHdpei5jb252ZXJ0U2l6ZShvcy5wYXRoLmdldHNpemUoV0laTE9HKSkKICAgIGlmIGluY2x1ZGVhbGwgPT0gJ3RydWUnOgogICAgICAgIGluY2x1ZGVib2IgPSAndHJ1ZScKICAgICAgICBpbmNsdWRlcGhvID0gJ3RydWUnCiAgICAgICAgaW5jbHVkZXNwZSA9ICd0cnVlJwogICAgICAgIGluY2x1ZGVnZW4gPSAndHJ1ZScKICAgICAgICBpbmNsdWRlZXhvID0gJ3RydWUnCiAgICAgICAgaW5jbHVkZW9uZSA9ICd0cnVlJwogICAgICAgIGluY2x1ZGVzYWwgPSAndHJ1ZScKICAgICAgICBpbmNsdWRlc2hkID0gJ3RydWUnCiAgICBlbHNlOgogICAgICAgIGluY2x1ZGVib2IgPSAndHJ1ZScgaWYgSU5DTFVERUJPQiAgICAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVwaG8gPSAndHJ1ZScgaWYgSU5DTFVERVBIT0VOSVggPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVzcGUgPSAndHJ1ZScgaWYgSU5DTFVERVNQRUNUTyAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVnZW4gPSAndHJ1ZScgaWYgSU5DTFVERUdFTkVTSVMgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVleG8gPSAndHJ1ZScgaWYgSU5DTFVERUVYT0RVUyAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVvbmUgPSAndHJ1ZScgaWYgSU5DTFVERU9ORUNIQU4gPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVzYWwgPSAndHJ1ZScgaWYgSU5DTFVERVNBTFRTICAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgICAgIGluY2x1ZGVzaGQgPSAndHJ1ZScgaWYgSU5DTFVERVNBTFRTSEQgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgc2l6ZXBhY2sgICA9IHdpei5nZXRTaXplKFBBQ0tBR0VTKQogICAgc2l6ZXRodW1iICA9IHdpei5nZXRTaXplKFRIVU1CUykKICAgIHNpemVjYWNoZSAgPSB3aXouZ2V0Q2FjaGVTaXplKCkKICAgIHRvdGFsc2l6ZSAgPSBzaXplcGFjaytzaXpldGh1bWIrc2l6ZWNhY2hlCiAgICBmZXEgICAgICAgID0gWydTaWVtcHJlJywgJ0RpYXJpYW1lbnRlJywgJ0NhZGEgMyBkaWFzJywgJ1NlbWFuYWxtZW50ZSddCiAgICBhZGREaXIgKCdbQl1BdXRvIGxpbXBpZXphWy9CXScgICAgICAgLCdtYWludCcsICdjbGVhbicsICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTEpCiAgICBpZiB2aWV3ID09ICJjbGVhbiIgb3IgU0hPV01BSU5UID09ICd0cnVlJzogCiAgICAgICAgYWRkRmlsZSgnTGltcGlhciB0b2RvOiBbQ09MT1IgZ3JlZW5dW0JdJXNbL0JdWy9DT0xPUl0nICUgd2l6LmNvbnZlcnRTaXplKHRvdGFsc2l6ZSkgICwnZnVsbGNsZWFuJywgICAgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJ0xpbXBpYXIgY2FjaGU6IFtDT0xPUiBncmVlbl1bQl0lc1svQl1bL0NPTE9SXScgJSB3aXouY29udmVydFNpemUoc2l6ZWNhY2hlKSAgICAgLCdjbGVhcmNhY2hlJywgICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnTGltcGlhciBwYXF1ZXRlczogW0NPTE9SIGdyZWVuXVtCXSVzWy9CXVsvQ09MT1JdJyAlIHdpei5jb252ZXJ0U2l6ZShzaXplcGFjaykgICAsJ2NsZWFycGFja2FnZXMnLCAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdMaW1waWFyIE1pbmlhdHVyYXM6IFtDT0xPUiBncmVlbl1bQl0lc1svQl1bL0NPTE9SXScgJSB3aXouY29udmVydFNpemUoc2l6ZXRodW1iKSwnY2xlYXJ0aHVtYicsICAgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJ0xpbXBpYXIgTWluaWF0dXJhcyBhbnRpZ3VhcycsICdvbGRUaHVtYnMnLCAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdMaW1waWFyIGxvZ3MgZGUgY3Jhc2hlbycsICAgICAgICAgICAgICAgJ2NsZWFyY3Jhc2gnLCAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdMaW1waWFyIGJhc2VzIGRlIGRhdG9zJywgICAgICAgICAgICAgICAgJ3B1cmdlZGInLCAgICAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdSZXN0YXVyYXIgS29kaSBhIGZhYnJpY2EnLCAgICAgICAgICAgICAgICAgICAgJ2ZyZXNoc3RhcnQnLCAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZERpciAoJ1tCXUhlcnJhbWllbnRhcyBwYXJhIGFkZG9uc1svQl0nLCAgICAgICAnbWFpbnQnLCAnYWRkb24nLCAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUxKQogICAgaWYgdmlldyA9PSAiYWRkb24iIG9yIFNIT1dNQUlOVCA9PSAndHJ1ZSc6IAogICAgICAgIGFkZEZpbGUoJ0VsaW1pbmFyIEFkZG9ucycsICAgICAgICAgICAgICAgICAgJ3JlbW92ZWFkZG9ucycsICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGREaXIgKCdFbGltaW5hciBkYXRvcyBkZSBhZGRvbnMnLCAgICAgICAgICAgICAgJ3JlbW92ZWFkZG9uZGF0YScsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGREaXIgKCdBY3RpdmFyL0Rlc2FjdGl2YXIgQWRkb25zJywgICAgICAgICAgJ2VuYWJsZWFkZG9ucycsICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdBY3RpdmFyL0Rlc2FjdGl2YXIgQWRkb25zIHBhcmEgYWR1bHRvcycsICAgICd0b2dnbGVhZHVsdCcsICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnRm9yemFyIGNvbXByb2JhY2lvbiBkZSBhY3R1YWxpemFjaW9uZXMgcGFyYSBhZGRvbnMnLCAgICAgICAgICAgICdmb3JjZXVwZGF0ZScsICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnT2N1bHRhciBwYXNzd29yZHMgZW4gZWwgdGVjbGFkbyB2aXJ0dWFsJywgICAnaGlkZXBhc3N3b3JkJywgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnTW9zdHJhciBwYXNzd29yZHMgZW4gZWwgdGVjbGFkbyB2aXJ0dWFsJywgJ3VuaGlkZXBhc3N3b3JkJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRGlyICgnW0JdTWFudGVuaW1pZW50by9PdHJvc1svQl0nICAgICAsJ21haW50JywgJ21pc2MnLCAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMSkKICAgIGlmIHZpZXcgPT0gIm1pc2MiIG9yIFNIT1dNQUlOVCA9PSAndHJ1ZSc6IAogICAgICAgIGFkZEZpbGUoJ0ZpeCBwYXJhIEtvZGkgMTcnLCAgICAgICAgICAgICAgICAgICAgJ2tvZGkxN2ZpeCcsICAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdSZXN0YXVyYXIgc2tpbiBhIGZhYnJpY2EnLCAgICAgICAgICAgICAgICAgICAgJ2ZvcmNlc2tpbicsICAgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdSZWNhcmdhciBwZXJmaWwnLCAgICAgICAgICAgICAgICAgJ2ZvcmNlcHJvZmlsZScsICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdGb3J6YXIgY2llcnJlIGRlIEtvZGknLCAgICAgICAgICAgICAgICdmb3JjZWNsb3NlJywgICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnU3ViaXIgS29kaS5sb2cnLCAgICAgICAgICAgICAgICAndXBsb2FkbG9nJywgICAgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJ1ZlciBlcnJvcmVzIGVuIGVsIExvZzogJXMnICUgKGVycm9yc2ZvdW5kKSwgJ3ZpZXdlcnJvcmxvZycsICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdWZXIgZWwgYXJjaGl2byBMb2cnLCAgICAgICAgICAgICAgICAgICd2aWV3bG9nJywgICAgICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnVmVyIGVsIGxvZyBkZWwgYWRkb24gZGUgU2Fsb25EaWdpdGFsJywgICAgICAgICAgICd2aWV3d2l6bG9nJywgICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnTGltcGlhciBlbCBsb2cgZGVsIGFkZG9uIGRlIFNhbG9uRGlnaXRhbCVzJyAlIHdpemxvZ3NpemUsJ2NsZWFyd2l6bG9nJywgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZERpciAoJ1tCXUJhY2t1cHMvUmVzdGF1cmFyWy9CXScgICAgICwnbWFpbnQnLCAnYmFja3VwJywgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTEpCiAgICBpZiB2aWV3ID09ICJiYWNrdXAiIG9yIFNIT1dNQUlOVCA9PSAndHJ1ZSc6CiAgICAgICAgYWRkRmlsZSgnQm9ycmFyIHRvZGFzIGxhcyBjb3BpYXMgZGUgbGEgY2FycGV0YSBkZSBCYWNrdXBzJywgICAgICAgICdjbGVhcmJhY2t1cCcsICAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdTZWxlY2Npb25hciBjYXJwZXRhIHBhcmEgcmVhbGl6YXIgQmFja3VwczogW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgTVlCVUlMRFMpLCdzZXR0aW5ncycsICdNYWludGVuYW5jZScsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbQmFjayBVcF06IFZlcnNpb24gYWN0dWFsJywgICAgICAgICAgICAgICAnYmFja3VwYnVpbGQnLCAgICAgaWNvbj1JQ09OTUFJTlQsICAgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnW0JhY2sgVXBdOiBTa2luIHkgc3VzIGRhdG9zJywgICAgICAgICAgICAgICdiYWNrdXBndWknLCAgICAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbQmFjayBVcF06IFRlbWEnLCAgICAgICAgICAgICAgICdiYWNrdXB0aGVtZScsICAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbQmFjayBVcF06IERhdG9zIGRlIGFkZG9ucycsICAgICAgICAgICdiYWNrdXBhZGRvbicsICAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbUmVzdGF1cmFyXTogQmFja3VwIGxvY2FsJywgICAgICAgICAncmVzdG9yZXppcCcsICAgICAgaWNvbj1JQ09OTUFJTlQsICAgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnW1Jlc3RhdXJhcl06IEJhY2t1cCBsb2NhbCBkZSBsYSBza2luIHkgc3VzIGRhdG9zJywgICAgICAgICdyZXN0b3JlZ3VpJywgICAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbUmVzdGF1cmFyXTogQmFja3VwIGxvY2FsIGRlIGRhdG9zIGRlIGFkZG9ucycsICAgICdyZXN0b3JlYWRkb24nLCAgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbUmVzdGF1cmFyXTogQmFja3VwIGVuIGxhIG51YmUnLCAgICAgICdyZXN0b3JlZXh0emlwJywgICBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCdbUmVzdGF1cmFyXTogQmFja3VwIGVuIGxhIG51YmUgZGUgbGEgc2tpbiB5IHN1cyBkYXRvcycsICAgICAncmVzdG9yZWV4dGd1aScsICAgaWNvbj1JQ09OTUFJTlQsICAgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnW1Jlc3RhdXJhcl06IEJhY2t1cCBlbiBsYSBudWJlIGRlIGRhdG9zIGRlIGFkZG9ucycsICdyZXN0b3JlZXh0YWRkb24nLCBpY29uPUlDT05NQUlOVCwgICB0aGVtZWl0PVRIRU1FMykKICAgIGFkZERpciAoJ1tCXVRydWNvcyBkZWwgc2lzdGVtYS9GaXhlc1svQl0nLCAgICAgICAnbWFpbnQnLCAndHdlYWtzJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUxKQogICAgaWYgdmlldyA9PSAidHdlYWtzIiBvciBTSE9XTUFJTlQgPT0gJ3RydWUnOiAKICAgICAgICBpZiBub3QgQURWQU5DRURGSUxFID09ICdodHRwOi8vJyBhbmQgbm90IEFEVkFOQ0VERklMRSA9PSAnJzoKICAgICAgICAgICAgYWRkRGlyICgnQWR2YW5jZWQgU2V0dGluZ3MnLCAgICAgICAgICAgICdhZHZhbmNlZHNldHRpbmcnLCAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGVsc2U6IAogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhBRFZBTkNFRCk6CiAgICAgICAgICAgICAgICBhZGRGaWxlKCdWZXIgQWR2YW5jZWRTZXR0aW5ncy54bWwgYWN0dWFsJywgICAnY3VycmVudHNldHRpbmdzJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICAgICAgYWRkRmlsZSgnRWxpbWluYXIgQWR2YW5jZWRTZXR0aW5ncy54bWwgYWN0dWFsJywgJ3JlbW92ZWFkdmFuY2VkJywgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgYWRkRmlsZSgnQ29uZmlndXJhciBBZHZhbmNlZFNldHRpbmdzLnhtbCcsICAgICdhdXRvYWR2YW5jZWQnLCAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnRXNjYW5lYXIgcGFyYSBlbGltaW5hciBydXRhcyBubyBkaXNwb25pYmxlcycsICAnY2hlY2tzb3VyY2VzJywgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJ0VzY2FuZWFyIHBhcmEgZWxpbWluYXIgcmVwb3NpdG9yaW9zIG5vIGRpc3BvbmlibGVzJywgICAnY2hlY2tyZXBvcycsICAgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJ0ludGVudGFyIGFwbGljYXIgZml4IHBhcmEgYWRkb25zIHF1ZSBubyBzZSBhY3R1YWxpemFuJywgICAgICAgICdmaXhhZGRvbnVwZGF0ZScsICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnRWxpbWluYXIgY2FyYWN0ZXJlcyByYXJvcyBubyBBc2NpaSBkZSBsYSBiaWJsaW90ZWNhJywgICAgICdhc2NpaWNoZWNrJywgICAgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnQ29udmVydGlyIHJ1dGFzIGVuIHJ1dGFzIGNvbXBhdGlibGVzJywgICAgICAgJ2NvbnZlcnRwYXRoJywgICAgIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAjYWRkRGlyICgnSW5mb3JtYWNpb24gZGVsIHNpc3RlbWEnLCAgICAgICAgICAgICAnc3lzdGVtaW5mbycsICAgICAgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnTW9zdHJhciB0b2RhcyBsYXMgaGVycmFtaWVudGFzIGRlIG1hbnRlbmltaWVudG86ICVzJyAlIG1haW50LnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAsJ3RvZ2dsZXNldHRpbmcnLCAnc2hvd21haW50JywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRGlyICgnW0ldPDwgVm9sdmVyIGFsIG1lbnUgcHJpbmNpcGFsWy9JXScsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgICMjYWRkRmlsZSgnUGVybWl0aXIgd2l6YXJkcyBkZSB0ZXJjZXJvczogJXMnICUgdGhpcmRwYXJ0eS5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZikgLCd0b2dnbGVzZXR0aW5nJywgJ2VuYWJsZTNyZCcsIGZhbmFydD1GQU5BUlQsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMSkKICAgICMjaWYgdGhpcmRwYXJ0eSA9PSAndHJ1ZSc6CiAgICAjIyAgZmlyc3QgPSBUSElSRDFOQU1FIGlmIG5vdCBUSElSRDFOQU1FID09ICcnIGVsc2UgJ05vdCBTZXQnCiAgICAjIyAgc2Vjb24gPSBUSElSRDJOQU1FIGlmIG5vdCBUSElSRDJOQU1FID09ICcnIGVsc2UgJ05vdCBTZXQnCiAgICAjIyAgdGhpcmQgPSBUSElSRDNOQU1FIGlmIG5vdCBUSElSRDNOQU1FID09ICcnIGVsc2UgJ05vdCBTZXQnCiAgICAjIyAgYWRkRmlsZSgnRWRpdCBUaGlyZCBQYXJ0eSBXaXphcmQgMTogW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgZmlyc3QpLCAnZWRpdHRoaXJkJywgJzEnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAjIyAgYWRkRmlsZSgnRWRpdCBUaGlyZCBQYXJ0eSBXaXphcmQgMjogW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgc2Vjb24pLCAnZWRpdHRoaXJkJywgJzInLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAjIyAgYWRkRmlsZSgnRWRpdCBUaGlyZCBQYXJ0eSBXaXphcmQgMzogW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgdGhpcmQpLCAnZWRpdHRoaXJkJywgJzMnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdBdXRvIExpbXBpZXphJywgJycsIGZhbmFydD1GQU5BUlQsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ0F1dG8gTGltcGllemEgYWwgaW5pY2lhcjogJXMnICUgYXV0b2NsZWFuLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAsJ3RvZ2dsZXNldHRpbmcnLCAnYXV0b2NsZWFuJywgICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICBpZiBhdXRvY2xlYW4gPT0gJ3RydWUnOgogICAgICAgIGFkZEZpbGUoJy0tLSBGcmVjdWVuY2lhIGRlIEF1dG8gTGltcGllemE6IFtCXVtDT0xPUiBncmVlbl0lc1svQ09MT1JdWy9CXScgJSBmZXFbQVVUT0ZFUV0sICdjaGFuZ2VmZXEnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnLS0tIExpbXBpYXIgY2FjaGUgYWwgaW5pY2lvOiAlcycgJSBjYWNoZS5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVzZXR0aW5nJywgJ2NsZWFyY2FjaGUnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnLS0tIExpbXBpYXIgcGFxdWV0ZXMgYWwgaW5pY2lvOiAlcycgJSBwYWNrYWdlcy5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVzZXR0aW5nJywgJ2NsZWFycGFja2FnZXMnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnLS0tIExpbXBpYXIgbWluaWF0dXJhcyBhbnRpZ3VhcyBhbCBpbmljaW86ICVzJyAlIHRodW1icy5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVzZXR0aW5nJywgJ2NsZWFydGh1bWJzJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnTGltcGllemEgZGUgQ2FjaGUnLCAnJywgZmFuYXJ0PUZBTkFSVCwgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnSW5jbHVpciBMaW1waWV6YSBkZSBWaWRlbyBlbiBsYSBsaW1waWV6YSBkZSBsYSBDYWNoZTogJXMnICUgaW5jbHVkZXZpZC5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRldmlkZW8nLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICBpZiBpbmNsdWRldmlkID09ICd0cnVlJzoKICAgICAgICBhZGRGaWxlKCctLS0gSW5jbHVpciB0b2RvcyBsb3MgYWRkb25zIGRlIHZpZGVvOiAlcycgJSBpbmNsdWRlYWxsLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSwgJ3RvZ2dsZWNhY2hlJywgJ2luY2x1ZGVhbGwnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgI2FkZEZpbGUoJy0tLSBJbmNsdWlyIEJvYjogJXMnICUgaW5jbHVkZWJvYi5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRlYm9iJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICNhZGRGaWxlKCctLS0gSW5jbHVpciBQaG9lbml4OiAlcycgJSBpbmNsdWRlcGhvLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSwgJ3RvZ2dsZWNhY2hlJywgJ2luY2x1ZGVwaG9lbml4JywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJy0tLSBJbmNsdWlyIFNwZWN0bzogJXMnICUgaW5jbHVkZXNwZS5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRlc3BlY3RvJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGFkZEZpbGUoJy0tLSBJbmNsdWlyIEV4b2R1czogJXMnICUgaW5jbHVkZWV4by5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRlZXhvZHVzJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICNhZGRGaWxlKCctLS0gSW5jbHVpciBTYWx0czogJXMnICUgaW5jbHVkZXNhbC5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRlc2FsdHMnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgI2FkZEZpbGUoJy0tLSBJbmNsdWlyIFNhbHRzIEhEIExpdGU6ICVzJyAlIGluY2x1ZGVzaGQucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpLCAndG9nZ2xlY2FjaGUnLCAnaW5jbHVkZXNhbHRzbGl0ZScsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAjYWRkRmlsZSgnLS0tIEluY2x1aXIgT25lIENoYW5uZWw6ICVzJyAlIGluY2x1ZGVvbmUucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpLCAndG9nZ2xlY2FjaGUnLCAnaW5jbHVkZW9uZWNoYW4nLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnLS0tIEluY2x1aXIgR2VuZXNpczogJXMnICUgaW5jbHVkZWdlbi5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZiksICd0b2dnbGVjYWNoZScsICdpbmNsdWRlZ2VuZXNpcycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBhZGRGaWxlKCctLS0gQWN0aXZhciB0b2RvcyBsb3MgQWRkb25zIGRlIFZpZGVvJywgJ3RvZ2dsZWNhY2hlJywgJ3RydWUnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgYWRkRmlsZSgnLS0tIERlc2FjdGl2YXIgdG9kb3MgbG9zIEFkZG9ucyBkZSBWaWRlbycsICd0b2dnbGVjYWNoZScsICdmYWxzZScsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIHNldFZpZXcoJ2ZpbGVzJywgJ3ZpZXdUeXBlJykKCmRlZiBhZHZhbmNlZFdpbmRvdyh1cmw9Tm9uZSk6CiAgICBpZiBub3QgQURWQU5DRURGSUxFID09ICdodHRwOi8vJzoKICAgICAgICBpZiB1cmwgPT0gTm9uZToKICAgICAgICAgICAgQURWQU5DRURXT1JLSU5HID0gd2l6LndvcmtpbmdVUkwoQURWQU5DRURGSUxFKQogICAgICAgICAgICBURU1QQURWQU5DRURGSUxFID0gQURWQU5DRURGSUxFCiAgICAgICAgZWxzZToKICAgICAgICAgICAgQURWQU5DRURXT1JLSU5HICA9IHdpei53b3JraW5nVVJMKHVybCkKICAgICAgICAgICAgVEVNUEFEVkFOQ0VERklMRSA9IHVybAogICAgICAgIGFkZEZpbGUoJ0NvbmZpZ3VyYXIgQWR2YW5jZWRTZXR0aW5ncy54bWwnLCAnYXV0b2FkdmFuY2VkJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKEFEVkFOQ0VEKTogCiAgICAgICAgICAgIGFkZEZpbGUoJ1ZlciBBZHZhbmNlZFNldHRpbmdzLnhtbCBhY3R1YWwnLCAnY3VycmVudHNldHRpbmdzJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICBhZGRGaWxlKCdFbGltaW5hciBBZHZhbmNlZFNldHRpbmdzLnhtbCcsICdyZW1vdmVhZHZhbmNlZCcsICBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgaWYgQURWQU5DRURXT1JLSU5HID09IFRydWU6CiAgICAgICAgICAgIGlmIEhJREVTUEFDRVJTID09ICdObyc6IGFkZEZpbGUod2l6LnNlcCgpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgICAgICBsaW5rID0gd2l6Lm9wZW5VUkwoVEVNUEFEVkFOQ0VERklMRSkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpLnJlcGxhY2UoJ1x0JywnJykKICAgICAgICAgICAgbWF0Y2ggPSByZS5jb21waWxlKCduYW1lPSIoLis/KSIuKz9lY3Rpb249IiguKz8pIi4rP3JsPSIoLis/KSIuKz9jb249IiguKz8pIi4rP2FuYXJ0PSIoLis/KSIuKz9lc2NyaXB0aW9uPSIoLis/KSInKS5maW5kYWxsKGxpbmspCiAgICAgICAgICAgIGlmIGxlbihtYXRjaCkgPiAwOgogICAgICAgICAgICAgICAgZm9yIG5hbWUsIHNlY3Rpb24sIHVybCwgaWNvbiwgZmFuYXJ0LCBkZXNjcmlwdGlvbiBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICBpZiBzZWN0aW9uLmxvd2VyKCkgPT0gInllcyI6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpciAoIltCXSVzWy9CXSIgJSBuYW1lLCAnYWR2YW5jZWRzZXR0aW5nJywgdXJsLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCB0aGVtZWl0PVRIRU1FMykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKG5hbWUsICd3cml0ZWFkdmFuY2VkJywgbmFtZSwgdXJsLCBkZXNjcmlwdGlvbj1kZXNjcmlwdGlvbiwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCB0aGVtZWl0PVRIRU1FMikKICAgICAgICAgICAgZWxzZTogd2l6LmxvZygiW0FkdmFuY2VkIFNldHRpbmdzXSBFUlJPUjogRm9ybWF0byBubyB2YWxpZG8uIikKICAgICAgICBlbHNlOiB3aXoubG9nKCJbQWR2YW5jZWQgU2V0dGluZ3NdIFVSTCBubyBmdW5jaW9pbmFsOiAlcyIgJSBBRFZBTkNFRFdPUktJTkcpCiAgICBlbHNlOiB3aXoubG9nKCJbQWR2YW5jZWQgU2V0dGluZ3NdIG5vIGFjdGl2YWRvIikKCmRlZiB3cml0ZUFkdmFuY2VkKG5hbWUsIHVybCk6CiAgICBBRFZBTkNFRFdPUktJTkcgPSB3aXoud29ya2luZ1VSTCh1cmwpCiAgICBpZiBBRFZBTkNFRFdPUktJTkcgPT0gVHJ1ZToKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhBRFZBTkNFRCk6IGNob2ljZSA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgc29icmVlc2NyaWJpciB0dSBhZHZhbmNlZHNldHRpbnMgYWN0dWFsIHBvciBbQ09MT1IgJXNdJXNbL0NPTE9SXT9bL0NPTE9SXSIgJSAoQ09MT1IyLCBDT0xPUjEsIG5hbWUpLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVNvYnJlZXNjcmliaXJbL0NPTE9SXVsvQl0iLCBub2xhYmVsPSJbQl1bQ09MT1IgcmVkXUNhbmNlbGFyWy9DT0xPUl1bL0JdIikKICAgICAgICBlbHNlOiBjaG9pY2UgPSBESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIGRlc2NhcmdhciBlIGluc3RhbGFyIFtDT0xPUiAlc10lc1svQ09MT1JdP1svQ09MT1JdIiAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSksIHllc2xhYmVsPSJbQl1bQ09MT1IgZ3JlZW5dSW5zdGFsYXJbL0NPTE9SXVsvQl0iLCBub2xhYmVsPSJbQl1bQ09MT1IgcmVkXUNhbmNlbGFyWy9DT0xPUl1bL0JdIikKCiAgICAgICAgaWYgY2hvaWNlID09IDE6CiAgICAgICAgICAgIGZpbGUgPSB3aXoub3BlblVSTCh1cmwpCiAgICAgICAgICAgIGYgPSBvcGVuKEFEVkFOQ0VELCAndycpOyAKICAgICAgICAgICAgZi53cml0ZShmaWxlKQogICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICAgICAgRElBTE9HLm9rKEFERE9OVElUTEUsICdbQ09MT1IgJXNdRWwgYXJjaGl2byBBZHZhbmNlZFNldHRpbmdzLnhtbCBoYSBzaWRvIHNvYnJlZXNjcml0byBjb24gZXhpdG8uIFB1bHNhIE9LIHBhcmEgaGFjZXIgZWZlY3Rpdm8gbG9zIGNhbWJpb3MgeSBjZXJyYXIgS29kaVsvQ09MT1JdJyAlIENPTE9SMikKICAgICAgICAgICAgd2l6LmtpbGx4Ym1jKFRydWUpCiAgICAgICAgZWxzZTogd2l6LmxvZygiW0FkdmFuY2VkIFNldHRpbmdzXSBpbnN0YWxhY2lvbiBjYW5jZWxhZGEiKTsgd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdRXNjcml0dXJhIGNhbmNlbGFkYSFbL0NPTE9SXSIgJSBDT0xPUjIpOyByZXR1cm4KICAgIGVsc2U6IHdpei5sb2coIltBZHZhbmNlZCBTZXR0aW5nc10gVVJMIG5vIGZ1bmNpb25hbDogJXMiICUgQURWQU5DRURXT1JLSU5HKTsgd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdVVJMIG5vIGZ1bmNpb25hbFsvQ09MT1JdIiAlIENPTE9SMikKCmRlZiB2aWV3QWR2YW5jZWQoKToKICAgIGYgPSBvcGVuKEFEVkFOQ0VEKQogICAgYSA9IGYucmVhZCgpLnJlcGxhY2UoJ1x0JywgJyAgICAnKQogICAgd2l6LlRleHRCb3goQURET05USVRMRSwgYSkKICAgIGYuY2xvc2UoKQoKZGVmIHJlbW92ZUFkdmFuY2VkKCk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhBRFZBTkNFRCk6CiAgICAgICAgd2l6LnJlbW92ZUZpbGUoQURWQU5DRUQpCiAgICBlbHNlOiBMb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAiW0NPTE9SICVzXUFkdmFuY2VkU2V0dGluZ3MueG1sIG5vIGVuY29udHJhZG9bL0NPTE9SXSIpCgpkZWYgc2hvd0F1dG9BZHZhbmNlZCgpOgogICAgbm90aWZ5LmF1dG9Db25maWcoKQoKZGVmIGdldElQKCk6CiAgICBzaXRlICA9ICdodHRwOi8vd2hhdGlzbXlpcGFkZHJlc3MuY29tLycKICAgIGlmIG5vdCB3aXoud29ya2luZ1VSTChzaXRlKTogcmV0dXJuICdVbmtub3duJywgJ1Vua25vd24nLCAnVW5rbm93bicKICAgIHBhZ2UgID0gd2l6Lm9wZW5VUkwoc2l0ZSkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCiAgICBpZiBub3QgJ0FjY2VzcyBEZW5pZWQnIGluIHBhZ2U6CiAgICAgICAgaXBtYXRjaCAgID0gcmUuY29tcGlsZSgnd2hhdGlzbXlpcGFkZHJlc3MuY29tL2lwLyguKz8pIicpLmZpbmRhbGwocGFnZSkKICAgICAgICBpcGZpbmFsICAgPSBpcG1hdGNoWzBdIGlmIChsZW4oaXBtYXRjaCkgPiAwKSBlbHNlICdVbmtub3duJwogICAgICAgIGRldGFpbHMgICA9IHJlLmNvbXBpbGUoJyJmb250LXNpemU6MTRweDsiPiguKz8pPC90ZD4nKS5maW5kYWxsKHBhZ2UpCiAgICAgICAgcHJvdmlkZXIgID0gZGV0YWlsc1swXSBpZiAobGVuKGRldGFpbHMpID4gMCkgZWxzZSAnVW5rbm93bicKICAgICAgICBsb2NhdGlvbiAgPSBkZXRhaWxzWzFdKycsICcrZGV0YWlsc1syXSsnLCAnK2RldGFpbHNbM10gaWYgKGxlbihkZXRhaWxzKSA+IDIpIGVsc2UgJ1Vua25vd24nCiAgICAgICAgcmV0dXJuIGlwZmluYWwsIHByb3ZpZGVyLCBsb2NhdGlvbgogICAgZWxzZTogcmV0dXJuICdVbmtub3duJywgJ1Vua25vd24nLCAnVW5rbm93bicKCmRlZiBzeXN0ZW1JbmZvKCk6CiAgICBpbmZvTGFiZWwgPSBbJ1N5c3RlbS5GcmllbmRseU5hbWUnLCAKICAgICAgICAgICAgICAgICAnU3lzdGVtLkJ1aWxkVmVyc2lvbicsIAogICAgICAgICAgICAgICAgICdTeXN0ZW0uQ3B1VXNhZ2UnLAogICAgICAgICAgICAgICAgICdTeXN0ZW0uU2NyZWVuTW9kZScsCiAgICAgICAgICAgICAgICAgJ05ldHdvcmsuSVBBZGRyZXNzJywKICAgICAgICAgICAgICAgICAnTmV0d29yay5NYWNBZGRyZXNzJywKICAgICAgICAgICAgICAgICAnU3lzdGVtLlVwdGltZScsCiAgICAgICAgICAgICAgICAgJ1N5c3RlbS5Ub3RhbFVwdGltZScsCiAgICAgICAgICAgICAgICAgJ1N5c3RlbS5GcmVlU3BhY2UnLAogICAgICAgICAgICAgICAgICdTeXN0ZW0uVXNlZFNwYWNlJywKICAgICAgICAgICAgICAgICAnU3lzdGVtLlRvdGFsU3BhY2UnLAogICAgICAgICAgICAgICAgICdTeXN0ZW0uTWVtb3J5KGZyZWUpJywKICAgICAgICAgICAgICAgICAnU3lzdGVtLk1lbW9yeSh1c2VkKScsCiAgICAgICAgICAgICAgICAgJ1N5c3RlbS5NZW1vcnkodG90YWwpJ10KICAgIGRhdGEgICAgICA9IFtdOyB4ID0gMAogICAgZm9yIGluZm8gaW4gaW5mb0xhYmVsOgogICAgICAgIHRlbXAgPSB3aXouZ2V0SW5mbyhpbmZvKQogICAgICAgIHkgPSAwCiAgICAgICAgd2hpbGUgdGVtcCA9PSAiQnVzeSIgYW5kIHkgPCAxMDoKICAgICAgICAgICAgdGVtcCA9IHdpei5nZXRJbmZvKGluZm8pOyB5ICs9IDE7IHdpei5sb2coIiVzIHNsZWVwICVzIiAlIChpbmZvLCBzdHIoeSkpKTsgeGJtYy5zbGVlcCgyMDApCiAgICAgICAgZGF0YS5hcHBlbmQodGVtcCkKICAgICAgICB4ICs9IDEKICAgIHN0b3JhZ2VfZnJlZSAgPSBkYXRhWzhdIGlmICdVbmEnIGluIGRhdGFbOF0gZWxzZSB3aXouY29udmVydFNpemUoaW50KGZsb2F0KGRhdGFbOF1bOi04XSkpKjEwMjQqMTAyNCkKICAgIHN0b3JhZ2VfdXNlZCAgPSBkYXRhWzldIGlmICdVbmEnIGluIGRhdGFbOV0gZWxzZSB3aXouY29udmVydFNpemUoaW50KGZsb2F0KGRhdGFbOV1bOi04XSkpKjEwMjQqMTAyNCkKICAgIHN0b3JhZ2VfdG90YWwgPSBkYXRhWzEwXSBpZiAnVW5hJyBpbiBkYXRhWzEwXSBlbHNlIHdpei5jb252ZXJ0U2l6ZShpbnQoZmxvYXQoZGF0YVsxMF1bOi04XSkpKjEwMjQqMTAyNCkKICAgIHJhbV9mcmVlICAgICAgPSB3aXouY29udmVydFNpemUoaW50KGZsb2F0KGRhdGFbMTFdWzotMl0pKSoxMDI0KjEwMjQpCiAgICByYW1fdXNlZCAgICAgID0gd2l6LmNvbnZlcnRTaXplKGludChmbG9hdChkYXRhWzEyXVs6LTJdKSkqMTAyNCoxMDI0KQogICAgcmFtX3RvdGFsICAgICA9IHdpei5jb252ZXJ0U2l6ZShpbnQoZmxvYXQoZGF0YVsxM11bOi0yXSkpKjEwMjQqMTAyNCkKICAgIGV4dGVyX2lwLCBwcm92aWRlciwgbG9jYXRpb24gPSBnZXRJUCgpCiAgICAKICAgIHBpY3R1cmUgPSBbXTsgbXVzaWMgPSBbXTsgdmlkZW8gPSBbXTsgcHJvZ3JhbXMgPSBbXTsgcmVwb3MgPSBbXTsgc2NyaXB0cyA9IFtdOyBza2lucyA9IFtdCiAgICAKICAgIGZvbGQgPSBnbG9iLmdsb2Iob3MucGF0aC5qb2luKEFERE9OUywgJyovJykpCiAgICBmb3IgZm9sZGVyIGluIHNvcnRlZChmb2xkLCBrZXkgPSBsYW1iZGEgeDogeCk6CiAgICAgICAgZm9sZGVybmFtZSA9IG9zLnBhdGguc3BsaXQoZm9sZGVyWzotMV0pWzFdCiAgICAgICAgaWYgZm9sZGVybmFtZSA9PSAncGFja2FnZXMnOiBjb250aW51ZQogICAgICAgIHhtbCA9IG9zLnBhdGguam9pbihmb2xkZXIsICdhZGRvbi54bWwnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHhtbCk6CiAgICAgICAgICAgIGYgICAgICA9IG9wZW4oeG1sKQogICAgICAgICAgICBhICAgICAgPSBmLnJlYWQoKQogICAgICAgICAgICBwcm92ICAgPSByZS5jb21waWxlKCI8cHJvdmlkZXM+KC4rPyk8L3Byb3ZpZGVzPiIpLmZpbmRhbGwoYSkKICAgICAgICAgICAgaWYgbGVuKHByb3YpID09IDA6CiAgICAgICAgICAgICAgICBpZiBmb2xkZXJuYW1lLnN0YXJ0c3dpdGgoJ3NraW4nKTogc2tpbnMuYXBwZW5kKGZvbGRlcm5hbWUpCiAgICAgICAgICAgICAgICBpZiBmb2xkZXJuYW1lLnN0YXJ0c3dpdGgoJ3JlcG8nKTogcmVwb3MuYXBwZW5kKGZvbGRlcm5hbWUpCiAgICAgICAgICAgICAgICBlbHNlOiBzY3JpcHRzLmFwcGVuZChmb2xkZXJuYW1lKQogICAgICAgICAgICBlbGlmIG5vdCAocHJvdlswXSkuZmluZCgnZXhlY3V0YWJsZScpID09IC0xOiBwcm9ncmFtcy5hcHBlbmQoZm9sZGVybmFtZSkKICAgICAgICAgICAgZWxpZiBub3QgKHByb3ZbMF0pLmZpbmQoJ3ZpZGVvJykgPT0gLTE6IHZpZGVvLmFwcGVuZChmb2xkZXJuYW1lKQogICAgICAgICAgICBlbGlmIG5vdCAocHJvdlswXSkuZmluZCgnYXVkaW8nKSA9PSAtMTogbXVzaWMuYXBwZW5kKGZvbGRlcm5hbWUpCiAgICAgICAgICAgIGVsaWYgbm90IChwcm92WzBdKS5maW5kKCdpbWFnZScpID09IC0xOiBwaWN0dXJlLmFwcGVuZChmb2xkZXJuYW1lKQoKICAgIGFkZEZpbGUoJ1tCXU1lZGlhIENlbnRlciBJbmZvOlsvQl0nLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXU5hbWU6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBkYXRhWzBdKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11WZXJzaW9uOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgZGF0YVsxXSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdUGxhdGZvcm06Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCB3aXoucGxhdGZvcm0oKS50aXRsZSgpKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11DUFUgVXNhZ2U6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBkYXRhWzJdKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11TY3JlZW4gTW9kZTpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIGRhdGFbM10pLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUzKQogICAgCiAgICBhZGRGaWxlKCdbQl1VcHRpbWU6Wy9CXScsICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdQ3VycmVudCBVcHRpbWU6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBkYXRhWzZdKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11Ub3RhbCBVcHRpbWU6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBkYXRhWzddKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIAogICAgYWRkRmlsZSgnW0JdTG9jYWwgU3RvcmFnZTpbL0JdJywgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11Vc2VkIFN0b3JhZ2U6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBzdG9yYWdlX2ZyZWUpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXUZyZWUgU3RvcmFnZTpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIHN0b3JhZ2VfdXNlZCksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdVG90YWwgU3RvcmFnZTpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIHN0b3JhZ2VfdG90YWwpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgCiAgICBhZGRGaWxlKCdbQl1SYW0gVXNhZ2U6Wy9CXScsICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdVXNlZCBNZW1vcnk6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCByYW1fZnJlZSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdRnJlZSBNZW1vcnk6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCByYW1fdXNlZCksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdVG90YWwgTWVtb3J5OlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgcmFtX3RvdGFsKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIAogICAgYWRkRmlsZSgnW0JdTmV0d29yazpbL0JdJywgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11Mb2NhbCBJUDpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIGRhdGFbNF0pLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXUV4dGVybmFsIElQOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgZXh0ZXJfaXApLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXVByb3ZpZGVyOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgcHJvdmlkZXIpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXUxvY2F0aW9uOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgbG9jYXRpb24pLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXU1hY0FkZHJlc3M6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBkYXRhWzVdKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIAogICAgdG90YWxjb3VudCA9IGxlbihwaWN0dXJlKSArIGxlbihtdXNpYykgKyBsZW4odmlkZW8pICsgbGVuKHByb2dyYW1zKSArIGxlbihzY3JpcHRzKSArIGxlbihza2lucykgKyBsZW4ocmVwb3MpIAogICAgYWRkRmlsZSgnW0JdQWRkb25zKFtDT0xPUiAlc10lc1svQ09MT1JdKTpbL0JdJyAlIChDT0xPUjEsIHRvdGFsY291bnQpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXVZpZGVvIEFkZG9uczpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIHN0cihsZW4odmlkZW8pKSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdUHJvZ3JhbSBBZGRvbnM6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBzdHIobGVuKHByb2dyYW1zKSkpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQogICAgYWRkRmlsZSgnW0NPTE9SICVzXU11c2ljIEFkZG9uczpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIHN0cihsZW4obXVzaWMpKSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdUGljdHVyZSBBZGRvbnM6Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgQ09MT1IyLCBzdHIobGVuKHBpY3R1cmUpKSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdUmVwb3NpdG9yaWVzOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgc3RyKGxlbihyZXBvcykpKSwgJycsIGljb249SUNPTk1BSU5ULCB0aGVtZWl0PVRIRU1FMikKICAgIGFkZEZpbGUoJ1tDT0xPUiAlc11Ta2luczpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBDT0xPUjIsIHN0cihsZW4oc2tpbnMpKSksICcnLCBpY29uPUlDT05NQUlOVCwgdGhlbWVpdD1USEVNRTIpCiAgICBhZGRGaWxlKCdbQ09MT1IgJXNdU2NyaXB0cy9Nb2R1bGVzOlsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIENPTE9SMiwgc3RyKGxlbihzY3JpcHRzKSkpLCAnJywgaWNvbj1JQ09OTUFJTlQsIHRoZW1laXQ9VEhFTUUyKQoKZGVmIHNhdmVNZW51KCk6CiAgICBzdW1pbnN0YWxsKCkKICAgIG9uID0gJ1tDT0xPUiBncmVlbl1PTlsvQ09MT1JdJzsgb2ZmID0gJ1tDT0xPUiByZWRdT0ZGWy9DT0xPUl0nCiAgICB0cmFrdCAgICAgID0gJ3RydWUnIGlmIEtFRVBUUkFLVCAgICAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgcmVhbCAgICAgICA9ICd0cnVlJyBpZiBLRUVQUkVBTCAgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIGxvZ2luICAgICAgPSAndHJ1ZScgaWYgS0VFUExPR0lOICAgICA9PSAndHJ1ZScgZWxzZSAnZmFsc2UnCiAgICBzb3VyY2VzICAgID0gJ3RydWUnIGlmIEtFRVBTT1VSQ0VTICAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgYWR2YW5jZWQgICA9ICd0cnVlJyBpZiBLRUVQQURWQU5DRUQgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIHByb2ZpbGVzICAgPSAndHJ1ZScgaWYgS0VFUFBST0ZJTEVTICA9PSAndHJ1ZScgZWxzZSAnZmFsc2UnCiAgICBmYXZvdXJpdGVzID0gJ3RydWUnIGlmIEtFRVBGQVZTICAgICAgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwogICAgcmVwb3MgICAgICA9ICd0cnVlJyBpZiBLRUVQUkVQT1MgICAgID09ICd0cnVlJyBlbHNlICdmYWxzZScKICAgIHN1cGVyICAgICAgPSAndHJ1ZScgaWYgS0VFUFNVUEVSICAgICA9PSAndHJ1ZScgZWxzZSAnZmFsc2UnCiAgICB3aGl0ZWxpc3QgID0gJ3RydWUnIGlmIEtFRVBXSElURUxJU1QgPT0gJ3RydWUnIGVsc2UgJ2ZhbHNlJwoKICAgIGFkZERpciAoJ0d1YXJkYXIgZGF0b3MgZGUgVHJha3QnLCAgICAgICAgICAgICAgICd0cmFrdCcsICAgICAgICAgICAgICAgIGljb249SUNPTlRSQUtULCB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZERpciAoJ0d1YXJkYXIgZGF0b3MgZGUgUmVhbCBEZWJyaWQnLCAgICAgICAgICAgICAgJ3JlYWxkZWJyaWQnLCAgICAgICAgICAgaWNvbj1JQ09OUkVBTCwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRGlyICgnR3VhcmRhciBkYXRvcyBkZSBMb2dpbicsICAgICAgICAgICAgICAgJ2xvZ2luJywgICAgICAgICAgICAgICAgaWNvbj1JQ09OTE9HSU4sIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnSW1wb3J0YXIgZGF0b3MgZ3VhcmRhZG9zJywgICAgICAgICAgICAgICdtYW5hZ2VkYXRhJywgJ2ltcG9ydCcsIGljb249SUNPTlNBVkUsICB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ0V4cG9ydGFyIGRhdG9zIGd1YXJkYWRvcycsICAgICAgICAgICAgICAnbWFuYWdlZGF0YScsICdleHBvcnQnLCBpY29uPUlDT05TQVZFLCAgdGhlbWVpdD1USEVNRTEpCiAgICBhZGRGaWxlKCctIENsaWNrIHBhcmEgYWN0aXZhci9kZXNhY3RpdmFyIGxhcyBvcGNpb25lcyBzaWd1aWVudGVzIC0nLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdHdWFyZGFyIGRhdG9zIGRlIFRyYWt0OiAlcycgJSB0cmFrdC5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZikgICAgICAgICAgICAgICAgICAgICAgICwndG9nZ2xlc2V0dGluZycsICdrZWVwdHJha3QnLCAgICAgIGljb249SUNPTlRSQUtULCB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ0d1YXJkYXIgZGF0b3MgZGUgUmVhbCBEZWJyaWQ6ICVzJyAlIHJlYWwucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpICAgICAgICAgICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBkZWJyaWQnLCAgICAgaWNvbj1JQ09OUkVBTCwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnR3VhcmRhciBkYXRvcyBkZSBMb2dpbjogJXMnICUgbG9naW4ucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpICAgICAgICAgICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBsb2dpbicsICAgICAgaWNvbj1JQ09OTE9HSU4sIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgXCdTb3VyY2VzLnhtbFwnOiAlcycgJSBzb3VyY2VzLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAgICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBzb3VyY2VzJywgICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgXCdQcm9maWxlcy54bWxcJzogJXMnICUgcHJvZmlsZXMucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBwcm9maWxlcycsICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgXCdBZHZhbmNlZHNldHRpbmdzLnhtbFwnOiAlcycgJSBhZHZhbmNlZC5yZXBsYWNlKCd0cnVlJyxvbikucmVwbGFjZSgnZmFsc2UnLG9mZikgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBhZHZhbmNlZCcsICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgXCdGYXZvdXJpdGVzLnhtbFwnOiAlcycgJSBmYXZvdXJpdGVzLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBmYXZvdXJpdGVzJywgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgU3VwZXIgRmF2b3VyaXRvczogJXMnICUgc3VwZXIucmVwbGFjZSgndHJ1ZScsb24pLnJlcGxhY2UoJ2ZhbHNlJyxvZmYpICAgICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXBzdXBlcicsICAgICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgUmVwb3NpdG9yaW9zIGluc3RhbGFkb3NcJ3M6ICVzJyAlIHJlcG9zLnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAgICAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXByZXBvcycsICAgICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnTWFudGVuZXIgbWkgXCdXaGl0ZUxpc3RcJzogJXMnICUgd2hpdGVsaXN0LnJlcGxhY2UoJ3RydWUnLG9uKS5yZXBsYWNlKCdmYWxzZScsb2ZmKSAgICAgICAgLCd0b2dnbGVzZXR0aW5nJywgJ2tlZXB3aGl0ZWxpc3QnLCAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgaWYgd2hpdGVsaXN0ID09ICd0cnVlJzoKICAgICAgICBhZGRGaWxlKCdFZGl0YXIgbWkgV2hpdGVsaXN0JywgICAgICAgICd3aGl0ZWxpc3QnLCAnZWRpdCcsICAgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgICAgIGFkZEZpbGUoJ1ZlciBtaSBXaGl0ZWxpc3QnLCAgICAgICAgJ3doaXRlbGlzdCcsICd2aWV3JywgICBpY29uPUlDT05TQVZFLCAgdGhlbWVpdD1USEVNRTEpCiAgICAgICAgYWRkRmlsZSgnTGltcGlhciBtaSBXaGl0ZWxpc3QnLCAgICAgICAnd2hpdGVsaXN0JywgJ2NsZWFyJywgIGljb249SUNPTlNBVkUsICB0aGVtZWl0PVRIRU1FMSkKICAgICAgICBhZGRGaWxlKCdJbXBvcnRhciBtaSBXaGl0ZWxpc3QnLCAgICAgICd3aGl0ZWxpc3QnLCAnaW1wb3J0JywgaWNvbj1JQ09OU0FWRSwgIHRoZW1laXQ9VEhFTUUxKQogICAgICAgIGFkZEZpbGUoJ0V4cG9ydGFyIG1pIFdoaXRlbGlzdCcsICAgICAgJ3doaXRlbGlzdCcsICdleHBvcnQnLCBpY29uPUlDT05TQVZFLCAgdGhlbWVpdD1USEVNRTEpCiAgICBzZXRWaWV3KCdmaWxlcycsICd2aWV3VHlwZScpCgpkZWYgdHJha3RNZW51KCk6CiAgICB0cmFrdCA9ICdbQ09MT1IgZ3JlZW5dT05bL0NPTE9SXScgaWYgS0VFUFRSQUtUID09ICd0cnVlJyBlbHNlICdbQ09MT1IgcmVkXU9GRlsvQ09MT1JdJwogICAgbGFzdCA9IHN0cihUUkFLVFNBVkUpIGlmIG5vdCBUUkFLVFNBVkUgPT0gJycgZWxzZSAnTG9zIGRhdG9zIGRlIFRyYWt0IGF1biBubyBzZSBoYW4gZ3VhcmRhZG8nCiAgICBhZGRGaWxlKCdbSV1SZWdpc3RyYXRlIGdyYXR1aXRhbWVudGUgZW4gaHR0cDovL3RyYWt0LnR2Wy9JXScsICcnLCBpY29uPUlDT05UUkFLVCwgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdHdWFyZGFyIGRhdG9zIGRlIFRyYWt0OiAlcycgJSB0cmFrdCwgJ3RvZ2dsZXNldHRpbmcnLCAna2VlcHRyYWt0JywgaWNvbj1JQ09OVFJBS1QsIHRoZW1laXQ9VEhFTUUzKQogICAgaWYgS0VFUFRSQUtUID09ICd0cnVlJzogYWRkRmlsZSgnVWx0aW1vIGd1YXJkYWRvOiAlcycgJSBzdHIobGFzdCksICcnLCBpY29uPUlDT05UUkFLVCwgdGhlbWVpdD1USEVNRTMpCiAgICBpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIGljb249SUNPTlRSQUtULCB0aGVtZWl0PVRIRU1FMykKICAgIAogICAgZm9yIHRyYWt0IGluIHRyYWt0aXQuT1JERVI6CiAgICAgICAgbmFtZSAgID0gVFJBS1RJRFt0cmFrdF1bJ25hbWUnXQogICAgICAgIHBhdGggICA9IFRSQUtUSURbdHJha3RdWydwYXRoJ10KICAgICAgICBzYXZlZCAgPSBUUkFLVElEW3RyYWt0XVsnc2F2ZWQnXQogICAgICAgIGZpbGUgICA9IFRSQUtUSURbdHJha3RdWydmaWxlJ10KICAgICAgICB1c2VyICAgPSB3aXouZ2V0UyhzYXZlZCkKICAgICAgICBhdXNlciAgPSB0cmFrdGl0LnRyYWt0VXNlcih0cmFrdCkKICAgICAgICBpY29uICAgPSBUUkFLVElEW3RyYWt0XVsnaWNvbiddICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgZWxzZSBJQ09OVFJBS1QKICAgICAgICBmYW5hcnQgPSBUUkFLVElEW3RyYWt0XVsnZmFuYXJ0J10gaWYgb3MucGF0aC5leGlzdHMocGF0aCkgZWxzZSBGQU5BUlQKICAgICAgICBtZW51ID0gY3JlYXRlTWVudSgnc2F2ZWFkZG9uJywgJ1RyYWt0JywgdHJha3QpCiAgICAgICAgbWVudTIgPSBjcmVhdGVNZW51KCdzYXZlJywgJ1RyYWt0JywgdHJha3QpCiAgICAgICAgbWVudS5hcHBlbmQoKFRIRU1FMiAlICclcyBPcGNpb25lcycgJSBuYW1lLCAgICAgICAgICAgICAgJ1J1blBsdWdpbihwbHVnaW46Ly8lcy8/bW9kZT1vcGVuc2V0dGluZ3MmbmFtZT0lcyZ1cmw9dHJha3QpJyAlICAgKEFERE9OX0lELCB0cmFrdCkpKQogICAgICAgIAogICAgICAgIGFkZEZpbGUoJ1srXS0+ICVzJyAlIG5hbWUsICAgICAnJywgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCB0aGVtZWl0PVRIRU1FMykKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aCk6IGFkZEZpbGUoJ1tDT0xPUiByZWRdRGF0b3MgZGUgYWRkb246IE5vIGluc3RhbGFkb1svQ09MT1JdJywgJycsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgbWVudT1tZW51KQogICAgICAgIGVsaWYgbm90IGF1c2VyOiAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIHJlZF1EYXRvcyBkZSBhZGRvbjogTm8gcmVnaXN0cmFkb1svQ09MT1JdJywnYXV0aHRyYWt0JywgdHJha3QsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgbWVudT1tZW51KQogICAgICAgIGVsc2U6ICAgICAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIGdyZWVuXURhdG9zIGRlIGFkZG9uOiAlc1svQ09MT1JdJyAlIGF1c2VyLCdhdXRodHJha3QnLCB0cmFrdCwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUpCiAgICAgICAgaWYgdXNlciA9PSAiIjoKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoZmlsZSk6IGFkZEZpbGUoJ1tDT0xPUiByZWRdRGF0b3MgZ3VhcmRhZG9zOiBBcmNoaXZvIGd1YXJkYWRvIGVuY29udHJhZG8oSW1wb3J0YXIgRGF0b3MpWy9DT0xPUl0nLCdpbXBvcnR0cmFrdCcsIHRyYWt0LCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudTIpCiAgICAgICAgICAgIGVsc2UgOiAgICAgICAgICAgICAgICAgICBhZGRGaWxlKCdbQ09MT1IgcmVkXURhdG9zIGd1YXJkYWRvczogTm8gZ3VhcmRhZG9zWy9DT0xPUl0nLCdzYXZldHJha3QnLCB0cmFrdCwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUyKQogICAgICAgIGVsc2U6ICAgICAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIGdyZWVuXURhdG9zIGd1YXJkYWRvczogJXNbL0NPTE9SXScgJSB1c2VyLCAnJywgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUyKQogICAgCiAgICBpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnR3VhcmRhciB0b2RvcyBsb3MgZGF0b3MgZGUgVHJha3QnLCAgICAgICAgICAnc2F2ZXRyYWt0JywgICAgJ2FsbCcsIGljb249SUNPTlRSQUtULCAgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdSZWN1cGVyYXIgdG9kb3MgbG9zIGRhdG9zIGRlIFRyYWt0JywgJ3Jlc3RvcmV0cmFrdCcsICdhbGwnLCBpY29uPUlDT05UUkFLVCwgIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnSW1wb3J0YXIgZGF0b3MgZGUgVHJha3QnLCAgICAgICAgICAgICdpbXBvcnR0cmFrdCcsICAnYWxsJywgaWNvbj1JQ09OVFJBS1QsICB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ0xpbXBpYXIgdG9kb3MgbG9zIGRhdG9zIGRlIFRyYWt0JywgICAnY2xlYXJ0cmFrdCcsICAgJ2FsbCcsIGljb249SUNPTlRSQUtULCAgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdMaW1waWFyIGNvbXBsZXRhbWVudGUgVHJha3QnLCAgICAgICAgICdhZGRvbnRyYWt0JywgICAnYWxsJywgaWNvbj1JQ09OVFJBS1QsICB0aGVtZWl0PVRIRU1FMykKICAgIHNldFZpZXcoJ2ZpbGVzJywgJ3ZpZXdUeXBlJykKCmRlZiByZWFsTWVudSgpOgogICAgcmVhbCA9ICdbQ09MT1IgZ3JlZW5dT05bL0NPTE9SXScgaWYgS0VFUFJFQUwgPT0gJ3RydWUnIGVsc2UgJ1tDT0xPUiByZWRdT0ZGWy9DT0xPUl0nCiAgICBsYXN0ID0gc3RyKFJFQUxTQVZFKSBpZiBub3QgUkVBTFNBVkUgPT0gJycgZWxzZSAnVG9kYXZpYSBubyBzZSBoYW4gZ3VhcmRhZG8gbG9zIGRhdG9zIGRlIFJlYWwgRGVicmlkLicKICAgIGFkZEZpbGUoJ1tJXWh0dHA6Ly9yZWFsLWRlYnJpZC5jb20gZXMgdW4gc2VydmljaW8gZGUgUEFHTy5bL0ldJywgJycsIGljb249SUNPTlJFQUwsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnR3VhcmRhciBkYXRvcyBkZSBSZWFsIERlYnJpZDogJXMnICUgcmVhbCwgJ3RvZ2dsZXNldHRpbmcnLCAna2VlcGRlYnJpZCcsIGljb249SUNPTlJFQUwsIHRoZW1laXQ9VEhFTUUzKQogICAgaWYgS0VFUFJFQUwgPT0gJ3RydWUnOiBhZGRGaWxlKCdVbHRpbW8gZ3VhcmRhZG86ICVzJyAlIHN0cihsYXN0KSwgJycsIGljb249SUNPTlJFQUwsIHRoZW1laXQ9VEhFTUUzKQogICAgaWYgSElERVNQQUNFUlMgPT0gJ05vJzogYWRkRmlsZSh3aXouc2VwKCksICcnLCBpY29uPUlDT05SRUFMLCB0aGVtZWl0PVRIRU1FMykKICAgIAogICAgZm9yIGRlYnJpZCBpbiBkZWJyaWRpdC5PUkRFUjoKICAgICAgICBuYW1lICAgPSBERUJSSURJRFtkZWJyaWRdWyduYW1lJ10KICAgICAgICBwYXRoICAgPSBERUJSSURJRFtkZWJyaWRdWydwYXRoJ10KICAgICAgICBzYXZlZCAgPSBERUJSSURJRFtkZWJyaWRdWydzYXZlZCddCiAgICAgICAgZmlsZSAgID0gREVCUklESURbZGVicmlkXVsnZmlsZSddCiAgICAgICAgdXNlciAgID0gd2l6LmdldFMoc2F2ZWQpCiAgICAgICAgYXVzZXIgID0gZGVicmlkaXQuZGVicmlkVXNlcihkZWJyaWQpCiAgICAgICAgaWNvbiAgID0gREVCUklESURbZGVicmlkXVsnaWNvbiddICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgZWxzZSBJQ09OUkVBTAogICAgICAgIGZhbmFydCA9IERFQlJJRElEW2RlYnJpZF1bJ2ZhbmFydCddIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpIGVsc2UgRkFOQVJUCiAgICAgICAgbWVudSA9IGNyZWF0ZU1lbnUoJ3NhdmVhZGRvbicsICdEZWJyaWQnLCBkZWJyaWQpCiAgICAgICAgbWVudTIgPSBjcmVhdGVNZW51KCdzYXZlJywgJ0RlYnJpZCcsIGRlYnJpZCkKICAgICAgICBtZW51LmFwcGVuZCgoVEhFTUUyICUgJyVzIE9wY2lvbmVzJyAlIG5hbWUsICAgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPW9wZW5zZXR0aW5ncyZuYW1lPSVzJnVybD1kZWJyaWQpJyAlICAgKEFERE9OX0lELCBkZWJyaWQpKSkKICAgICAgICAKICAgICAgICBhZGRGaWxlKCdbK10tPiAlcycgJSBuYW1lLCAgICAgJycsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOiBhZGRGaWxlKCdbQ09MT1IgcmVkXURhdG9zIGRlIGFkZG9uOiBObyBpbnN0YWxhZG9bL0NPTE9SXScsICcnLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudSkKICAgICAgICBlbGlmIG5vdCBhdXNlcjogICAgICAgICAgICAgIGFkZEZpbGUoJ1tDT0xPUiByZWRdRGF0b3MgZGUgYWRkb246IE5vIHJlZ2lzdHJhZG9bL0NPTE9SXScsJ2F1dGhkZWJyaWQnLCBkZWJyaWQsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgbWVudT1tZW51KQogICAgICAgIGVsc2U6ICAgICAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIGdyZWVuXURhdG9zIGRlIGFkZG9uOiAlc1svQ09MT1JdJyAlIGF1c2VyLCdhdXRoZGVicmlkJywgZGVicmlkLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudSkKICAgICAgICBpZiB1c2VyID09ICIiOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmaWxlKTogYWRkRmlsZSgnW0NPTE9SIHJlZF1EYXRvcyBndWFyZGFkb3M6IEFyY2hpdm8gZ3VhcmRhZG8gZW5jb250cmFkbyhJbXBvcnRhciBEYXRvcylbL0NPTE9SXScsJ2ltcG9ydGRlYnJpZCcsIGRlYnJpZCwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUyKQogICAgICAgICAgICBlbHNlIDogICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIHJlZF1EYXRvcyBndWFyZGFkb3M6IE5vIGd1YXJkYWRvc1svQ09MT1JdJywnc2F2ZWRlYnJpZCcsIGRlYnJpZCwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUyKQogICAgICAgIGVsc2U6ICAgICAgICAgICAgICAgICAgICAgICAgYWRkRmlsZSgnW0NPTE9SIGdyZWVuXURhdG9zIGd1YXJkYWRvczogJXNbL0NPTE9SXScgJSB1c2VyLCAnJywgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUyKQogICAgCiAgICBpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnR3VhcmRhciB0b2RvcyBsb3MgZGF0b3MgZGUgUmVhbCBEZWJyaWQnLCAgICAgICAgICAnc2F2ZWRlYnJpZCcsICAgICdhbGwnLCBpY29uPUlDT05SRUFMLCAgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdSZWN1cGVyYXIgdG9kb3MgbG9zIGRhdG9zIGRlIFJlYWwgRGVicmlkJywgJ3Jlc3RvcmVkZWJyaWQnLCAnYWxsJywgaWNvbj1JQ09OUkVBTCwgIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnSW1wb3J0YXIgZGF0b3MgZGUgUmVhbCBEZWJyaWQnLCAgICAgICAgICAgICdpbXBvcnRkZWJyaWQnLCAgJ2FsbCcsIGljb249SUNPTlJFQUwsICB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ0xpbXBpYXIgdG9kb3MgbG9zIGRhdG9zIGRlIFJlYWwgRGVicmlkJywgICAnY2xlYXJkZWJyaWQnLCAgICdhbGwnLCBpY29uPUlDT05SRUFMLCAgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdMaW1waWFyIGNvbXBsZXRhbWVudGUgUmVhbCBEZWJyaWQnLCAgICAgICAgICAgICAgICdhZGRvbmRlYnJpZCcsICAgJ2FsbCcsIGljb249SUNPTlJFQUwsICB0aGVtZWl0PVRIRU1FMykKICAgIHNldFZpZXcoJ2ZpbGVzJywgJ3ZpZXdUeXBlJykKCmRlZiBsb2dpbk1lbnUoKToKICAgIGxvZ2luID0gJ1tDT0xPUiBncmVlbl1PTlsvQ09MT1JdJyBpZiBLRUVQTE9HSU4gPT0gJ3RydWUnIGVsc2UgJ1tDT0xPUiByZWRdT0ZGWy9DT0xPUl0nCiAgICBsYXN0ID0gc3RyKExPR0lOU0FWRSkgaWYgbm90IExPR0lOU0FWRSA9PSAnJyBlbHNlICdUb2RhdmlhIG5vIHNlIGhhbiBndWFyZGFkbyBsb3MgZGF0b3MgZGUgTG9naW4uJwogICAgYWRkRmlsZSgnW0ldQWxndW5vcyBkZSBlc3RvcyBhZGRvbnMgc29uIGRlIFBBR08uWy9JXScsICcnLCBpY29uPUlDT05MT0dJTiwgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdHdWFyZGFyIGRhdG9zIGRlIExvZ2luOiAlcycgJSBsb2dpbiwgJ3RvZ2dsZXNldHRpbmcnLCAna2VlcGxvZ2luJywgaWNvbj1JQ09OTE9HSU4sIHRoZW1laXQ9VEhFTUUzKQogICAgaWYgS0VFUExPR0lOID09ICd0cnVlJzogYWRkRmlsZSgnVWx0aW1vIGd1YXJkYWRvOiAlcycgJSBzdHIobGFzdCksICcnLCBpY29uPUlDT05MT0dJTiwgdGhlbWVpdD1USEVNRTMpCiAgICBpZiBISURFU1BBQ0VSUyA9PSAnTm8nOiBhZGRGaWxlKHdpei5zZXAoKSwgJycsIGljb249SUNPTkxPR0lOLCB0aGVtZWl0PVRIRU1FMykKCiAgICBmb3IgbG9naW4gaW4gbG9naW5pdC5PUkRFUjoKICAgICAgICBuYW1lICAgPSBMT0dJTklEW2xvZ2luXVsnbmFtZSddCiAgICAgICAgcGF0aCAgID0gTE9HSU5JRFtsb2dpbl1bJ3BhdGgnXQogICAgICAgIHNhdmVkICA9IExPR0lOSURbbG9naW5dWydzYXZlZCddCiAgICAgICAgZmlsZSAgID0gTE9HSU5JRFtsb2dpbl1bJ2ZpbGUnXQogICAgICAgIHVzZXIgICA9IHdpei5nZXRTKHNhdmVkKQogICAgICAgIGF1c2VyICA9IGxvZ2luaXQubG9naW5Vc2VyKGxvZ2luKQogICAgICAgIGljb24gICA9IExPR0lOSURbbG9naW5dWydpY29uJ10gICBpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKSBlbHNlIElDT05MT0dJTgogICAgICAgIGZhbmFydCA9IExPR0lOSURbbG9naW5dWydmYW5hcnQnXSBpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKSBlbHNlIEZBTkFSVAogICAgICAgIG1lbnUgPSBjcmVhdGVNZW51KCdzYXZlYWRkb24nLCAnTG9naW4nLCBsb2dpbikKICAgICAgICBtZW51MiA9IGNyZWF0ZU1lbnUoJ3NhdmUnLCAnTG9naW4nLCBsb2dpbikKICAgICAgICBtZW51LmFwcGVuZCgoVEhFTUUyICUgJyVzIE9wY2lvbmVzJyAlIG5hbWUsICAgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPW9wZW5zZXR0aW5ncyZuYW1lPSVzJnVybD1sb2dpbiknICUgICAoQURET05fSUQsIGxvZ2luKSkpCiAgICAgICAgCiAgICAgICAgYWRkRmlsZSgnWytdLT4gJXMnICUgbmFtZSwgICAgICcnLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIHRoZW1laXQ9VEhFTUUzKQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXRoKTogYWRkRmlsZSgnW0NPTE9SIHJlZF1EYXRvcyBkZSBhZGRvbjogTm8gaW5zdGFsYWRvWy9DT0xPUl0nLCAnJywgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUpCiAgICAgICAgZWxpZiBub3QgYXVzZXI6ICAgICAgICAgICAgICBhZGRGaWxlKCdbQ09MT1IgcmVkXURhdG9zIGRlIGFkZG9uOiBObyByZWdpc3RyYWRvWy9DT0xPUl0nLCdhdXRobG9naW4nLCBsb2dpbiwgaWNvbj1pY29uLCBmYW5hcnQ9ZmFuYXJ0LCBtZW51PW1lbnUpCiAgICAgICAgZWxzZTogICAgICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKCdbQ09MT1IgZ3JlZW5dRGF0b3MgZGUgYWRkb246ICVzWy9DT0xPUl0nICUgYXVzZXIsJ2F1dGhsb2dpbicsIGxvZ2luLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudSkKICAgICAgICBpZiB1c2VyID09ICIiOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmaWxlKTogYWRkRmlsZSgnW0NPTE9SIHJlZF1EYXRvcyBndWFyZGFkb3M6IEFyY2hpdm8gZ3VhcmRhZG8gZW5jb250cmFkbyhJbXBvcnRhciBEYXRvcylbL0NPTE9SXScsJ2ltcG9ydGxvZ2luJywgbG9naW4sIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgbWVudT1tZW51MikKICAgICAgICAgICAgZWxzZSA6ICAgICAgICAgICAgICAgICAgIGFkZEZpbGUoJ1tDT0xPUiByZWRdRGF0b3MgZ3VhcmRhZG9zOiBObyBndWFyZGFkb3NbL0NPTE9SXScsJ3NhdmVsb2dpbicsIGxvZ2luLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudTIpCiAgICAgICAgZWxzZTogICAgICAgICAgICAgICAgICAgICAgICBhZGRGaWxlKCdbQ09MT1IgZ3JlZW5dRGF0b3MgZ3VhcmRhZG9zOiAlc1svQ09MT1JdJyAlIHVzZXIsICcnLCBpY29uPWljb24sIGZhbmFydD1mYW5hcnQsIG1lbnU9bWVudTIpCgogICAgaWYgSElERVNQQUNFUlMgPT0gJ05vJzogYWRkRmlsZSh3aXouc2VwKCksICcnLCB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ0d1YXJkYXIgdG9kb3MgbG9zIGRhdG9zIGRlIExvZ2luJywgICAgICAgICAgJ3NhdmVsb2dpbicsICAgICdhbGwnLCBpY29uPUlDT05MT0dJTiwgIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnUmVjdXBlcmFyIHRvZG9zIGxvcyBkYXRvcyBkZSBMb2dpbicsICdyZXN0b3JlbG9naW4nLCAnYWxsJywgaWNvbj1JQ09OTE9HSU4sICB0aGVtZWl0PVRIRU1FMykKICAgIGFkZEZpbGUoJ0ltcG9ydGFyIGRhdG9zIGRlIExvZ2luJywgICAgICAgICAgICAnaW1wb3J0bG9naW4nLCAgJ2FsbCcsIGljb249SUNPTkxPR0lOLCAgdGhlbWVpdD1USEVNRTMpCiAgICBhZGRGaWxlKCdMaW1waWFyIHRvZG9zIGxvcyBkYXRvcyBkZSBMb2dpbicsICAgJ2NsZWFybG9naW4nLCAgICdhbGwnLCBpY29uPUlDT05MT0dJTiwgIHRoZW1laXQ9VEhFTUUzKQogICAgYWRkRmlsZSgnTGltcGlhciBjb21wbGV0YW1lbnRlIHRvZG9zIGxvcyBkYXRvcyBkZSBMb2dpbicsICAgICAgICAgJ2FkZG9ubG9naW4nLCAgICdhbGwnLCBpY29uPUlDT05MT0dJTiwgIHRoZW1laXQ9VEhFTUUzKQogICAgc2V0VmlldygnZmlsZXMnLCAndmlld1R5cGUnKQoKZGVmIGZpeFVwZGF0ZSgpOgogICAgaWYgS09ESVYgPCAxNzogCiAgICAgICAgZGJmaWxlID0gb3MucGF0aC5qb2luKERBVEFCQVNFLCB3aXoubGF0ZXN0REIoJ0FkZG9ucycpKQogICAgICAgIHRyeToKICAgICAgICAgICAgb3MucmVtb3ZlKGRiZmlsZSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uLCBlOgogICAgICAgICAgICB3aXoubG9nKCJJbXBvc2libGUgZWxpbWluYXIgJXMsIExpbXBpYW5kbyBCRCIgJSBkYmZpbGUpCiAgICAgICAgICAgIHdpei5wdXJnZURiKGRiZmlsZSkKICAgIGVsc2U6CiAgICAgICAgeGJtYy5sb2coIkVsIGFyY2hpdm8gQWRkb25zLmRiIHNlIGVsaW1pbmFyYSBwZXJvIG5vIGZ1bmNpb25hIGVuIEtvZGkgMTciKQoKZGVmIHJlbW92ZUFkZG9uTWVudSgpOgogICAgZm9sZCA9IGdsb2IuZ2xvYihvcy5wYXRoLmpvaW4oQURET05TLCAnKi8nKSkKICAgIGFkZG9ubmFtZXMgPSBbXTsgYWRkb25pZHMgPSBbXQogICAgZm9yIGZvbGRlciBpbiBzb3J0ZWQoZm9sZCwga2V5ID0gbGFtYmRhIHg6IHgpOgogICAgICAgIGZvbGRlcm5hbWUgPSBvcy5wYXRoLnNwbGl0KGZvbGRlcls6LTFdKVsxXQogICAgICAgIGlmIGZvbGRlcm5hbWUgaW4gRVhDTFVERVM6IGNvbnRpbnVlCiAgICAgICAgZWxpZiBmb2xkZXJuYW1lIGluIERFRkFVTFRQTFVHSU5TOiBjb250aW51ZQogICAgICAgIGVsaWYgZm9sZGVybmFtZSA9PSAncGFja2FnZXMnOiBjb250aW51ZQogICAgICAgIHhtbCA9IG9zLnBhdGguam9pbihmb2xkZXIsICdhZGRvbi54bWwnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHhtbCk6CiAgICAgICAgICAgIGYgICAgICA9IG9wZW4oeG1sKQogICAgICAgICAgICBhICAgICAgPSBmLnJlYWQoKQogICAgICAgICAgICBtYXRjaCAgPSB3aXoucGFyc2VET00oYSwgJ2FkZG9uJywgcmV0PSdpZCcpCgogICAgICAgICAgICBhZGRpZCAgPSBmb2xkZXJuYW1lIGlmIGxlbihtYXRjaCkgPT0gMCBlbHNlIG1hdGNoWzBdCiAgICAgICAgICAgIHRyeTogCiAgICAgICAgICAgICAgICBhZGQgPSB4Ym1jYWRkb24uQWRkb24oaWQ9YWRkaWQpCiAgICAgICAgICAgICAgICBhZGRvbm5hbWVzLmFwcGVuZChhZGQuZ2V0QWRkb25JbmZvKCduYW1lJykpCiAgICAgICAgICAgICAgICBhZGRvbmlkcy5hcHBlbmQoYWRkaWQpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgIGlmIGxlbihhZGRvbm5hbWVzKSA9PSAwOgogICAgICAgIHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAiW0NPTE9SICVzXU5vIGhheSBhZGRvbnMgcGFyYSBlbGltaW5hclsvQ09MT1JdIiAlIENPTE9SMikKICAgICAgICByZXR1cm4KICAgIGlmIEtPRElWID4gMTY6CiAgICAgICAgc2VsZWN0ZWQgPSBESUFMT0cubXVsdGlzZWxlY3QoIiVzOiBTZWxlY2NjaW9uYSBsb3MgYWRkb25zIHF1ZSBxdWllcmVzIGVsaW1pbmFyIiAlIEFERE9OVElUTEUsIGFkZG9ubmFtZXMpCiAgICBlbHNlOgogICAgICAgIHNlbGVjdGVkID0gW107IGNob2ljZSA9IDAKICAgICAgICB0ZW1wYWRkb25uYW1lcyA9IFsiLS0gQ2xpY2sgYXF1aSBwYXJhIENvbnRpbnVhciAtLSJdICsgYWRkb25uYW1lcwogICAgICAgIHdoaWxlIG5vdCBjaG9pY2UgPT0gLTE6CiAgICAgICAgICAgIGNob2ljZSA9IERJQUxPRy5zZWxlY3QoIiVzOiBTZWxlY2Npb25hIGxvcyBhZGRvbnMgcXVlIHF1aWVyZXMgZWxpbWluYXIiICUgQURET05USVRMRSwgdGVtcGFkZG9ubmFtZXMpCiAgICAgICAgICAgIGlmIGNob2ljZSA9PSAtMTogYnJlYWsKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gMDogYnJlYWsKICAgICAgICAgICAgZWxzZTogCiAgICAgICAgICAgICAgICBjaG9pY2UyID0gKGNob2ljZS0xKQogICAgICAgICAgICAgICAgaWYgY2hvaWNlMiBpbiBzZWxlY3RlZDoKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5yZW1vdmUoY2hvaWNlMikKICAgICAgICAgICAgICAgICAgICB0ZW1wYWRkb25uYW1lc1tjaG9pY2VdID0gYWRkb25uYW1lc1tjaG9pY2UyXQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5hcHBlbmQoY2hvaWNlMikKICAgICAgICAgICAgICAgICAgICB0ZW1wYWRkb25uYW1lc1tjaG9pY2VdID0gIltCXVtDT0xPUiAlc10lc1svQ09MT1JdWy9CXSIgJSAoQ09MT1IxLCBhZGRvbm5hbWVzW2Nob2ljZTJdKQogICAgaWYgc2VsZWN0ZWQgPT0gTm9uZTogcmV0dXJuCiAgICBpZiBsZW4oc2VsZWN0ZWQpID4gMDoKICAgICAgICB3aXouYWRkb25VcGRhdGVzKCdzZXQnKQogICAgICAgIGZvciBhZGRvbiBpbiBzZWxlY3RlZDoKICAgICAgICAgICAgcmVtb3ZlQWRkb24oYWRkb25pZHNbYWRkb25dLCBhZGRvbm5hbWVzW2FkZG9uXSwgVHJ1ZSkKCiAgICAgICAgeGJtYy5zbGVlcCg1MDApCiAgICAgICAgCiAgICAgICAgaWYgSU5TVEFMTE1FVEhPRCA9PSAxOiB0b2RvID0gMQogICAgICAgIGVsaWYgSU5TVEFMTE1FVEhPRCA9PSAyOiB0b2RvID0gMAogICAgICAgIGVsc2U6IHRvZG8gPSBESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIFtDT0xPUiAlc11Gb3J6YXIgZWwgY2llcnJlIGRlWy9DT0xPUl0gS29kaSBvIFtDT0xPUiAlc11SZWNhcmdhciBlbCBwZXJmaWxbL0NPTE9SXT9bL0NPTE9SXSIgJSAoQ09MT1IyLCBDT0xPUjEsIENPTE9SMSksIHllc2xhYmVsPSJbQl1bQ09MT1IgZ3JlZW5dUmVjYXJnYXIgZWwgcGVyZmlsWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Gb3J6YXIgY2llcnJlWy9DT0xPUl1bL0JdIikKICAgICAgICBpZiB0b2RvID09IDE6IHdpei5yZWxvYWRGaXgoJ3JlbW92ZSBhZGRvbicpCiAgICAgICAgZWxzZTogd2l6LmFkZG9uVXBkYXRlcygncmVzZXQnKTsgd2l6LmtpbGx4Ym1jKFRydWUpCgpkZWYgcmVtb3ZlQWRkb25EYXRhTWVudSgpOgogICAgaWYgb3MucGF0aC5leGlzdHMoQURET05EKToKICAgICAgICBhZGRGaWxlKCdbQ09MT1IgcmVkXVtCXVtFTElNSU5BUl1bL0JdWy9DT0xPUl0gRGF0b3MgZGUgdG9kb3MgbG9zIGFkZG9ucycsICdyZW1vdmVkYXRhJywgJ2FsbCcsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgIGFkZEZpbGUoJ1tDT0xPUiByZWRdW0JdW0VMSU1JTkFSXVsvQl1bL0NPTE9SXSBEYXRvcyBkZSB0b2RvcyBsb3MgYWRkb25zIGRlc2luc3RhbGFkb3MnLCAncmVtb3ZlZGF0YScsICd1bmluc3RhbGxlZCcsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgIGFkZEZpbGUoJ1tDT0xPUiByZWRdW0JdW0VMSU1JTkFSXVsvQl1bL0NPTE9SXSBUb2RhcyBsYXMgY2FycGV0YXMgdmFjaWFzIGRlbnRybyBkZSBsYSBjYXJwZXRhIGRlIGRhdG9zIGRlIGxvcyBhZGRvbnMnLCAncmVtb3ZlZGF0YScsICdlbXB0eScsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgIGFkZEZpbGUoJ1tDT0xPUiByZWRdW0JdW0VMSU1JTkFSXVsvQl1bL0NPTE9SXSAlcyBEYXRvcycgJSBBRERPTlRJVExFLCAncmVzZXRhZGRvbicsIHRoZW1laXQ9VEhFTUUyKQogICAgICAgIGlmIEhJREVTUEFDRVJTID09ICdObyc6IGFkZEZpbGUod2l6LnNlcCgpLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICAgICAgZm9sZCA9IGdsb2IuZ2xvYihvcy5wYXRoLmpvaW4oQURET05ELCAnKi8nKSkKICAgICAgICBmb3IgZm9sZGVyIGluIHNvcnRlZChmb2xkLCBrZXkgPSBsYW1iZGEgeDogeCk6CiAgICAgICAgICAgIGZvbGRlcm5hbWUgPSBmb2xkZXIucmVwbGFjZShBRERPTkQsICcnKS5yZXBsYWNlKCdcXCcsICcnKS5yZXBsYWNlKCcvJywgJycpCiAgICAgICAgICAgIGljb24gPSBvcy5wYXRoLmpvaW4oZm9sZGVyLnJlcGxhY2UoQURET05ELCBBRERPTlMpLCAnaWNvbi5wbmcnKQogICAgICAgICAgICBmYW5hcnQgPSBvcy5wYXRoLmpvaW4oZm9sZGVyLnJlcGxhY2UoQURET05ELCBBRERPTlMpLCAnZmFuYXJ0LnBuZycpCiAgICAgICAgICAgIGZvbGRlcmRpc3BsYXkgPSBmb2xkZXJuYW1lCiAgICAgICAgICAgIHJlcGxhY2UgPSB7J2F1ZGlvLic6J1tDT0xPUiBvcmFuZ2VdW0FVRElPXSBbL0NPTE9SXScsICdtZXRhZGF0YS4nOidbQ09MT1IgY3lhbl1bTUVUQURBVE9TXSBbL0NPTE9SXScsICdtb2R1bGUuJzonW0NPTE9SIG9yYW5nZV1bTU9EVUxvXSBbL0NPTE9SXScsICdwbHVnaW4uJzonW0NPTE9SIGJsdWVdW1BMVUdJTl0gWy9DT0xPUl0nLCAncHJvZ3JhbS4nOidbQ09MT1Igb3JhbmdlXVtQUk9HUkFNQV0gWy9DT0xPUl0nLCAncmVwb3NpdG9yeS4nOidbQ09MT1IgZ29sZF1bUkVQT1NJVE9SSU9dIFsvQ09MT1JdJywgJ3NjcmlwdC4nOidbQ09MT1IgZ3JlZW5dW1NDUklQVF0gWy9DT0xPUl0nLCAnc2VydmljZS4nOidbQ09MT1IgZ3JlZW5dW1NFUlZJQ0lPXSBbL0NPTE9SXScsICdza2luLic6J1tDT0xPUiBkb2RnZXJibHVlXVtTS0lOXSBbL0NPTE9SXScsICd2aWRlby4nOidbQ09MT1Igb3JhbmdlXVtWSURFT10gWy9DT0xPUl0nLCAnd2VhdGhlci4nOidbQ09MT1IgeWVsbG93XVtUSUVNUE9dIFsvQ09MT1JdJ30KICAgICAgICAgICAgZm9yIHJlcCBpbiByZXBsYWNlOgogICAgICAgICAgICAgICAgZm9sZGVyZGlzcGxheSA9IGZvbGRlcmRpc3BsYXkucmVwbGFjZShyZXAsIHJlcGxhY2VbcmVwXSkKICAgICAgICAgICAgaWYgZm9sZGVybmFtZSBpbiBFWENMVURFUzogZm9sZGVyZGlzcGxheSA9ICdbQ09MT1IgZ3JlZW5dW0JdW1BST1RFR0lET11bL0JdWy9DT0xPUl0gJXMnICUgZm9sZGVyZGlzcGxheQogICAgICAgICAgICBlbHNlOiBmb2xkZXJkaXNwbGF5ID0gJ1tDT0xPUiByZWRdW0JdW0VMSU1JTkFSXVsvQl1bL0NPTE9SXSAlcycgJSBmb2xkZXJkaXNwbGF5CiAgICAgICAgICAgIGFkZEZpbGUoJyAlcycgJSBmb2xkZXJkaXNwbGF5LCAncmVtb3ZlZGF0YScsIGZvbGRlcm5hbWUsIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCwgdGhlbWVpdD1USEVNRTIpCiAgICBlbHNlOgogICAgICAgIGFkZEZpbGUoJ05vIHNlIGhhbiBlbmNvbnRyYWRvIGRhdG9zIGRlIGFkZG9ucy4nLCAnJywgdGhlbWVpdD1USEVNRTMpCiAgICBzZXRWaWV3KCdmaWxlcycsICd2aWV3VHlwZScpCgpkZWYgZW5hYmxlQWRkb25zKCk6CiAgICBhZGRGaWxlKCJbSV1bQl1bQ09MT1IgcmVkXUlNUE9SVEFOVEU6IERlc2FjdGl2YXIgY2llcnRvcyBhZGRvbnMgcHVlZGUgY2F1c2FyIHByb2JsZW1hcyBlbiBsYSBjb25maWd1cmFjaW9uIGRlIEtvZGkhIVsvQ09MT1JdWy9CXVsvSV0iLCAnJywgaWNvbj1JQ09OTUFJTlQpCiAgICBmb2xkID0gZ2xvYi5nbG9iKG9zLnBhdGguam9pbihBRERPTlMsICcqLycpKQogICAgeCA9IDAKICAgIGZvciBmb2xkZXIgaW4gc29ydGVkKGZvbGQsIGtleSA9IGxhbWJkYSB4OiB4KToKICAgICAgICBmb2xkZXJuYW1lID0gb3MucGF0aC5zcGxpdChmb2xkZXJbOi0xXSlbMV0KICAgICAgICBpZiBmb2xkZXJuYW1lIGluIEVYQ0xVREVTOiBjb250aW51ZQogICAgICAgIGlmIGZvbGRlcm5hbWUgaW4gREVGQVVMVFBMVUdJTlM6IGNvbnRpbnVlCiAgICAgICAgYWRkb254bWwgPSBvcy5wYXRoLmpvaW4oZm9sZGVyLCAnYWRkb24ueG1sJykKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhhZGRvbnhtbCk6CiAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICBmb2xkICAgPSBmb2xkZXIucmVwbGFjZShBRERPTlMsICcnKVsxOi0xXQogICAgICAgICAgICBmICAgICAgPSBvcGVuKGFkZG9ueG1sKQogICAgICAgICAgICBhICAgICAgPSBmLnJlYWQoKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykucmVwbGFjZSgnXHQnLCcnKQogICAgICAgICAgICBtYXRjaCAgPSB3aXoucGFyc2VET00oYSwgJ2FkZG9uJywgcmV0PSdpZCcpCiAgICAgICAgICAgIG1hdGNoMiA9IHdpei5wYXJzZURPTShhLCAnYWRkb24nLCByZXQ9J25hbWUnKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwbHVnaW5pZCA9IG1hdGNoWzBdCiAgICAgICAgICAgICAgICBuYW1lID0gbWF0Y2gyWzBdCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGFkZCAgICA9IHhibWNhZGRvbi5BZGRvbihpZD1wbHVnaW5pZCkKICAgICAgICAgICAgICAgIHN0YXRlICA9ICJbQ09MT1IgZ3JlZW5dW0FDVElWQURPXVsvQ09MT1JdIgogICAgICAgICAgICAgICAgZ290byAgID0gImZhbHNlIgogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBzdGF0ZSAgPSAiW0NPTE9SIHJlZF1bREVTQUNUSVZBRE9dWy9DT0xPUl0iCiAgICAgICAgICAgICAgICBnb3RvICAgPSAidHJ1ZSIKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgaWNvbiAgID0gb3MucGF0aC5qb2luKGZvbGRlciwgJ2ljb24ucG5nJykgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGZvbGRlciwgJ2ljb24ucG5nJykpIGVsc2UgSUNPTgogICAgICAgICAgICBmYW5hcnQgPSBvcy5wYXRoLmpvaW4oZm9sZGVyLCAnZmFuYXJ0LmpwZycpIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihmb2xkZXIsICdmYW5hcnQuanBnJykpIGVsc2UgRkFOQVJUCiAgICAgICAgICAgIGFkZEZpbGUoIiVzICVzIiAlIChzdGF0ZSwgbmFtZSksICd0b2dnbGVhZGRvbicsIGZvbGQsIGdvdG8sIGljb249aWNvbiwgZmFuYXJ0PWZhbmFydCkKICAgICAgICAgICAgZi5jbG9zZSgpCiAgICBpZiB4ID09IDA6CiAgICAgICAgYWRkRmlsZSgiTm8gc2UgaGFuIGVuY29udHJhZG8gQWRkb25zIHF1ZSBkZXNhY3RpdmFyIG8gYWN0aXZhci4iLCAnJywgaWNvbj1JQ09OTUFJTlQpCiAgICBzZXRWaWV3KCdmaWxlcycsICd2aWV3VHlwZScpCgpkZWYgY2hhbmdlRmVxKCk6CiAgICBmZXEgICAgICAgID0gWydBbCBpbmljaWFyJywgJ1RvZG9zIGxvcyBkaWFzJywgJ0NhZGEgdHJlcyBkaWFzJywgJ0NhZGEgc2VtYW5hJ10KICAgIGNoYW5nZSAgICAgPSBESUFMT0cuc2VsZWN0KCJbQ09MT1IgJXNdQ2FkYSBjdWFudG8gcXVpZXJlcyBlamVjdXRhciBsYSBBdXRvIExpbXBpZXphP1svQ09MT1JdIiAlIENPTE9SMiwgZmVxKQogICAgaWYgbm90IGNoYW5nZSA9PSAtMTogCiAgICAgICAgd2l6LnNldFMoJ2F1dG9jbGVhbmZlcScsIHN0cihjaGFuZ2UpKQogICAgICAgIHdpei5Mb2dOb3RpZnkoJ1tDT0xPUiAlc11BdXRvIExpbXBpZXphIGFjdGl2YWRhWy9DT0xPUl0nICUgQ09MT1IxLCAnW0NPTE9SICVzXUxhIGZyZWN1ZW5jaWEgZGUgZWplY3VjaW9uIGVzIGRlICVzWy9DT0xPUl0nICUgKENPTE9SMiwgZmVxW2NoYW5nZV0pKQoKZGVmIGRldmVsb3BlcigpOgogICAgI2FkZEZpbGUoJ0NvbnZlcnQgVGV4dCBGaWxlcyB0byAwLjEuNycsICAgICAgICAgJ2NvbnZlcnR0ZXh0JywgICAgICAgICAgIHRoZW1laXQ9VEhFTUUxKQogICAgI2FkZEZpbGUoJ0NyZWFyIGNvZGlnbyBRUicsICAgICAgICAgICAgICAgICAgICAgICdjcmVhdGVxcicsICAgICAgICAgICAgICB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ1Rlc3RlYXIgTm90aWZpY2FjaW9uZXMnLCAgICAgICAgICAgICAgICAgICd0ZXN0bm90aWZ5JywgICAgICAgICAgICB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ1Rlc3RlYXIgVXBkYXRlJywgICAgICAgICAgICAgICAgICAgICAgICAgJ3Rlc3R1cGRhdGUnLCAgICAgICAgICAgIHRoZW1laXQ9VEhFTUUxKQogICAgYWRkRmlsZSgnVGVzdCBQcmltZXJhIEVqZWN1Y2lvbicsICAgICAgICAgICAgICAgICAgICAgICd0ZXN0Zmlyc3QnLCAgICAgICAgICAgICB0aGVtZWl0PVRIRU1FMSkKICAgIGFkZEZpbGUoJ1Rlc3RlYXIgT3BjaW9uZXMgZGUgUHJpbWVyYSBFamVjdWNpb24nLCAgICAgICAgICAgICAndGVzdGZpcnN0cnVuJywgICAgICAgICAgdGhlbWVpdD1USEVNRTEpCiAgICBhZGRGaWxlKCdUZXN0ZWFyIEFQSycsICAgICAgICAgICAgICd0ZXN0YXBrJywgICAgICAgICAgdGhlbWVpdD1USEVNRTEpCiAgICAKICAgIHNldFZpZXcoJ2ZpbGVzJywgJ3ZpZXdUeXBlJykKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMgSW5zdGFsYWNpb24gIyMjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiBidWlsZFdpemFyZChuYW1lLCB0eXBlLCB0aGVtZT1Ob25lLCBvdmVyPUZhbHNlKToKICAgIGlmIG92ZXIgPT0gRmFsc2U6CiAgICAgICAgdGVzdGJ1aWxkID0gd2l6LmNoZWNrQnVpbGQobmFtZSwgJ3VybCcpCiAgICAgICAgaWYgdGVzdGJ1aWxkID09IEZhbHNlOgogICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11JbXBvc2libGUgZW5jb250cmFyIHBhcXVldGVbL0NPTE9SXSIgJSBDT0xPUjIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIHRlc3R3b3JraW5nID0gd2l6LndvcmtpbmdVUkwodGVzdGJ1aWxkKQogICAgICAgIGlmIHRlc3R3b3JraW5nID09IEZhbHNlOgogICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11FcnJvciBlbiBhcmNoaXZvIFpJUDogJXNbL0NPTE9SXSIgJSAoQ09MT1IyLCB0ZXN0d29ya2luZykpCiAgICAgICAgICAgIHJldHVybgogICAgaWYgdHlwZSA9PSAnZ3VpJzoKICAgICAgICBpZiBuYW1lID09IEJVSUxETkFNRToKICAgICAgICAgICAgaWYgb3ZlciA9PSBUcnVlOiB5ZXMgPSAxCiAgICAgICAgICAgIGVsc2U6IHllcyA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgaW5zdGFsYXIgbGEgY29waWEgZGUgbGEgc2tpbiB5IHN1cyBvcGNpb25lcyBwYXJhOicgJSBDT0xPUjIsICdbQ09MT1IgJXNdJXNbL0NPTE9SXT9bL0NPTE9SXScgJSAoQ09MT1IxLCBuYW1lKSwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1Ob1svQ09MT1JdWy9CXScseWVzbGFiZWw9J1tCXVtDT0xPUiBncmVlbl1TaVsvQ09MT1JdWy9CXScpCiAgICAgICAgZWxzZTogCiAgICAgICAgICAgIHllcyA9IERJQUxPRy55ZXNubygiJXMgLSBbQ09MT1IgcmVkXUFWSVNPISFbL0NPTE9SXSIgJSBBRERPTlRJVExFLCAiW0NPTE9SICVzXVtDT0xPUiAlc10lc1svQ09MT1JdIG5vIGluc3RhbGFkby4iICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lKSwgIlF1aWVyZXMgaW5zdGFsYXIgbGEgY29waWEgZGUgbGEgc2tpbiB5IHN1cyBvcGNpb25lcyBpZ3VhbG1lbnRlPy5bL0NPTE9SXSIsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdTm8sIENhbmNlbGFyWy9DT0xPUl1bL0JdJyx5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXVNpWy9DT0xPUl1bL0JdJykKICAgICAgICBpZiB5ZXM6CiAgICAgICAgICAgIGJ1aWxkemlwID0gd2l6LmNoZWNrQnVpbGQobmFtZSwnZ3VpJykKICAgICAgICAgICAgemlwbmFtZSA9IG5hbWUucmVwbGFjZSgnXFwnLCAnJykucmVwbGFjZSgnLycsICcnKS5yZXBsYWNlKCc6JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPycsICcnKS5yZXBsYWNlKCciJywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKS5yZXBsYWNlKCd8JywgJycpCiAgICAgICAgICAgIGlmIG5vdCB3aXoud29ya2luZ1VSTChidWlsZHppcCkgPT0gVHJ1ZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdQ29waWEgZGUgbGEgc2tpbjogVVJMIG5vIHZhbGlkbyFbL0NPTE9SXScgJSBDT0xPUjIpOyByZXR1cm4KICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKFBBQ0tBR0VTKTogb3MubWFrZWRpcnMoUEFDS0FHRVMpCiAgICAgICAgICAgIERQLmNyZWF0ZShBRERPTlRJVExFLCdbQ09MT1IgJXNdW0JdRGVzY2FyZ2FuZG8gY29waWEgZGUgbGEgc2tpbjpbL0JdWy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lKSwnJywgJ1BvciBmYXZvciwgZXNwZXJlLi4uJykKICAgICAgICAgICAgbGliPW9zLnBhdGguam9pbihQQUNLQUdFUywgJyVzX2d1aXNldHRpbmdzLnppcCcgJSB6aXBuYW1lKQogICAgICAgICAgICB0cnk6IG9zLnJlbW92ZShsaWIpCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICBkb3dubG9hZGVyLmRvd25sb2FkKGJ1aWxkemlwLCBsaWIsIERQKQogICAgICAgICAgICB4Ym1jLnNsZWVwKDUwMCkKICAgICAgICAgICAgdGl0bGUgPSAnW0NPTE9SICVzXVtCXUluc3RhbGFuZG86Wy9CXVsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSkKICAgICAgICAgICAgRFAudXBkYXRlKDAsIHRpdGxlLCcnLCAnUG9yIGZhdm9yLCBlc3BlcmUuLi4nKQogICAgICAgICAgICBleHRyYWN0LmFsbChsaWIsVVNFUkRBVEEsRFAsIHRpdGxlPXRpdGxlKQogICAgICAgICAgICBEUC5jbG9zZSgpCiAgICAgICAgICAgIHdpei5kZWZhdWx0U2tpbigpCiAgICAgICAgICAgIHdpei5sb29rYW5kRmVlbERhdGEoJ3NhdmUnKQogICAgICAgICAgICBpZiBJTlNUQUxMTUVUSE9EID09IDE6IHRvZG8gPSAxCiAgICAgICAgICAgIGVsaWYgSU5TVEFMTE1FVEhPRCA9PSAyOiB0b2RvID0gMAogICAgICAgICAgICBlbHNlOiB0b2RvID0gRElBTE9HLnllc25vKEFERE9OVElUTEUsICJbQ09MT1IgJXNdQ29waWEgZGUgbGEgc2tpbiBpbnN0YWxhZGEuIE5lY2VzaXRhcyBmb3J6YXIgZWwgY2llcnJlIGRlIEtvZGksIHF1aWVyZXMgaGFjZXJsbyBvIHJlY2FyZ2FyIGVsIHBlcmZpbD9bL0NPTE9SXSIgJSBDT0xPUjIsIHllc2xhYmVsPSJbQl1bQ09MT1IgcmVkXVJlY2FyZ2FyIGVsIHBlcmZpbFsvQ09MT1JdWy9CXSIsIG5vbGFiZWw9IltCXVtDT0xPUiBncmVlbl1Gb3J6YXIgY2llcnJlIGRlIEtvZGlbL0NPTE9SXVsvQl0iKQogICAgICAgICAgICBpZiB0b2RvID09IDE6IHdpei5yZWxvYWRGaXgoKQogICAgICAgICAgICBlbHNlOiBESUFMT0cub2soQURET05USVRMRSwgIltDT0xPUiAlc11QYXJhIGFwbGljYXIgbG9zIGNhbWJpb3MgbmVjZXNpdGFzIGZvcnphciBlbCBjaWVycmUgZGUgS29kaVsvQ09MT1JdIiAlIENPTE9SMik7IHdpei5raWxseGJtYygndHJ1ZScpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdSW5zdGFsYWNpb24gZGUgbGEgY29waWEgZGUgbGEgc2tpbjogQ2FuY2VsYWRvIVsvQ09MT1JdJyAlIENPTE9SMikKICAgIGVsaWYgdHlwZSA9PSAnZnJlc2gnOgogICAgICAgIGZyZXNoU3RhcnQobmFtZSkKICAgIGVsaWYgdHlwZSA9PSAnbm9ybWFsJzoKICAgICAgICBpZiB1cmwgPT0gJ25vcm1hbCc6CiAgICAgICAgICAgIGlmIEtFRVBUUkFLVCA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICB0cmFrdGl0LmF1dG9VcGRhdGUoJ2FsbCcpCiAgICAgICAgICAgICAgICB3aXouc2V0UygndHJha3RsYXN0c2F2ZScsIHN0cihUSFJFRURBWVMpKQogICAgICAgICAgICBpZiBLRUVQUkVBTCA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICBkZWJyaWRpdC5hdXRvVXBkYXRlKCdhbGwnKQogICAgICAgICAgICAgICAgd2l6LnNldFMoJ2RlYnJpZGxhc3RzYXZlJywgc3RyKFRIUkVFREFZUykpCiAgICAgICAgICAgIGlmIEtFRVBMT0dJTiA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICBsb2dpbml0LmF1dG9VcGRhdGUoJ2FsbCcpCiAgICAgICAgICAgICAgICB3aXouc2V0UygnbG9naW5sYXN0c2F2ZScsIHN0cihUSFJFRURBWVMpKQogICAgICAgIHRlbXBfa29kaXYgPSBpbnQoS09ESVYpOyBidWlsZHYgPSBpbnQoZmxvYXQod2l6LmNoZWNrQnVpbGQobmFtZSwgJ2tvZGknKSkpCiAgICAgICAgaWYgbm90IHRlbXBfa29kaXYgPT0gYnVpbGR2OiAKICAgICAgICAgICAgaWYgdGVtcF9rb2RpdiA9PSAxNiBhbmQgYnVpbGR2IDw9IDE1OiB3YXJuaW5nID0gRmFsc2UKICAgICAgICAgICAgZWxzZTogd2FybmluZyA9IFRydWUKICAgICAgICBlbHNlOiB3YXJuaW5nID0gRmFsc2UKICAgICAgICBpZiB3YXJuaW5nID09IFRydWU6CiAgICAgICAgICAgIHllc19wcmVzc2VkID0gRElBTE9HLnllc25vKCIlcyAtIFtDT0xPUiByZWRdQVZJU08hIVsvQ09MT1JdIiAlIEFERE9OVElUTEUsICdbQ09MT1IgJXNdRXhpc3RlIHVuYSBwb3NpYmlsaWRhZCBkZSBxdWUgbGEgc2tpbiBkZSBTYWxvbkRpZ2l0YWwgbm8gc2UgaW5zdGFsZSBjb3JyZWN0YW1lbnRlJyAlIENPTE9SMiwgJ0N1YW5kbyBpbnN0YWxhcyAlcyBlbiBLb2RpICVzJyAlICh3aXouY2hlY2tCdWlsZChuYW1lLCAna29kaScpLCBLT0RJViksICdRdWllcmVzIGluc3RhbGFyOiBbQ09MT1IgJXNdJXMgdiVzWy9DT0xPUl0/Wy9DT0xPUl0nICUgKENPTE9SMSwgbmFtZSwgd2l6LmNoZWNrQnVpbGQobmFtZSwndmVyc2lvbicpKSwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgQ2FuY2VsYXJbL0NPTE9SXVsvQl0nLHllc2xhYmVsPSdbQl1bQ09MT1IgZ3JlZW5dU2lbL0NPTE9SXVsvQl0nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIG5vdCBvdmVyID09IEZhbHNlOiB5ZXNfcHJlc3NlZCA9IDEKICAgICAgICAgICAgZWxzZTogeWVzX3ByZXNzZWQgPSBESUFMT0cueWVzbm8oQURET05USVRMRSwgJ1tDT0xPUiAlc11RdWllcmVzIGRlc2NhcmdhciBlIGluc3RhbGFyOicgJSBDT0xPUjIsICdbQ09MT1IgJXNdJXMgdiVzWy9DT0xPUl0/Wy9DT0xPUl0nICUgKENPTE9SMSwgbmFtZSwgd2l6LmNoZWNrQnVpbGQobmFtZSwndmVyc2lvbicpKSwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgQ2FuY2VsclsvQ09MT1JdWy9CXScseWVzbGFiZWw9J1tCXVtDT0xPUiBncmVlbl1TaVsvQ09MT1JdWy9CXScpCiAgICAgICAgaWYgeWVzX3ByZXNzZWQ6CiAgICAgICAgICAgIHdpei5jbGVhclMoJ2J1aWxkJykKICAgICAgICAgICAgYnVpbGR6aXAgPSB3aXouY2hlY2tCdWlsZChuYW1lLCAndXJsJykKICAgICAgICAgICAgemlwbmFtZSA9IG5hbWUucmVwbGFjZSgnXFwnLCAnJykucmVwbGFjZSgnLycsICcnKS5yZXBsYWNlKCc6JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPycsICcnKS5yZXBsYWNlKCciJywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKS5yZXBsYWNlKCd8JywgJycpCiAgICAgICAgICAgIGlmIG5vdCB3aXoud29ya2luZ1VSTChidWlsZHppcCkgPT0gVHJ1ZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdSW5zdGFsYWNpb246IFppcCBubyB2YWxpZG8hWy9DT0xPUl0nICUgQ09MT1IyKTsgcmV0dXJuCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhQQUNLQUdFUyk6IG9zLm1ha2VkaXJzKFBBQ0tBR0VTKQogICAgICAgICAgICBEUC5jcmVhdGUoQURET05USVRMRSwnW0NPTE9SICVzXVtCXURlc2NhcmdhbmRvOlsvQl1bL0NPTE9SXSBbQ09MT1IgJXNdJXMgdiVzWy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lLCB3aXouY2hlY2tCdWlsZChuYW1lLCd2ZXJzaW9uJykpLCcnLCAnUG9yIGZhdm9yLCBlc3BlcmUuLi4nKQogICAgICAgICAgICBsaWI9b3MucGF0aC5qb2luKFBBQ0tBR0VTLCAnJXMuemlwJyAlIHppcG5hbWUpCiAgICAgICAgICAgIHRyeTogb3MucmVtb3ZlKGxpYikKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIGRvd25sb2FkZXIuZG93bmxvYWQoYnVpbGR6aXAsIGxpYiwgRFApCiAgICAgICAgICAgIHhibWMuc2xlZXAoNTAwKQogICAgICAgICAgICB0aXRsZSA9ICdbQ09MT1IgJXNdW0JdSW5zdGFsYW5kbzpbL0JdWy9DT0xPUl0gW0NPTE9SICVzXSVzIHYlc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSwgd2l6LmNoZWNrQnVpbGQobmFtZSwndmVyc2lvbicpKQogICAgICAgICAgICBEUC51cGRhdGUoMCwgdGl0bGUsJycsICdQb3IgZmF2b3IsIGVzcGVyZScpCiAgICAgICAgICAgIHBlcmNlbnQsIGVycm9ycywgZXJyb3IgPSBleHRyYWN0LmFsbChsaWIsSE9NRSxEUCwgdGl0bGU9dGl0bGUpCiAgICAgICAgICAgIGlmIGludChmbG9hdChwZXJjZW50KSkgPiAwOgogICAgICAgICAgICAgICAgd2l6LmZpeG1ldGFzKCkKICAgICAgICAgICAgICAgIHdpei5sb29rYW5kRmVlbERhdGEoJ3NhdmUnKQogICAgICAgICAgICAgICAgd2l6LmRlZmF1bHRTa2luKCkKICAgICAgICAgICAgICAgICN3aXouYWRkb25VcGRhdGVzKCdzZXQnKQogICAgICAgICAgICAgICAgd2l6LnNldFMoJ2J1aWxkbmFtZScsIG5hbWUpCiAgICAgICAgICAgICAgICB3aXouc2V0UygnYnVpbGR2ZXJzaW9uJywgd2l6LmNoZWNrQnVpbGQoIG5hbWUsJ3ZlcnNpb24nKSkKICAgICAgICAgICAgICAgIHdpei5zZXRTKCdidWlsZHRoZW1lJywgJycpCiAgICAgICAgICAgICAgICB3aXouc2V0UygnbGF0ZXN0dmVyc2lvbicsIHdpei5jaGVja0J1aWxkKCBuYW1lLCd2ZXJzaW9uJykpCiAgICAgICAgICAgICAgICB3aXouc2V0UygnbGFzdGJ1aWxkY2hlY2snLCBzdHIoTkVYVENIRUNLKSkKICAgICAgICAgICAgICAgIHdpei5zZXRTKCdpbnN0YWxsZWQnLCAndHJ1ZScpCiAgICAgICAgICAgICAgICB3aXouc2V0UygnZXh0cmFjdCcsIHN0cihwZXJjZW50KSkKICAgICAgICAgICAgICAgIHdpei5zZXRTKCdlcnJvcnMnLCBzdHIoZXJyb3JzKSkKICAgICAgICAgICAgICAgIHdpei5sb2coJ0lOU1RBTExFRCAlczogW0VSUk9SUzolc10nICUgKHBlcmNlbnQsIGVycm9ycykpCiAgICAgICAgICAgICAgICB0cnk6IG9zLnJlbW92ZShsaWIpCiAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgIGlmIGludChmbG9hdChlcnJvcnMpKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgeWVzPURJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVtDT0xPUiAlc10lcyB2JXNbL0NPTE9SXScgJSAoQ09MT1IyLCBDT0xPUjEsIG5hbWUsIHdpei5jaGVja0J1aWxkKCBuYW1lLCd2ZXJzaW9uJykpLCAnQ29tcGxldGFkbzogW0NPTE9SICVzXSVzJXNbL0NPTE9SXSBbRXJyb3JlczpbQ09MT1IgJXNdJXNbL0NPTE9SXV0nICUgKENPTE9SMSwgcGVyY2VudCwgJyUnLCBDT0xPUjEsIGVycm9ycyksICdRdWllcmVzIHZlciBsb3MgZXJyb3Jlcz9bL0NPTE9SXScsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdTm8sIGdyYWNpYXNbL0NPTE9SXVsvQl0nLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXVZlciBlcnJvcmVzWy9DT0xPUl1bL0JdJykKICAgICAgICAgICAgICAgICAgICBpZiB5ZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZXJyb3JzLCB1bmljb2RlKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IuZW5jb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5UZXh0Qm94KEFERE9OVElUTEUsIGVycm9yKQogICAgICAgICAgICAgICAgRFAuY2xvc2UoKQogICAgICAgICAgICAgICAgdGhlbWVmaWxlID0gd2l6LnRoZW1lQ291bnQobmFtZSkKICAgICAgICAgICAgICAgIGlmIG5vdCB0aGVtZWZpbGUgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgYnVpbGRXaXphcmQobmFtZSwgJ3RoZW1lJykKICAgICAgICAgICAgICAgIGlmIEtPRElWID49IDE3OiB3aXouYWRkb25EYXRhYmFzZShBRERPTl9JRCwgMSkKICAgICAgICAgICAgICAgIGlmIElOU1RBTExNRVRIT0QgPT0gMTogdG9kbyA9IDEKICAgICAgICAgICAgICAgIGVsaWYgSU5TVEFMTE1FVEhPRCA9PSAyOiB0b2RvID0gMAogICAgICAgICAgICAgICAgZWxzZTogdG9kbyA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgW0NPTE9SICVzXUZvcnphciBlbCBjaWVycmUgZGUgS29kaVsvQ09MT1JdIG8gW0NPTE9SICVzXVJlY2FyZ2FyIHBlcmZpbFsvQ09MT1JdP1svQ09MT1JdIiAlIChDT0xPUjIsIENPTE9SMSwgQ09MT1IxKSwgeWVzbGFiZWw9IltCXVtDT0xPUiByZWRdUmVjYXJnYXIgcGVyZmlsWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIGdyZWVuXUZvcnphciBjaWVycmVbL0NPTE9SXVsvQl0iKQogICAgICAgICAgICAgICAgaWYgdG9kbyA9PSAxOiB3aXoucmVsb2FkRml4KCkKICAgICAgICAgICAgICAgIGVsc2U6IHdpei5raWxseGJtYyhUcnVlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShlcnJvcnMsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IuZW5jb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICB3aXouVGV4dEJveCgiJXM6IEVycm9yIEluc3RhbGFuZG8iICUgQURET05USVRMRSwgZXJyb3IpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdSW5zdGFsYWNpb246IENhbmNlbGFkYSFbL0NPTE9SXScgJSBDT0xPUjIpCiAgICBlbGlmIHR5cGUgPT0gJ3RoZW1lJzoKICAgICAgICBpZiB0aGVtZSA9PSBOb25lOgogICAgICAgICAgICB0aGVtZWZpbGUgPSB3aXouY2hlY2tCdWlsZChuYW1lLCAndGhlbWUnKQogICAgICAgICAgICB0aGVtZWxpc3QgPSBbXQogICAgICAgICAgICBpZiBub3QgdGhlbWVmaWxlID09ICdodHRwOi8vJyBhbmQgd2l6LndvcmtpbmdVUkwodGhlbWVmaWxlKSA9PSBUcnVlOgogICAgICAgICAgICAgICAgdGhlbWVsaXN0ID0gd2l6LnRoZW1lQ291bnQobmFtZSwgRmFsc2UpCiAgICAgICAgICAgICAgICBpZiBsZW4odGhlbWVsaXN0KSA+IDA6CiAgICAgICAgICAgICAgICAgICAgaWYgRElBTE9HLnllc25vKEFERE9OVElUTEUsICJbQ09MT1IgJXNdW0NPTE9SICVzXSVzWy9DT0xPUl0gdGllbmUgW0NPTE9SICVzXSVzWy9DT0xPUl0gdGVtYSBwYXJhIGluc3RhbGFyIiAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSwgQ09MT1IxLCBsZW4odGhlbWVsaXN0KSksICJRdWllcmVzIGluc3RhbGFybG8gYWhvcmE/Wy9DT0xPUl0iLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXUluc3RhbGFyIHRlbWFbL0NPTE9SXVsvQl0iLCBub2xhYmVsPSJbQl1bQ09MT1IgcmVkXU5vWy9DT0xPUl1bL0JdIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2coIkxpc3RhIGRlIHRlbWFzOiAlcyAiICUgc3RyKHRoZW1lbGlzdCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IERJQUxPRy5zZWxlY3QoQURET05USVRMRSwgdGhlbWVsaXN0KQogICAgICAgICAgICAgICAgICAgICAgICB3aXoubG9nKCJUZW1hIHNlbGVjY2lvbmFkbzogJXMiICUgcmV0KQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgcmV0ID09IC0xOiB0aGVtZSA9IHRoZW1lbGlzdFtyZXRdOyBpbnN0YWxsdGhlbWUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGRlIHRlbWE6IENhbmNlbGFkbyFbL0NPTE9SXScgJSBDT0xPUjIpOyByZXR1cm4KICAgICAgICAgICAgICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgJ1tDT0xPUiAlc11JbnN0YWxhY2lvbiBkZSB0ZW1hOiBDYW5jZWxhZG8hWy9DT0xPUl0nICUgQ09MT1IyKTsgcmV0dXJuCiAgICAgICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGRlIHRlbWE6IE5vIGVuY29udHJhZG8hWy9DT0xPUl0nICUgQ09MT1IyKQogICAgICAgIGVsc2U6IGluc3RhbGx0aGVtZSA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgaW5zdGFsYXIgZWwgdGVtYTonICUgQ09MT1IyLCAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgdGhlbWUpLCAncGFyYSBbQ09MT1IgJXNdJXMgdiVzWy9DT0xPUl0/Wy9DT0xPUl0nICUgKENPTE9SMSwgbmFtZSwgd2l6LmNoZWNrQnVpbGQobmFtZSwndmVyc2lvbicpKSwgeWVzbGFiZWw9IltCXVtDT0xPUiBncmVlbl1JbnN0YWxhciB0ZW1hWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Ob1svQ09MT1JdWy9CXSIpCiAgICAgICAgaWYgaW5zdGFsbHRoZW1lOgogICAgICAgICAgICB0aGVtZXppcCA9IHdpei5jaGVja1RoZW1lKG5hbWUsIHRoZW1lLCAndXJsJykKICAgICAgICAgICAgemlwbmFtZSA9IG5hbWUucmVwbGFjZSgnXFwnLCAnJykucmVwbGFjZSgnLycsICcnKS5yZXBsYWNlKCc6JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPycsICcnKS5yZXBsYWNlKCciJywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKS5yZXBsYWNlKCd8JywgJycpCiAgICAgICAgICAgIGlmIG5vdCB3aXoud29ya2luZ1VSTCh0aGVtZXppcCkgPT0gVHJ1ZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdSW5zdGFsYWNpb24gZGUgdGVtYTogWmlwIG5vIHZhbGlkbyFbL0NPTE9SXScgJSBDT0xPUjIpOyByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKFBBQ0tBR0VTKTogb3MubWFrZWRpcnMoUEFDS0FHRVMpCiAgICAgICAgICAgIERQLmNyZWF0ZShBRERPTlRJVExFLCdbQ09MT1IgJXNdW0JdRGVzY2FyZ2FuZG86Wy9CXVsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgdGhlbWUpLCcnLCAnUG9yIGZhdm9yLCBlc3BlcmUuLi4nKQogICAgICAgICAgICBsaWI9b3MucGF0aC5qb2luKFBBQ0tBR0VTLCAnJXMuemlwJyAlIHppcG5hbWUpCiAgICAgICAgICAgIHRyeTogb3MucmVtb3ZlKGxpYikKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIGRvd25sb2FkZXIuZG93bmxvYWQodGhlbWV6aXAsIGxpYiwgRFApCiAgICAgICAgICAgIHhibWMuc2xlZXAoNTAwKQogICAgICAgICAgICBEUC51cGRhdGUoMCwiIiwgIkluc3RhbGFuZG8gJXMgIiAlIG5hbWUpCiAgICAgICAgICAgIHRlc3QgPSBGYWxzZQogICAgICAgICAgICBpZiB1cmwgbm90IGluIFsiZnJlc2giLCAibm9ybWFsIl06CiAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFRoZW1lKGxpYikgaWYgbm90IHdpei5jdXJyU2tpbigpIGluIFsnc2tpbi5jb25mbHVlbmNlJywgJ3NraW4uZXN0dWFyeSddIGVsc2UgRmFsc2UKICAgICAgICAgICAgICAgIHRlc3QyID0gdGVzdEd1aShsaWIpIGlmIG5vdCB3aXouY3VyclNraW4oKSBpbiBbJ3NraW4uY29uZmx1ZW5jZScsICdza2luLmVzdHVhcnknXSBlbHNlIEZhbHNlCiAgICAgICAgICAgICAgICBpZiB0ZXN0ID09IFRydWU6CiAgICAgICAgICAgICAgICAgICAgd2l6Lmxvb2thbmRGZWVsRGF0YSgnc2F2ZScpCiAgICAgICAgICAgICAgICAgICAgc2tpbiAgICAgPSAnc2tpbi5jb25mbHVlbmNlJyBpZiBLT0RJViA8IDE3IGVsc2UgJ3NraW4uZXN0dWFyeScKICAgICAgICAgICAgICAgICAgICBnb3Rvc2tpbiA9IHhibWMuZ2V0U2tpbkRpcigpCiAgICAgICAgICAgICAgICAgICAgI2lmIERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXUluc3RhbGxpbmcgdGhlIHRoZW1lIFtDT0xPUiAlc10lc1svQ09MT1JdIHJlcXVpcmVzIHRoZSBza2luIHRvIGJlIHN3YXBlZCBiYWNrIHRvIFtDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjIsIENPTE9SMSwgdGhlbWUsIENPTE9SMSwgc2tpbls1Ol0pLCAiV291bGQgeW91IGxpa2UgdG8gc3dpdGNoIHRoZSBza2luP1svQ09MT1JdIiwgeWVzbGFiZWw9IltCXVtDT0xPUiBncmVlbl1Td2l0Y2ggU2tpblsvQ09MT1JdWy9CXSIsIG5vbGFiZWw9IltCXVtDT0xPUiByZWRdRG9uJ3QgU3dpdGNoWy9DT0xPUl1bL0JdIik6CiAgICAgICAgICAgICAgICAgICAgc2tpblN3aXRjaC5zd2FwU2tpbnMoc2tpbikKICAgICAgICAgICAgICAgICAgICB4ID0gMAogICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMTAwMCkKICAgICAgICAgICAgICAgICAgICB3aGlsZSBub3QgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgiV2luZG93LmlzVmlzaWJsZSh5ZXNub2RpYWxvZykiKSBhbmQgeCA8IDE1MDoKICAgICAgICAgICAgICAgICAgICAgICAgeCArPSAxCiAgICAgICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMjAwKQogICAgICAgICAgICAgICAgICAgIGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoIldpbmRvdy5pc1Zpc2libGUoeWVzbm9kaWFsb2cpIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5lYmkoJ1NlbmRDbGljaygxMSknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGRlIHRlbWE6IFNlIGhhIGFnb3RhZG8gZWwgdGllbXBvIGRlIGNhbWJpbyBkZSBza2luIVsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybgogICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoNTAwKQogICAgICAgICAgICB0aXRsZSA9ICdbQ09MT1IgJXNdW0JdSW5zdGFsYW5kbyB0ZW1hOlsvQl1bL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IyLCBDT0xPUjEsIHRoZW1lKQogICAgICAgICAgICBEUC51cGRhdGUoMCwgdGl0bGUsJycsICdQb3IgZmF2b3IsIGVzcGVyZS4uLicpCiAgICAgICAgICAgIHBlcmNlbnQsIGVycm9ycywgZXJyb3IgPSBleHRyYWN0LmFsbChsaWIsSE9NRSxEUCwgdGl0bGU9dGl0bGUpCiAgICAgICAgICAgIHdpei5zZXRTKCdidWlsZHRoZW1lJywgdGhlbWUpCiAgICAgICAgICAgIHdpei5sb2coJ0lOU1RBTEFETyAlczogW0VSUk9SRVM6JXNdJyAlIChwZXJjZW50LCBlcnJvcnMpKQogICAgICAgICAgICBEUC5jbG9zZSgpCiAgICAgICAgICAgIGlmIHVybCBub3QgaW4gWyJmcmVzaCIsICJub3JtYWwiXTogCiAgICAgICAgICAgICAgICB3aXouZm9yY2VVcGRhdGUoKQogICAgICAgICAgICAgICAgaWYgS09ESVYgPj0gMTc6IHdpei5rb2RpMTdGaXgoKQogICAgICAgICAgICAgICAgaWYgdGVzdDIgPT0gVHJ1ZToKICAgICAgICAgICAgICAgICAgICB3aXoubG9va2FuZEZlZWxEYXRhKCdzYXZlJykKICAgICAgICAgICAgICAgICAgICB3aXouZGVmYXVsdFNraW4oKQogICAgICAgICAgICAgICAgICAgIGdvdG9za2luID0gd2l6LmdldFMoJ2RlZmF1bHRza2luJykKICAgICAgICAgICAgICAgICAgICBza2luU3dpdGNoLnN3YXBTa2lucyhnb3Rvc2tpbikKICAgICAgICAgICAgICAgICAgICB4ID0gMAogICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMTAwMCkKICAgICAgICAgICAgICAgICAgICB3aGlsZSBub3QgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgiV2luZG93LmlzVmlzaWJsZSh5ZXNub2RpYWxvZykiKSBhbmQgeCA8IDE1MDoKICAgICAgICAgICAgICAgICAgICAgICAgeCArPSAxCiAgICAgICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMjAwKQoKICAgICAgICAgICAgICAgICAgICBpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCJXaW5kb3cuaXNWaXNpYmxlKHllc25vZGlhbG9nKSIpOgogICAgICAgICAgICAgICAgICAgICAgICB3aXouZWJpKCdTZW5kQ2xpY2soMTEpJykKICAgICAgICAgICAgICAgICAgICB3aXoubG9va2FuZEZlZWxEYXRhKCdyZXN0b3JlJykKICAgICAgICAgICAgICAgIGVsaWYgdGVzdCA9PSBUcnVlOgogICAgICAgICAgICAgICAgICAgIHNraW5Td2l0Y2guc3dhcFNraW5zKGdvdG9za2luKQogICAgICAgICAgICAgICAgICAgIHggPSAwCiAgICAgICAgICAgICAgICAgICAgeGJtYy5zbGVlcCgxMDAwKQogICAgICAgICAgICAgICAgICAgIHdoaWxlIG5vdCB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCJXaW5kb3cuaXNWaXNpYmxlKHllc25vZGlhbG9nKSIpIGFuZCB4IDwgMTUwOgogICAgICAgICAgICAgICAgICAgICAgICB4ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgeGJtYy5zbGVlcCgyMDApCgogICAgICAgICAgICAgICAgICAgIGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoIldpbmRvdy5pc1Zpc2libGUoeWVzbm9kaWFsb2cpIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5lYmkoJ1NlbmRDbGljaygxMSknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGRlIHRlbWE6IFNlIGhhIGFnb3RhZG8gZWwgdGllbXBvIGRlIGNhbWJpbyBkZSBza2luIVsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybgogICAgICAgICAgICAgICAgICAgIHdpei5sb29rYW5kRmVlbERhdGEoJ3Jlc3RvcmUnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICB3aXouZWJpKCJSZWxvYWRTa2luKCkiKQogICAgICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMTAwMCkKICAgICAgICAgICAgICAgICAgICB3aXouZWJpKCJDb250YWluZXIuUmVmcmVzaCIpIAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGRlIHRlbWE6IENhbmNlbGFkbyFbL0NPTE9SXScgJSBDT0xPUjIpCgojZGVmIHRoaXJkUGFydHlJbnN0YWxsKG5hbWUsIHVybCk6CiMgICBpZiBub3Qgd2l6LndvcmtpbmdVUkwodXJsKToKIyAgICAgICBMb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUludmFsaWQgVVJMIGZvciBCdWlsZFsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybgojICAgdHlwZSA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVdvdWxkIHlvdSBsaWtlIHRvIHByZWZvcm0gYSBbQ09MT1IgJXNdRnJlc2ggSW5zdGFsbFsvQ09MT1JdIG9yIFtDT0xPUiAlc11Ob3JtYWwgSW5zdGFsbFsvQ09MT1JdIGZvcjpbL0NPTE9SXSIgJSAoQ09MT1IyLCBDT0xPUjEsIENPTE9SMSksICJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBuYW1lKSwgeWVzbGFiZWw9IltCXVtDT0xPUiBncmVlbl1GcmVzaCBJbnN0YWxsWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Ob3JtYWwgSW5zdGFsbFsvQ09MT1JdWy9CXSIpCiMgICBpZiB0eXBlID09IDE6CiMgICAgICAgZnJlc2hTdGFydCgndGhpcmQnLCBUcnVlKQojICAgd2l6LmNsZWFyUygnYnVpbGQnKQojICAgemlwbmFtZSA9IG5hbWUucmVwbGFjZSgnXFwnLCAnJykucmVwbGFjZSgnLycsICcnKS5yZXBsYWNlKCc6JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPycsICcnKS5yZXBsYWNlKCciJywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKS5yZXBsYWNlKCd8JywgJycpCiMgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoUEFDS0FHRVMpOiBvcy5tYWtlZGlycyhQQUNLQUdFUykKIyAgIERQLmNyZWF0ZShBRERPTlRJVExFLCdbQ09MT1IgJXNdW0JdRG93bmxvYWRpbmc6Wy9CXVsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSksJycsICdQbGVhc2UgV2FpdCcpCiMgICBsaWI9b3MucGF0aC5qb2luKFBBQ0tBR0VTLCAnJXMuemlwJyAlIHppcG5hbWUpCiMgICB0cnk6IG9zLnJlbW92ZShsaWIpCiMgICBleGNlcHQ6IHBhc3MKIyAgIGRvd25sb2FkZXIuZG93bmxvYWQodXJsLCBsaWIsIERQKQojICAgeGJtYy5zbGVlcCg1MDApCiMgICB0aXRsZSA9ICdbQ09MT1IgJXNdW0JdSW5zdGFsbGluZzpbL0JdWy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lKQojICAgRFAudXBkYXRlKDAsIHRpdGxlLCcnLCAnUGxlYXNlIFdhaXQnKQojICAgcGVyY2VudCwgZXJyb3JzLCBlcnJvciA9IGV4dHJhY3QuYWxsKGxpYixIT01FLERQLCB0aXRsZT10aXRsZSkKIyAgIGlmIGludChmbG9hdChwZXJjZW50KSkgPiAwOgojICAgICAgIHdpei5maXhtZXRhcygpCiMgICAgICAgd2l6Lmxvb2thbmRGZWVsRGF0YSgnc2F2ZScpCiMgICAgICAgd2l6LmRlZmF1bHRTa2luKCkKIyAgICAgICAjd2l6LmFkZG9uVXBkYXRlcygnc2V0JykKIyAgICAgICB3aXouc2V0UygnaW5zdGFsbGVkJywgJ3RydWUnKQojICAgICAgIHdpei5zZXRTKCdleHRyYWN0Jywgc3RyKHBlcmNlbnQpKQojICAgICAgIHdpei5zZXRTKCdlcnJvcnMnLCBzdHIoZXJyb3JzKSkKIyAgICAgICB3aXoubG9nKCdJTlNUQUxMRUQgJXM6IFtFUlJPUlM6JXNdJyAlIChwZXJjZW50LCBlcnJvcnMpKQojICAgICAgIHRyeTogb3MucmVtb3ZlKGxpYikKIyAgICAgICBleGNlcHQ6IHBhc3MKIyAgICAgICBpZiBpbnQoZmxvYXQoZXJyb3JzKSkgPiAwOgojICAgICAgICAgICB5ZXM9RElBTE9HLnllc25vKEFERE9OVElUTEUsICdbQ09MT1IgJXNdW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lKSwgJ0NvbXBsZXRlZDogW0NPTE9SICVzXSVzJXNbL0NPTE9SXSBbRXJyb3JzOltDT0xPUiAlc10lc1svQ09MT1JdXScgJSAoQ09MT1IxLCBwZXJjZW50LCAnJScsIENPTE9SMSwgZXJyb3JzKSwgJ1dvdWxkIHlvdSBsaWtlIHRvIHZpZXcgdGhlIGVycm9ycz9bL0NPTE9SXScsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdTm8gVGhhbmtzWy9DT0xPUl1bL0JdJyx5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXVZpZXcgRXJyb3JzWy9DT0xPUl1bL0JdJykKIyAgICAgICAgICAgaWYgeWVzOgojICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShlcnJvcnMsIHVuaWNvZGUpOgojICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IuZW5jb2RlKCd1dGYtOCcpCiMgICAgICAgICAgICAgICB3aXouVGV4dEJveChBRERPTlRJVExFLCBlcnJvcikKIyAgIERQLmNsb3NlKCkKIyAgIGlmIEtPRElWID49IDE3OiB3aXouYWRkb25EYXRhYmFzZShBRERPTl9JRCwgMSkKIyAgIGlmIElOU1RBTExNRVRIT0QgPT0gMTogdG9kbyA9IDEKIyAgIGVsaWYgSU5TVEFMTE1FVEhPRCA9PSAyOiB0b2RvID0gMAojICAgZWxzZTogdG9kbyA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVdvdWxkIHlvdSBsaWtlIHRvIFtDT0xPUiAlc11Gb3JjZSBjbG9zZVsvQ09MT1JdIGtvZGkgb3IgW0NPTE9SICVzXVJlbG9hZCBQcm9maWxlWy9DT0xPUl0/Wy9DT0xPUl0iICUgKENPTE9SMiwgQ09MT1IxLCBDT0xPUjEpLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVJlbG9hZCBQcm9maWxlWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Gb3JjZSBDbG9zZVsvQ09MT1JdWy9CXSIpCiMgICBpZiB0b2RvID09IDE6IHdpei5yZWxvYWRGaXgoKQojICAgZWxzZTogd2l6LmtpbGx4Ym1jKFRydWUpCgpkZWYgdGVzdFRoZW1lKHBhdGgpOgogICAgemZpbGUgPSB6aXBmaWxlLlppcEZpbGUocGF0aCkKICAgIGZvciBpdGVtIGluIHpmaWxlLmluZm9saXN0KCk6CiAgICAgICAgaWYgJy9zZXR0aW5ncy54bWwnIGluIGl0ZW0uZmlsZW5hbWU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICByZXR1cm4gRmFsc2UKCmRlZiB0ZXN0R3VpKHBhdGgpOgogICAgemZpbGUgPSB6aXBmaWxlLlppcEZpbGUocGF0aCkKICAgIGZvciBpdGVtIGluIHpmaWxlLmluZm9saXN0KCk6CiAgICAgICAgaWYgJy9ndWlzZXR0aW5ncy54bWwnIGluIGl0ZW0uZmlsZW5hbWU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICByZXR1cm4gRmFsc2UKCmRlZiBhcGtJbnN0YWxsZXIoYXBrLCB1cmwpOgogICAgd2l6LmxvZyhhcGspCiAgICB3aXoubG9nKHVybCkKICAgIGlmIHdpei5wbGF0Zm9ybSgpID09ICdhbmRyb2lkJzoKICAgICAgICB5ZXMgPSBESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIGRlc2NhcmdhciBlIGluc3RhbGFyOiIgJSBDT0xPUjIsICJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBhcGspLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVNpWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1DYW5jZWxhclsvQ09MT1JdWy9CXSIpCiAgICAgICAgaWYgbm90IHllczogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdRVJST1I6IEluc3RhbGFjaW9uIGNhbmNlbGFkYVsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybgogICAgICAgIGRpc3BsYXkgPSBhcGsKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoUEFDS0FHRVMpOiBvcy5tYWtlZGlycyhQQUNLQUdFUykKICAgICAgICBpZiBub3Qgd2l6LndvcmtpbmdVUkwodXJsKSA9PSBUcnVlOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgJ1tDT0xPUiAlc11JbnN0YWxhY2lvbiBkZSBhcHBzOiBVUkwgbm8gdmFsaWRhIVsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybgogICAgICAgIERQLmNyZWF0ZShBRERPTlRJVExFLCdbQ09MT1IgJXNdW0JdRGVzY2FyZ2FuZG86Wy9CXVsvQ09MT1JdIFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgZGlzcGxheSksJycsICdQb3IgZmF2b3IsIGVzcGVyZS4uLicpCiAgICAgICAgbGliPW9zLnBhdGguam9pbihQQUNLQUdFUywgIiVzLmFwayIgJSBhcGsucmVwbGFjZSgnXFwnLCAnJykucmVwbGFjZSgnLycsICcnKS5yZXBsYWNlKCc6JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPycsICcnKS5yZXBsYWNlKCciJywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKS5yZXBsYWNlKCd8JywgJycpKQogICAgICAgIHRyeTogb3MucmVtb3ZlKGxpYikKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkb3dubG9hZGVyLmRvd25sb2FkKHVybCwgbGliLCBEUCkKICAgICAgICB4Ym1jLnNsZWVwKDEwMCkKICAgICAgICBEUC5jbG9zZSgpCiAgICAgICAgbm90aWZ5LmFwa0luc3RhbGxlcihhcGspCiAgICAgICAgd2l6LmViaSgnU3RhcnRBbmRyb2lkQWN0aXZpdHkoIiIsImFuZHJvaWQuaW50ZW50LmFjdGlvbi5WSUVXIiwiYXBwbGljYXRpb24vdm5kLmFuZHJvaWQucGFja2FnZS1hcmNoaXZlIiwiZmlsZTonK2xpYisnIiknKQogICAgZWxzZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICdbQ09MT1IgJXNdRVJST1I6IEVzdG8gbm8gZXMgdW4gZGlzcG9zaXRpdm8gQW5kcm9pZFsvQ09MT1JdJyAlIENPTE9SMikKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMgTWlzY2VsYW5lYSAjIyMjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpkZWYgY3JlYXRlTWVudSh0eXBlLCBhZGQsIG5hbWUpOgogICAgaWYgICB0eXBlID09ICdzYXZlYWRkb24nOgogICAgICAgIG1lbnVfaXRlbXM9W10KICAgICAgICBhZGQyICA9IHVybGxpYi5xdW90ZV9wbHVzKGFkZC5sb3dlcigpLnJlcGxhY2UoJyAnLCAnJykpCiAgICAgICAgYWRkMyAgPSBhZGQucmVwbGFjZSgnRGVicmlkJywgJ1JlYWwgRGVicmlkJykKICAgICAgICBuYW1lMiA9IHVybGxpYi5xdW90ZV9wbHVzKG5hbWUubG93ZXIoKS5yZXBsYWNlKCcgJywgJycpKQogICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJ3VybCcsICdVUkwgUmVzb2x2ZXInKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTIgJSBuYW1lLnRpdGxlKCksICAgICAgICAgICAgICcgJykpCiAgICAgICAgbWVudV9pdGVtcy5hcHBlbmQoKFRIRU1FMyAlICdHdWFyZGFyICVzIERhdG9zJyAlIGFkZDMsICAgICAgICAgICAgICAgJ1J1blBsdWdpbihwbHVnaW46Ly8lcy8/bW9kZT1zYXZlJXMmbmFtZT0lcyknICUgICAgKEFERE9OX0lELCBhZGQyLCBuYW1lMikpKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTMgJSAnUmVzdHVyYXIgJXMgRGF0b3MnICUgYWRkMywgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPXJlc3RvcmUlcyZuYW1lPSVzKScgJSAoQURET05fSUQsIGFkZDIsIG5hbWUyKSkpCiAgICAgICAgbWVudV9pdGVtcy5hcHBlbmQoKFRIRU1FMyAlICdMaW1waWFyICVzIERhdG9zJyAlIGFkZDMsICAgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPWNsZWFyJXMmbmFtZT0lcyknICUgICAoQURET05fSUQsIGFkZDIsIG5hbWUyKSkpCiAgICBlbGlmIHR5cGUgPT0gJ3NhdmUnICAgIDoKICAgICAgICBtZW51X2l0ZW1zPVtdCiAgICAgICAgYWRkMiAgPSB1cmxsaWIucXVvdGVfcGx1cyhhZGQubG93ZXIoKS5yZXBsYWNlKCcgJywgJycpKQogICAgICAgIGFkZDMgID0gYWRkLnJlcGxhY2UoJ0RlYnJpZCcsICdSZWFsIERlYnJpZCcpCiAgICAgICAgbmFtZTIgPSB1cmxsaWIucXVvdGVfcGx1cyhuYW1lLmxvd2VyKCkucmVwbGFjZSgnICcsICcnKSkKICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKCd1cmwnLCAnVVJMIFJlc29sdmVyJykKICAgICAgICBtZW51X2l0ZW1zLmFwcGVuZCgoVEhFTUUyICUgbmFtZS50aXRsZSgpLCAgICAgICAgICAgICAnICcpKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTMgJSAnUmVnaXN0cmFyICVzJyAlIGFkZDMsICAgICAgICAgICAgICAgICdSdW5QbHVnaW4ocGx1Z2luOi8vJXMvP21vZGU9YXV0aCVzJm5hbWU9JXMpJyAlICAgIChBRERPTl9JRCwgYWRkMiwgbmFtZTIpKSkKICAgICAgICBtZW51X2l0ZW1zLmFwcGVuZCgoVEhFTUUzICUgJ0d1YXJkYXIgJXMgRGF0b3MnICUgYWRkMywgICAgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPXNhdmUlcyZuYW1lPSVzKScgJSAgICAoQURET05fSUQsIGFkZDIsIG5hbWUyKSkpCiAgICAgICAgbWVudV9pdGVtcy5hcHBlbmQoKFRIRU1FMyAlICdSZXN0dXJhciAlcyBEYXRvcycgJSBhZGQzLCAgICAgICAgICAgICdSdW5QbHVnaW4ocGx1Z2luOi8vJXMvP21vZGU9cmVzdG9yZSVzJm5hbWU9JXMpJyAlIChBRERPTl9JRCwgYWRkMiwgbmFtZTIpKSkKICAgICAgICBtZW51X2l0ZW1zLmFwcGVuZCgoVEhFTUUzICUgJ0ltcG9ydGFyICVzIERhdG9zJyAlIGFkZDMsICAgICAgICAgICAgICdSdW5QbHVnaW4ocGx1Z2luOi8vJXMvP21vZGU9aW1wb3J0JXMmbmFtZT0lcyknICUgIChBRERPTl9JRCwgYWRkMiwgbmFtZTIpKSkKICAgICAgICBtZW51X2l0ZW1zLmFwcGVuZCgoVEhFTUUzICUgJ0xpbXBpYXIgYWRkb24gJXMgRGF0b3MnICUgYWRkMywgICAgICAgICdSdW5QbHVnaW4ocGx1Z2luOi8vJXMvP21vZGU9YWRkb24lcyZuYW1lPSVzKScgJSAgIChBRERPTl9JRCwgYWRkMiwgbmFtZTIpKSkKICAgIGVsaWYgdHlwZSA9PSAnaW5zdGFsbCcgIDoKICAgICAgICBtZW51X2l0ZW1zPVtdCiAgICAgICAgbmFtZTIgPSB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTIgJSBuYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bkFkZG9uKCVzLCA/bW9kZT12aWV3YnVpbGQmbmFtZT0lcyknICAlIChBRERPTl9JRCwgbmFtZTIpKSkKICAgICAgICBtZW51X2l0ZW1zLmFwcGVuZCgoVEhFTUUzICUgJ0luc3RhbGFjaW9uIGxpbXBpYScsICAgICAgICAgICAgICAgICAgICAgJ1J1blBsdWdpbihwbHVnaW46Ly8lcy8/bW9kZT1pbnN0YWxsJm5hbWU9JXMmdXJsPWZyZXNoKScgICUgKEFERE9OX0lELCBuYW1lMikpKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTMgJSAnQWN0dWFsaXphY2lvbicsICAgICAgICAgICAgICAgICAgICAnUnVuUGx1Z2luKHBsdWdpbjovLyVzLz9tb2RlPWluc3RhbGwmbmFtZT0lcyZ1cmw9bm9ybWFsKScgJSAoQURET05fSUQsIG5hbWUyKSkpCiAgICAgICAgbWVudV9pdGVtcy5hcHBlbmQoKFRIRU1FMyAlICdSZW5zdGFsYXIgc2tpbiB5IGRhdG9zJywgICAgICAgICAgICAgICAgICAgICAgJ1J1blBsdWdpbihwbHVnaW46Ly8lcy8/bW9kZT1pbnN0YWxsJm5hbWU9JXMmdXJsPWd1aSknICAgICUgKEFERE9OX0lELCBuYW1lMikpKQogICAgICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTMgJSAnSW5mb3JtYWNpb24nLCAgICAgICAgICAgICAgICAgJ1J1blBsdWdpbihwbHVnaW46Ly8lcy8/bW9kZT1idWlsZGluZm8mbmFtZT0lcyknICAlIChBRERPTl9JRCwgbmFtZTIpKSkKICAgIG1lbnVfaXRlbXMuYXBwZW5kKChUSEVNRTIgJSAnJXMgT3BjaW9uZXMnICUgQURET05USVRMRSwgICAgICAgICAgICAgICdSdW5QbHVnaW4ocGx1Z2luOi8vJXMvP21vZGU9c2V0dGluZ3MpJyAlIEFERE9OX0lEKSkKICAgIHJldHVybiBtZW51X2l0ZW1zCgpkZWYgdG9nZ2xlQ2FjaGUoc3RhdGUpOgogICAgY2FjaGVsaXN0ID0gWydpbmNsdWRldmlkZW8nLCAnaW5jbHVkZWFsbCcsICdpbmNsdWRlYm9iJywgJ2luY2x1ZGVwaG9lbml4JywgJ2luY2x1ZGVzcGVjdG8nLCAnaW5jbHVkZWdlbmVzaXMnLCAnaW5jbHVkZWV4b2R1cycsICdpbmNsdWRlb25lY2hhbicsICdpbmNsdWRlc2FsdHMnLCAnaW5jbHVkZXNhbHRzbGl0ZSddCiAgICB0aXRsZWxpc3QgPSBbJ0luY2x1ZGUgVmlkZW8gQWRkb25zJywgJ0luY2x1ZGUgQWxsIEFkZG9ucycsICdJbmNsdWRlIEJvYicsICdJbmNsdWRlIFBob2VuaXgnLCAnSW5jbHVkZSBTcGVjdG8nLCAnSW5jbHVkZSBHZW5lc2lzJywgJ0luY2x1ZGUgRXhvZHVzJywgJ0luY2x1ZGUgT25lIENoYW5uZWwnLCAnSW5jbHVkZSBTYWx0cycsICdJbmNsdWRlIFNhbHRzIExpdGUgSEQnXQogICAgaWYgc3RhdGUgaW4gWyd0cnVlJywgJ2ZhbHNlJ106CiAgICAgICAgZm9yIGl0ZW0gaW4gY2FjaGVsaXN0OgogICAgICAgICAgICB3aXouc2V0UyhpdGVtLCBzdGF0ZSkKICAgIGVsc2U6CiAgICAgICAgaWYgbm90IHN0YXRlIGluIFsnaW5jbHVkZXZpZGVvJywgJ2luY2x1ZGVhbGwnXSBhbmQgd2l6LmdldFMoJ2luY2x1ZGVhbGwnKSA9PSAndHJ1ZSc6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGl0ZW0gPSB0aXRsZWxpc3RbY2FjaGVsaXN0LmluZGV4KHN0YXRlKV0KICAgICAgICAgICAgICAgIERJQUxPRy5vayhBRERPTlRJVExFLCAiW0NPTE9SICVzXVRpZW5lcyBxdWUgZGVzYWN0aXZhciBbQ09MT1IgJXNdSW5jbHVpciB0b2RvcyBsb3MgYWRkb25zWy9DT0xPUl0gcGFyYSBkZXNhY3RpdmFyWy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMiwgQ09MT1IxLCBDT0xPUjEsIGl0ZW0pKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdVG9nZ2xlIENhY2hlWy9DT0xPUl0iICUgQ09MT1IxLCAiW0NPTE9SICVzXUludmFsaWQgaWQ6ICVzWy9DT0xPUl0iICUgKENPTE9SMiwgc3RhdGUpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5ldyA9ICd0cnVlJyBpZiB3aXouZ2V0UyhzdGF0ZSkgPT0gJ2ZhbHNlJyBlbHNlICdmYWxzZScKICAgICAgICAgICAgd2l6LnNldFMoc3RhdGUsIG5ldykKCmRlZiBwbGF5VmlkZW8odXJsKToKICAgIGlmICd3YXRjaD92PScgaW4gdXJsOgogICAgICAgIGEsIGIgPSB1cmwuc3BsaXQoJz8nKQogICAgICAgIGZpbmQgPSBiLnNwbGl0KCcmJykKICAgICAgICBmb3IgaXRlbSBpbiBmaW5kOgogICAgICAgICAgICBpZiBpdGVtLnN0YXJ0c3dpdGgoJ3Y9Jyk6CiAgICAgICAgICAgICAgICB1cmwgPSBpdGVtWzI6XQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZTogY29udGludWUKICAgIGVsaWYgJ2VtYmVkJyBpbiB1cmwgb3IgJ3lvdXR1LmJlJyBpbiB1cmw6CiAgICAgICAgYSA9IHVybC5zcGxpdCgnLycpCiAgICAgICAgaWYgbGVuKGFbLTFdKSA+IDU6CiAgICAgICAgICAgIHVybCA9IGFbLTFdCiAgICAgICAgZWxpZiBsZW4oYVstMl0pID4gNToKICAgICAgICAgICAgdXJsID0gYVstMl0KICAgIHdpei5sb2coIllvdVR1YmUgVVJMOiAlcyIgJSB1cmwpCiAgICB5dC5QbGF5VmlkZW8odXJsKQoKZGVmIHZpZXdMb2dGaWxlKCk6CiAgICBtYWlubG9nID0gd2l6LkdyYWJfTG9nKFRydWUpCiAgICBvbGRsb2cgID0gd2l6LkdyYWJfTG9nKFRydWUsIFRydWUpCiAgICB3aGljaCA9IDA7IGxvZ3R5cGUgPSBtYWlubG9nCiAgICBpZiBub3Qgb2xkbG9nID09IEZhbHNlIGFuZCBub3QgbWFpbmxvZyA9PSBGYWxzZToKICAgICAgICB3aGljaCA9IERJQUxPRy5zZWxlY3QoQURET05USVRMRSwgWyJWZXIgJXMiICUgbWFpbmxvZy5yZXBsYWNlKExPRywgIiIpLCAiVmVyICVzIiAlIG9sZGxvZy5yZXBsYWNlKExPRywgIiIpXSkKICAgICAgICBpZiB3aGljaCA9PSAtMTogd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXVZlciBMb2dbL0NPTE9SXScgJSBDT0xPUjEsICdbQ09MT1IgJXNdVmVyIExvZyBDYW5jZWxhZG8hWy9DT0xPUl0nICUgQ09MT1IyKTsgcmV0dXJuCiAgICBlbGlmIG1haW5sb2cgPT0gRmFsc2UgYW5kIG9sZGxvZyA9PSBGYWxzZToKICAgICAgICB3aXouTG9nTm90aWZ5KCdbQ09MT1IgJXNdVmVyIGxvZ1svQ09MT1JdJyAlIENPTE9SMSwgJ1tDT0xPUiAlc11ObyBzZSBoYSBlbmNvbnRyYWRvIG5pbmd1biBsb2chWy9DT0xPUl0nICUgQ09MT1IyKQogICAgICAgIHJldHVybgogICAgZWxpZiBub3QgbWFpbmxvZyA9PSBGYWxzZTogd2hpY2ggPSAwCiAgICBlbGlmIG5vdCBvbGRsb2cgPT0gRmFsc2U6IHdoaWNoID0gMQogICAgCiAgICBsb2d0eXBlID0gbWFpbmxvZyBpZiB3aGljaCA9PSAwIGVsc2Ugb2xkbG9nCiAgICBtc2cgICAgID0gd2l6LkdyYWJfTG9nKEZhbHNlKSBpZiB3aGljaCA9PSAwIGVsc2Ugd2l6LkdyYWJfTG9nKEZhbHNlLCBUcnVlKQogICAgCiAgICB3aXouVGV4dEJveCgiJXMgLSAlcyIgJSAoQURET05USVRMRSwgbG9ndHlwZSksIG1zZykKCmRlZiBlcnJvckNoZWNraW5nKGxvZz1Ob25lLCBjb3VudD1Ob25lLCBhbGw9Tm9uZSk6CiAgICBpZiBsb2cgPT0gTm9uZToKICAgICAgICBtYWlubG9nID0gd2l6LkdyYWJfTG9nKFRydWUpCiAgICAgICAgb2xkbG9nICA9IHdpei5HcmFiX0xvZyhUcnVlLCBUcnVlKQogICAgICAgIGlmIG5vdCBvbGRsb2cgPT0gRmFsc2UgYW5kIG5vdCBtYWlubG9nID09IEZhbHNlOgogICAgICAgICAgICB3aGljaCA9IERJQUxPRy5zZWxlY3QoQURET05USVRMRSwgWyJWZXIgJXM6ICVzIGVycm9yKGVzKSIgJSAobWFpbmxvZy5yZXBsYWNlKExPRywgIiIpLCBlcnJvckNoZWNraW5nKG1haW5sb2csIFRydWUsIFRydWUpKSwgIlZlciAlczogJXMgZXJyb3IoZXMpIiAlIChvbGRsb2cucmVwbGFjZShMT0csICIiKSwgZXJyb3JDaGVja2luZyhvbGRsb2csIFRydWUsIFRydWUpKV0pCiAgICAgICAgICAgIGlmIHdoaWNoID09IC0xOiB3aXouTG9nTm90aWZ5KCdbQ09MT1IgJXNdVmVyIExvZ1svQ09MT1JdJyAlIENPTE9SMSwgJ1tDT0xPUiAlc11WZXIgbG9nIGNhbmNlbGFkbyFbL0NPTE9SXScgJSBDT0xPUjIpOyByZXR1cm4KICAgICAgICBlbGlmIG1haW5sb2cgPT0gRmFsc2UgYW5kIG9sZGxvZyA9PSBGYWxzZToKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXVZlciBsb2dbL0NPTE9SXScgJSBDT0xPUjEsICdbQ09MT1IgJXNdTm8gc2UgaGEgZW5jb250cmFkbyBuaW5ndW4gbG9nIVsvQ09MT1JdJyAlIENPTE9SMikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBub3QgbWFpbmxvZyA9PSBGYWxzZTogd2hpY2ggPSAwCiAgICAgICAgZWxpZiBub3Qgb2xkbG9nID09IEZhbHNlOiB3aGljaCA9IDEKICAgICAgICBsb2cgPSBtYWlubG9nIGlmIHdoaWNoID09IDAgZWxzZSBvbGRsb2cKICAgIGlmIGxvZyA9PSBGYWxzZToKICAgICAgICBpZiBjb3VudCA9PSBOb25lOgogICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11BcmNoaXZvIGRlIGxvZyBubyBlbmNvbnRyYWRvWy9DT0xPUl0iICUgQ09MT1IyKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBlbHNlOiAKICAgICAgICAgICAgcmV0dXJuIDAKICAgIGVsc2U6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMobG9nKToKICAgICAgICAgICAgZiA9IG9wZW4obG9nLG1vZGU9J3InKTsgYSA9IGYucmVhZCgpLnJlcGxhY2UoJ1xuJywgJycpLnJlcGxhY2UoJ1xyJywgJycpOyBmLmNsb3NlKCkKICAgICAgICAgICAgbWF0Y2ggPSByZS5jb21waWxlKCItLT5QeXRob24gY2FsbGJhY2svc2NyaXB0IHJldHVybmVkIHRoZSBmb2xsb3dpbmcgZXJyb3I8LS0oLis/KS0tPkVuZCBvZiBQeXRob24gc2NyaXB0IGVycm9yIHJlcG9ydDwtLSIpLmZpbmRhbGwoYSkKICAgICAgICAgICAgaWYgbm90IGNvdW50ID09IE5vbmU6CiAgICAgICAgICAgICAgICBpZiBhbGwgPT0gTm9uZTogCiAgICAgICAgICAgICAgICAgICAgeCA9IDAKICAgICAgICAgICAgICAgICAgICBmb3IgaXRlbSBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgQURET05fSUQgaW4gaXRlbTogeCArPSAxCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgKICAgICAgICAgICAgICAgIGVsc2U6IHJldHVybiBsZW4obWF0Y2gpCiAgICAgICAgICAgIGlmIGxlbihtYXRjaCkgPiAwOgogICAgICAgICAgICAgICAgeCA9IDA7IG1zZyA9ICIiCiAgICAgICAgICAgICAgICBmb3IgaXRlbSBpbiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICBpZiBhbGwgPT0gTm9uZSBhbmQgbm90IEFERE9OX0lEIGluIGl0ZW06IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgZWxzZTogCiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICAgICAgICAgICAgICBtc2cgKz0gIltDT0xPUiByZWRdRXJyb3IgTnVtZXJvICVzWy9DT0xPUl1cbihQeXRob25Ub0NwcEV4Y2VwdGlvbikgOiAtLT5QeXRob24gY2FsbGJhY2svc2NyaXB0IHJldHVybmVkIHRoZSBmb2xsb3dpbmcgZXJyb3I8LS0lcy0tPkVuZCBvZiBQeXRob24gc2NyaXB0IGVycm9yIHJlcG9ydDwtLVxuXG4iICUgKHgsIGl0ZW0ucmVwbGFjZSgnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywgJ1xuJykucmVwbGFjZSgnXFxcXCcsJ1xcJykucmVwbGFjZShIT01FLCAnJykpCiAgICAgICAgICAgICAgICBpZiB4ID4gMDoKICAgICAgICAgICAgICAgICAgICB3aXouVGV4dEJveChBRERPTlRJVExFLCBtc2cpCiAgICAgICAgICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KEFERE9OVElUTEUsICJObyBzZSBoYW4gZW5jb250cmFkbyBlcnJvcmVzIGVuIGVsIGxvZyIpCiAgICAgICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoQURET05USVRMRSwgIk5vIHNlIGhhbiBlbmNvbnRyYWRvIGVycm9yZXMgZW4gZWwgbG9nIikKICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KEFERE9OVElUTEUsICJObyBzZSBoYSBlbmNvbnRyYWRvIGVsIGFyY2hpdm8gbG9nIikKCkFDVElPTl9QUkVWSU9VU19NRU5VICAgICAgICAgICAgPSAgMTAgICAjIyBFU0MgYWN0aW9uCkFDVElPTl9OQVZfQkFDSyAgICAgICAgICAgICAgICAgPSAgOTIgICAjIyBCYWNrc3BhY2UgYWN0aW9uCkFDVElPTl9NT1ZFX0xFRlQgICAgICAgICAgICAgICAgPSAgIDEgICAjIyBMZWZ0IGFycm93IGtleQpBQ1RJT05fTU9WRV9SSUdIVCAgICAgICAgICAgICAgID0gICAyICAgIyMgUmlnaHQgYXJyb3cga2V5CkFDVElPTl9NT1ZFX1VQICAgICAgICAgICAgICAgICAgPSAgIDMgICAjIyBVcCBhcnJvdyBrZXkKQUNUSU9OX01PVkVfRE9XTiAgICAgICAgICAgICAgICA9ICAgNCAgICMjIERvd24gYXJyb3cga2V5CkFDVElPTl9NT1VTRV9XSEVFTF9VUCAgICAgICAgICAgPSAxMDQgICAjIyBNb3VzZSB3aGVlbCB1cApBQ1RJT05fTU9VU0VfV0hFRUxfRE9XTiAgICAgICAgID0gMTA1ICAgIyMgTW91c2Ugd2hlZWwgZG93bgpBQ1RJT05fTU9WRV9NT1VTRSAgICAgICAgICAgICAgID0gMTA3ICAgIyMgRG93biBhcnJvdyBrZXkKQUNUSU9OX1NFTEVDVF9JVEVNICAgICAgICAgICAgICA9ICAgNyAgICMjIE51bWJlciBQYWQgRW50ZXIKQUNUSU9OX0JBQ0tTUEFDRSAgICAgICAgICAgICAgICA9IDExMCAgICMjID8KQUNUSU9OX01PVVNFX0xFRlRfQ0xJQ0sgICAgICAgICA9IDEwMApBQ1RJT05fTU9VU0VfTE9OR19DTElDSyAgICAgICAgID0gMTA4CgpkZWYgTG9nVmlld2VyKGRlZmF1bHQ9Tm9uZSk6CiAgICBjbGFzcyBMb2dWaWV3ZXIoeGJtY2d1aS5XaW5kb3dYTUxEaWFsb2cpOgogICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCphcmdzLCoqa3dhcmdzKToKICAgICAgICAgICAgc2VsZi5kZWZhdWx0ID0ga3dhcmdzWydkZWZhdWx0J10KCiAgICAgICAgZGVmIG9uSW5pdChzZWxmKToKICAgICAgICAgICAgc2VsZi50aXRsZSAgICAgID0gMTAxCiAgICAgICAgICAgIHNlbGYubXNnICAgICAgICA9IDEwMgogICAgICAgICAgICBzZWxmLnNjcm9sbGJhciAgPSAxMDMKICAgICAgICAgICAgc2VsZi51cGxvYWQgICAgID0gMjAxCiAgICAgICAgICAgIHNlbGYua29kaSAgICAgICA9IDIwMgogICAgICAgICAgICBzZWxmLmtvZGlvbGQgICAgPSAyMDMKICAgICAgICAgICAgc2VsZi53aXphcmQgICAgID0gMjA0IAogICAgICAgICAgICBzZWxmLm9rYnV0dG9uICAgPSAyMDUgCiAgICAgICAgICAgIGYgPSBvcGVuKHNlbGYuZGVmYXVsdCwgJ3InKQogICAgICAgICAgICBzZWxmLmxvZ21zZyA9IGYucmVhZCgpCiAgICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgICAgICBzZWxmLnRpdGxlbXNnID0gIiVzOiAlcyIgJSAoQURET05USVRMRSwgc2VsZi5kZWZhdWx0LnJlcGxhY2UoTE9HLCAnJykucmVwbGFjZShBRERPTkRBVEEsICcnKSkKICAgICAgICAgICAgc2VsZi5zaG93ZGlhbG9nKCkKCiAgICAgICAgZGVmIHNob3dkaWFsb2coc2VsZik6CiAgICAgICAgICAgIHNlbGYuZ2V0Q29udHJvbChzZWxmLnRpdGxlKS5zZXRMYWJlbChzZWxmLnRpdGxlbXNnKQogICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi5tc2cpLnNldFRleHQod2l6LmhpZ2hsaWdodFRleHQoc2VsZi5sb2dtc2cpKQogICAgICAgICAgICBzZWxmLnNldEZvY3VzSWQoc2VsZi5zY3JvbGxiYXIpCiAgICAgICAgICAgIAogICAgICAgIGRlZiBvbkNsaWNrKHNlbGYsIGNvbnRyb2xJZCk6CiAgICAgICAgICAgIGlmICAgY29udHJvbElkID09IHNlbGYub2tidXR0b246IHNlbGYuY2xvc2UoKQogICAgICAgICAgICBlbGlmIGNvbnRyb2xJZCA9PSBzZWxmLnVwbG9hZDogc2VsZi5jbG9zZSgpOyB1cGxvYWRMb2cuTWFpbigpCiAgICAgICAgICAgIGVsaWYgY29udHJvbElkID09IHNlbGYua29kaToKICAgICAgICAgICAgICAgIG5ld21zZyA9IHdpei5HcmFiX0xvZyhGYWxzZSkKICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gd2l6LkdyYWJfTG9nKFRydWUpCiAgICAgICAgICAgICAgICBpZiBuZXdtc2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi50aXRsZW1zZyA9ICIlczogVmVyIGVycm9yIGRlbCBsb2ciICUgQURET05USVRMRQogICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0Q29udHJvbChzZWxmLm1zZykuc2V0VGV4dCgiRWwgYXJjaGl2byBsb2cgbm8gZXhpc3RlISIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGVtc2cgPSAiJXM6ICVzIiAlIChBRERPTlRJVExFLCBmaWxlbmFtZS5yZXBsYWNlKExPRywgJycpKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0Q29udHJvbChzZWxmLnRpdGxlKS5zZXRMYWJlbChzZWxmLnRpdGxlbXNnKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0Q29udHJvbChzZWxmLm1zZykuc2V0VGV4dCh3aXouaGlnaGxpZ2h0VGV4dChuZXdtc2cpKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Rm9jdXNJZChzZWxmLnNjcm9sbGJhcikKICAgICAgICAgICAgZWxpZiBjb250cm9sSWQgPT0gc2VsZi5rb2Rpb2xkOiAgCiAgICAgICAgICAgICAgICBuZXdtc2cgPSB3aXouR3JhYl9Mb2coRmFsc2UsIFRydWUpCiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHdpei5HcmFiX0xvZyhUcnVlLCBUcnVlKQogICAgICAgICAgICAgICAgaWYgbmV3bXNnID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGVtc2cgPSAiJXM6IFZlciBlcnJvciBkZWwgbG9nIiAlIEFERE9OVElUTEUKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi5tc2cpLnNldFRleHQoIkVsIGFyY2hpdm8gbG9nIG5vIGV4aXN0ZSEiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlbXNnID0gIiVzOiAlcyIgJSAoQURET05USVRMRSwgZmlsZW5hbWUucmVwbGFjZShMT0csICcnKSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi50aXRsZSkuc2V0TGFiZWwoc2VsZi50aXRsZW1zZykKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi5tc2cpLnNldFRleHQod2l6LmhpZ2hsaWdodFRleHQobmV3bXNnKSkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEZvY3VzSWQoc2VsZi5zY3JvbGxiYXIpCiAgICAgICAgICAgIGVsaWYgY29udHJvbElkID09IHNlbGYud2l6YXJkOgogICAgICAgICAgICAgICAgbmV3bXNnID0gd2l6LkdyYWJfTG9nKEZhbHNlLCBGYWxzZSwgVHJ1ZSkKICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gd2l6LkdyYWJfTG9nKFRydWUsIEZhbHNlLCBUcnVlKQogICAgICAgICAgICAgICAgaWYgbmV3bXNnID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGVtc2cgPSAiJXM6IFZlciBlcnJvciBkZWwgbG9nIiAlIEFERE9OVElUTEUKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi5tc2cpLnNldFRleHQoIkVsIGFyY2hpdm8gbG9nIG5vIGV4aXN0ZSEiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlbXNnID0gIiVzOiAlcyIgJSAoQURET05USVRMRSwgZmlsZW5hbWUucmVwbGFjZShBRERPTkRBVEEsICcnKSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi50aXRsZSkuc2V0TGFiZWwoc2VsZi50aXRsZW1zZykKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldENvbnRyb2woc2VsZi5tc2cpLnNldFRleHQod2l6LmhpZ2hsaWdodFRleHQobmV3bXNnKSkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEZvY3VzSWQoc2VsZi5zY3JvbGxiYXIpCiAgICAgICAgCiAgICAgICAgZGVmIG9uQWN0aW9uKHNlbGYsIGFjdGlvbik6CiAgICAgICAgICAgIGlmICAgYWN0aW9uID09IEFDVElPTl9QUkVWSU9VU19NRU5VOiBzZWxmLmNsb3NlKCkKICAgICAgICAgICAgZWxpZiBhY3Rpb24gPT0gQUNUSU9OX05BVl9CQUNLOiBzZWxmLmNsb3NlKCkKICAgIGlmIGRlZmF1bHQgPT0gTm9uZTogZGVmYXVsdCA9IHdpei5HcmFiX0xvZyhUcnVlKQogICAgbHYgPSBMb2dWaWV3ZXIoICJMb2dWaWV3ZXIueG1sIiAsIEFERE9OLmdldEFkZG9uSW5mbygncGF0aCcpLCAnRGVmYXVsdFNraW4nLCBkZWZhdWx0PWRlZmF1bHQpCiAgICBsdi5kb01vZGFsKCkKICAgIGRlbCBsdgoKZGVmIHJlbW92ZUFkZG9uKGFkZG9uLCBuYW1lLCBvdmVyPUZhbHNlKToKICAgIGlmIG5vdCBvdmVyID09IEZhbHNlOgogICAgICAgIHllcyA9IDEKICAgIGVsc2U6IAogICAgICAgIHllcyA9IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgZGVzaW5zdGFsYXIgZWwgc2lndWllbnRlIGFkZG9uPzonJSBDT0xPUjIsICdOb21icmU6IFtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjEsIG5hbWUpLCAnSUQ6IFtDT0xPUiAlc10lc1svQ09MT1JdWy9DT0xPUl0nICUgKENPTE9SMSwgYWRkb24pLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXUVsaW1pbmFyIGFkZG9uWy9DT0xPUl1bL0JdJywgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgbWFudGVuZXJbL0NPTE9SXVsvQl0nKQogICAgaWYgeWVzID09IDE6CiAgICAgICAgZm9sZGVyID0gb3MucGF0aC5qb2luKEFERE9OUywgYWRkb24pCiAgICAgICAgd2l6LmxvZygiRWxpbWluYW5kbyBBZGRvbiAlcyIgJSBhZGRvbikKICAgICAgICB3aXouY2xlYW5Ib3VzZShmb2xkZXIpCiAgICAgICAgeGJtYy5zbGVlcCgyMDApCiAgICAgICAgdHJ5OiBzaHV0aWwucm10cmVlKGZvbGRlcikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uICxlOiB3aXoubG9nKCJFcnJvciBlbGltaW5hbmRvICVzIiAlIGFkZG9uLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICByZW1vdmVBZGRvbkRhdGEoYWRkb24sIG5hbWUsIG92ZXIpCiAgICBpZiBvdmVyID09IEZhbHNlOgogICAgICAgIHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAiW0NPTE9SICVzXSVzIEVsaW1pbmFkb1svQ09MT1JdIiAlIChDT0xPUjIsIG5hbWUpKQoKZGVmIHJlbW92ZUFkZG9uRGF0YShhZGRvbiwgbmFtZT1Ob25lLCBvdmVyPUZhbHNlKToKICAgIGlmIGFkZG9uID09ICdhbGwnOgogICAgICAgIGlmIERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgZWxpbWluYXIgW0NPTE9SICVzXVRPRE9TWy9DT0xPUl0gbG9zIGRhdG9zIGRlbCBhZGRvbiBkZSB0dSBjYXJwZXRhIFVzZXJkYXRhP1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSksIHllc2xhYmVsPSdbQl1bQ09MT1IgZ3JlZW5dRWxpbWluYXIgZGF0b3NbL0NPTE9SXVsvQl0nLCBub2xhYmVsPSdbQl1bQ09MT1IgcmVkXU5vIGVsaW1pbmFyWy9DT0xPUl1bL0JdJyk6CiAgICAgICAgICAgIHdpei5jbGVhbkhvdXNlKEFERE9ORCkKICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KCdbQ09MT1IgJXNdRWxpbWluYXIgZGF0b3MgZGUgYWRkb25bL0NPTE9SXScgJSBDT0xPUjEsICdbQ09MT1IgJXNdQ2FuY2VsYWRvIVsvQ09MT1JdJyAlIENPTE9SMikKICAgIGVsaWYgYWRkb24gPT0gJ3VuaW5zdGFsbGVkJzoKICAgICAgICBpZiBESUFMT0cueWVzbm8oQURET05USVRMRSwgJ1tDT0xPUiAlc11RdWllcmVzIGVsaW1pbmFyIFtDT0xPUiAlc11UT0RPU1svQ09MT1JdIGxvcyBkYXRvcyBkZSBsb3MgYWRkb25zIGRlc2luc3RhbGFkb3MgZGUgdHUgY2FycGV0YSBVc2VyZGF0YT9bL0NPTE9SXScgJSAoQ09MT1IyLCBDT0xPUjEpLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXVJlbW92ZSBEYXRhWy9DT0xPUl1bL0JdJywgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1Eb25cJ3QgUmVtb3ZlWy9DT0xPUl1bL0JdJyk6CiAgICAgICAgICAgIHRvdGFsID0gMAogICAgICAgICAgICBmb3IgZm9sZGVyIGluIGdsb2IuZ2xvYihvcy5wYXRoLmpvaW4oQURET05ELCAnKicpKToKICAgICAgICAgICAgICAgIGZvbGRlcm5hbWUgPSBmb2xkZXIucmVwbGFjZShBRERPTkQsICcnKS5yZXBsYWNlKCdcXCcsICcnKS5yZXBsYWNlKCcvJywgJycpCiAgICAgICAgICAgICAgICBpZiBmb2xkZXJuYW1lIGluIEVYQ0xVREVTOiBwYXNzCiAgICAgICAgICAgICAgICBlbGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihBRERPTlMsIGZvbGRlcm5hbWUpKTogcGFzcwogICAgICAgICAgICAgICAgZWxzZTogd2l6LmNsZWFuSG91c2UoZm9sZGVyKTsgdG90YWwgKz0gMTsgd2l6LmxvZyhmb2xkZXIpOyBzaHV0aWwucm10cmVlKGZvbGRlcikKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXUVsaW1pbmFyIGNhcnBldGFzIGRlIGFkZG9ucyBkZXNpbnN0YWxhZG9zWy9DT0xPUl0nICUgQ09MT1IxLCAnW0NPTE9SICVzXSVzIENhcnBldGEocykgYm9ycmFkYXNbL0NPTE9SXScgJSAoQ09MT1IyLCB0b3RhbCkpCiAgICAgICAgZWxzZTogd2l6LkxvZ05vdGlmeSgnW0NPTE9SICVzXUVsaW1pbmFyIGRhdG9zIGRlIGFkZG9uWy9DT0xPUl0nICUgQ09MT1IxLCAnW0NPTE9SICVzXUNhbmNlbGFkbyFbL0NPTE9SXScgJSBDT0xPUjIpCiAgICBlbGlmIGFkZG9uID09ICdlbXB0eSc6CiAgICAgICAgaWYgRElBTE9HLnllc25vKEFERE9OVElUTEUsICdbQ09MT1IgJXNdUXVpZXJlcyBlbGltaW5hciBbQ09MT1IgJXNdVE9ET1NbL0NPTE9SXSBsb3MgZGF0b3MgZGUgbG9zIGFkZG9ucyBjb24gY2FycGV0YXMgdmFjaWFzIGRlIHR1IGNhcnBldGEgVXNlcmRhdGE/Wy9DT0xPUl0nICUgKENPTE9SMiwgQ09MT1IxKSwgeWVzbGFiZWw9J1tCXVtDT0xPUiBncmVlbl1SZW1vdmUgRGF0YVsvQ09MT1JdWy9CXScsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdRG9uXCd0IFJlbW92ZVsvQ09MT1JdWy9CXScpOgogICAgICAgICAgICB0b3RhbCA9IHdpei5lbXB0eWZvbGRlcihBRERPTkQpCiAgICAgICAgICAgIHdpei5Mb2dOb3RpZnkoJ1tDT0xPUiAlc11FbGltaW5hciBjYXJwZXRhcyB2YWNpYXNbL0NPTE9SXScgJSBDT0xPUjEsICdbQ09MT1IgJXNdJXMgQ2FycGV0YShzKSBib3JyYWRhc1svQ09MT1JdJyAlIChDT0xPUjIsIHRvdGFsKSkKICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KCdbQ09MT1IgJXNdRWxpbWluYXIgY2FycGV0YXNbL0NPTE9SXScgJSBDT0xPUjEsICdbQ09MT1IgJXNdQ2FuY2VsYWRvIVsvQ09MT1JdJyAlIENPTE9SMikKICAgIGVsc2U6CiAgICAgICAgYWRkb25fZGF0YSA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgJ2FkZG9uX2RhdGEnLCBhZGRvbikKICAgICAgICBpZiBhZGRvbiBpbiBFWENMVURFUzoKICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXUFkZG9uIHByb3RlZ2lkb1svQ09MT1JdIiAlIENPTE9SMSwgIltDT0xPUiAlc11ObyBzZSBwdWVkZSBlbGltaW5hciBsb3MgZGF0b3MgZGUgZXN0ZSBhZGRvblsvQ09MT1JdIiAlIENPTE9SMikKICAgICAgICBlbGlmIG9zLnBhdGguZXhpc3RzKGFkZG9uX2RhdGEpOiAgCiAgICAgICAgICAgIGlmIERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgZWxpbWluYXIgbG9zIGRhdG9zIHBhcmEgZWwgYWRkb246Wy9DT0xPUl0nICUgQ09MT1IyLCAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKENPTE9SMSwgYWRkb24pLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXUVsaW1pbmFyIGRhdG9zWy9DT0xPUl1bL0JdJywgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObyBlbGltaW5hclsvQ09MT1JdWy9CXScpOgogICAgICAgICAgICAgICAgd2l6LmNsZWFuSG91c2UoYWRkb25fZGF0YSkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBzaHV0aWwucm10cmVlKGFkZG9uX2RhdGEpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgd2l6LmxvZygiRXJyb3IgZWxpbWluYW5kbzogJXMiICUgYWRkb25fZGF0YSkKICAgICAgICAgICAgZWxzZTogCiAgICAgICAgICAgICAgICB3aXoubG9nKCdEYXRvcyBkZWwgYWRkb24gcGFyYSAlcyBubyBlbGltaW5hZG9zJyAlIGFkZG9uKQogICAgd2l6LnJlZnJlc2goKQoKZGVmIHJlc3RvcmVpdCh0eXBlKToKICAgIGlmIHR5cGUgPT0gJ2J1aWxkJzoKICAgICAgICB4ID0gZnJlc2hTdGFydCgncmVzdG9yZScpCiAgICAgICAgaWYgeCA9PSBGYWxzZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdUmVzdGF1cmFjaW9uIGxvY2FsIGNhbmNlbGFkYVsvQ09MT1JdIiAlIENPTE9SMik7IHJldHVybgogICAgaWYgbm90IHdpei5jdXJyU2tpbigpIGluIFsnc2tpbi5jb25mbHVlbmNlJywgJ3NraW4uZXN0dWFyeSddOgogICAgICAgIHdpei5za2luVG9EZWZhdWx0KCkKICAgIHdpei5yZXN0b3JlTG9jYWwodHlwZSkKCmRlZiByZXN0b3JlZXh0aXQodHlwZSk6CiAgICBpZiB0eXBlID09ICdidWlsZCc6CiAgICAgICAgeCA9IGZyZXNoU3RhcnQoJ3Jlc3RvcmUnKQogICAgICAgIGlmIHggPT0gRmFsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAiW0NPTE9SICVzXVJlc3RhdXJhY2lvbiBsb2NhbCBjYW5jZWxhZGFbL0NPTE9SXSIgJSBDT0xPUjIpOyByZXR1cm4KICAgIHdpei5yZXN0b3JlRXh0ZXJuYWwodHlwZSkKCmRlZiBidWlsZEluZm8obmFtZSk6CiAgICBpZiB3aXoud29ya2luZ1VSTChCVUlMREZJTEUpID09IFRydWU6CiAgICAgICAgaWYgd2l6LmNoZWNrQnVpbGQobmFtZSwgJ3VybCcpOgogICAgICAgICAgICBuYW1lLCB2ZXJzaW9uLCB1cmwsIGd1aSwga29kaSwgdGhlbWUsIGljb24sIGZhbmFydCwgcHJldmlldywgYWR1bHQsIGRlc2NyaXB0aW9uID0gd2l6LmNoZWNrQnVpbGQobmFtZSwgJ2FsbCcpCiAgICAgICAgICAgIGFkdWx0ID0gJ1llcycgaWYgYWR1bHQubG93ZXIoKSA9PSAneWVzJyBlbHNlICdObycKICAgICAgICAgICAgbXNnICA9ICJbQ09MT1IgJXNdVmVyc2lvbjpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXVtDUl0iICUgKENPTE9SMiwgQ09MT1IxLCBuYW1lKQogICAgICAgICAgICBtc2cgKz0gIltDT0xPUiAlc11OdW1lcm8gZGUgbGEgdmVyc2lvbjpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXVtDUl0iICUgKENPTE9SMiwgQ09MT1IxLCB2ZXJzaW9uKQogICAgICAgICAgICBpZiBub3QgdGhlbWUgPT0gImh0dHA6Ly8iOgogICAgICAgICAgICAgICAgdGhlbWVjb3VudCA9IHdpei50aGVtZUNvdW50KG5hbWUsIEZhbHNlKQogICAgICAgICAgICAgICAgbXNnICs9ICJbQ09MT1IgJXNdVGVtYShzKTpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXVtDUl0iICUgKENPTE9SMiwgQ09MT1IxLCAnLCAnLmpvaW4odGhlbWVjb3VudCkpCiAgICAgICAgICAgIG1zZyArPSAiW0NPTE9SICVzXVZlcnNpb24gZGUgS29kaTpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXVtDUl0iICUgKENPTE9SMiwgQ09MT1IxLCBrb2RpKQogICAgICAgICAgICBtc2cgKz0gIltDT0xPUiAlc11PdHJvczpbL0NPTE9SXSBbQ09MT1IgJXNdJXNbL0NPTE9SXVtDUl0iICUgKENPTE9SMiwgQ09MT1IxLCBhZHVsdCkKICAgICAgICAgICAgbXNnICs9ICJbQ09MT1IgJXNdRGVzY3JpcGNpb246Wy9DT0xPUl0gW0NPTE9SICVzXSVzWy9DT0xPUl1bQ1JdIiAlIChDT0xPUjIsIENPTE9SMSwgZGVzY3JpcHRpb24pCiAgICAgICAgICAgIHdpei5UZXh0Qm94KEFERE9OVElUTEUsIG1zZykKICAgICAgICBlbHNlOiB3aXoubG9nKCJOb21icmUgZGUgdmVyc2lvbiBubyB2YWxpZG8hIikKICAgIGVsc2U6IHdpei5sb2coIkFyY2hpdm8gZGUgdGV4dG8gbm8gdmFsaWRvOiAlcyIgJSBXT1JLSU5HVVJMKQoKZGVmIGJ1aWxkVmlkZW8obmFtZSk6CiAgICBpZiB3aXoud29ya2luZ1VSTChCVUlMREZJTEUpID09IFRydWU6CiAgICAgICAgdmlkZW9maWxlID0gd2l6LmNoZWNrQnVpbGQobmFtZSwgJ3ByZXZpZXcnKQogICAgICAgIGlmIHZpZGVvZmlsZSBhbmQgbm90IHZpZGVvZmlsZSA9PSAnaHR0cDovLyc6IHBsYXlWaWRlbyh2aWRlb2ZpbGUpCiAgICAgICAgZWxzZTogd2l6LmxvZygiWyVzXVZpZGVvIHByZXZpZXcgbm8gZGlzcG9uaWJsZSIgJSBuYW1lKQogICAgZWxzZTogd2l6LmxvZygiQXJjaGl2byBkZSB0ZXh0byBubyB2YWxpZG86ICVzIiAlIFdPUktJTkdVUkwpCgpkZWYgZGVwZW5kc0xpc3QocGx1Z2luKToKICAgIGFkZG9ueG1sID0gb3MucGF0aC5qb2luKEFERE9OUywgcGx1Z2luLCAnYWRkb24ueG1sJykKICAgIGlmIG9zLnBhdGguZXhpc3RzKGFkZG9ueG1sKToKICAgICAgICBzb3VyY2UgPSBvcGVuKGFkZG9ueG1sLG1vZGU9J3InKTsgbGluayA9IHNvdXJjZS5yZWFkKCk7IHNvdXJjZS5jbG9zZSgpOyAKICAgICAgICBtYXRjaCAgPSB3aXoucGFyc2VET00obGluaywgJ2ltcG9ydCcsIHJldD0nYWRkb24nKQogICAgICAgIGl0ZW1zICA9IFtdCiAgICAgICAgZm9yIGRlcGVuZHMgaW4gbWF0Y2g6CiAgICAgICAgICAgIGlmIG5vdCAneGJtYy5weXRob24nIGluIGRlcGVuZHM6CiAgICAgICAgICAgICAgICBpdGVtcy5hcHBlbmQoZGVwZW5kcykKICAgICAgICByZXR1cm4gaXRlbXMKICAgIHJldHVybiBbXQoKZGVmIG1hbmFnZVNhdmVEYXRhKGRvKToKICAgIGlmIGRvID09ICdpbXBvcnQnOgogICAgICAgIFRFTVAgPSBvcy5wYXRoLmpvaW4oQURET05EQVRBLCAndGVtcCcpCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKFRFTVApOiBvcy5tYWtlZGlycyhURU1QKQogICAgICAgIHNvdXJjZSA9IERJQUxPRy5icm93c2UoMSwgJ1tDT0xPUiAlc11TZWxlY2Npb25hIGxhIGNhcnBldGEgcGFyYSBndWFyZGFyIGxvcyBkYXRvcywgYXJjaGl2byBsbGFtYWRvIFNhdmVEYXRhLnppcFsvQ09MT1JdJyAlIENPTE9SMiwgJ2ZpbGVzJywgJy56aXAnLCBGYWxzZSwgRmFsc2UsIEhPTUUpCiAgICAgICAgaWYgbm90IHNvdXJjZS5lbmRzd2l0aCgnLnppcCcpOgogICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11FcnJvciBlbiBsYSBpbXBvcnRhY2lvbiBkZSBkYXRvcyFbL0NPTE9SXSIgJSAoQ09MT1IyKSkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgdGVtcGZpbGUgPSBvcy5wYXRoLmpvaW4oTVlCVUlMRFMsICdTYXZlRGF0YS56aXAnKQogICAgICAgIGdvdG8gPSB4Ym1jdmZzLmNvcHkoc291cmNlLCB0ZW1wZmlsZSkKICAgICAgICB3aXoubG9nKCIlcyIgJSBzdHIoZ290bykpCiAgICAgICAgZXh0cmFjdC5hbGwoeGJtYy50cmFuc2xhdGVQYXRoKHRlbXBmaWxlKSwgVEVNUCkKICAgICAgICB0cmFrdCAgPSBvcy5wYXRoLmpvaW4oVEVNUCwgJ3RyYWt0JykKICAgICAgICBsb2dpbiAgPSBvcy5wYXRoLmpvaW4oVEVNUCwgJ2xvZ2luJykKICAgICAgICBkZWJyaWQgPSBvcy5wYXRoLmpvaW4oVEVNUCwgJ2RlYnJpZCcpCiAgICAgICAgeCA9IDAKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyh0cmFrdCk6CiAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICBmaWxlcyA9IG9zLmxpc3RkaXIodHJha3QpCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyh0cmFrdGl0LlRSQUtURk9MRCk6IG9zLm1ha2VkaXJzKHRyYWt0aXQuVFJBS1RGT0xEKQogICAgICAgICAgICBmb3IgaXRlbSBpbiBmaWxlczoKICAgICAgICAgICAgICAgIG9sZCAgPSBvcy5wYXRoLmpvaW4odHJha3RpdC5UUkFLVEZPTEQsIGl0ZW0pCiAgICAgICAgICAgICAgICB0ZW1wID0gb3MucGF0aC5qb2luKHRyYWt0LCBpdGVtKQogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMob2xkKToKICAgICAgICAgICAgICAgICAgICBpZiBub3QgRElBTE9HLnllc25vKEFERE9OVElUTEUsICJbQ09MT1IgJXNdUXVpZXJlcyByZWVtcGxhemFyIGVsIGFjdHVhbCBbQ09MT1IgJXNdJXNbL0NPTE9SXSBhcmNoaXZvPyIgJSAoQ09MT1IyLCBDT0xPUjEsIGl0ZW0pLCB5ZXNsYWJlbD0iW0JdW0NPTE9SIGdyZWVuXVNpLCByZWVtcGxhemFyWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIHJlZF1Ob1svQ09MT1JdWy9CXSIpOiBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGVsc2U6IG9zLnJlbW92ZShvbGQpCiAgICAgICAgICAgICAgICBzaHV0aWwuY29weSh0ZW1wLCBvbGQpCiAgICAgICAgICAgIHRyYWt0aXQuaW1wb3J0bGlzdCgnYWxsJykKICAgICAgICAgICAgdHJha3RpdC50cmFrdEl0KCdyZXN0b3JlJywgJ2FsbCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMobG9naW4pOgogICAgICAgICAgICB4ICs9IDEKICAgICAgICAgICAgZmlsZXMgPSBvcy5saXN0ZGlyKGxvZ2luKQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobG9naW5pdC5MT0dJTkZPTEQpOiBvcy5tYWtlZGlycyhsb2dpbml0LkxPR0lORk9MRCkKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZmlsZXM6CiAgICAgICAgICAgICAgICBvbGQgID0gb3MucGF0aC5qb2luKGxvZ2luaXQuTE9HSU5GT0xELCBpdGVtKQogICAgICAgICAgICAgICAgdGVtcCA9IG9zLnBhdGguam9pbihsb2dpbiwgaXRlbSkKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKG9sZCk6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgcmVlbXBsYXphciBlbCBhY3R1YWwgW0NPTE9SICVzXSVzWy9DT0xPUl0gYXJjaGl2bz8iICUgKENPTE9SMiwgQ09MT1IxLCBpdGVtKSwgeWVzbGFiZWw9IltCXVtDT0xPUiBncmVlbl1TaSwgcmVlbXBsYXphclsvQ09MT1JdWy9CXSIsIG5vbGFiZWw9IltCXVtDT0xPUiByZWRdTm9bL0NPTE9SXVsvQl0iKTogY29udGludWUKICAgICAgICAgICAgICAgICAgICBlbHNlOiBvcy5yZW1vdmUob2xkKQogICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkodGVtcCwgb2xkKQogICAgICAgICAgICBsb2dpbml0LmltcG9ydGxpc3QoJ2FsbCcpCiAgICAgICAgICAgIGxvZ2luaXQubG9naW5JdCgncmVzdG9yZScsICdhbGwnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGRlYnJpZCk6CiAgICAgICAgICAgIHggKz0gMQogICAgICAgICAgICBmaWxlcyA9IG9zLmxpc3RkaXIoZGVicmlkKQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZGVicmlkaXQuUkVBTEZPTEQpOiBvcy5tYWtlZGlycyhkZWJyaWRpdC5SRUFMRk9MRCkKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZmlsZXM6CiAgICAgICAgICAgICAgICBvbGQgID0gb3MucGF0aC5qb2luKGRlYnJpZGl0LlJFQUxGT0xELCBpdGVtKQogICAgICAgICAgICAgICAgdGVtcCA9IG9zLnBhdGguam9pbihkZWJyaWQsIGl0ZW0pCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhvbGQpOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIHJlZW1wbGF6YXIgZWwgYWN0dWFsIFtDT0xPUiAlc10lc1svQ09MT1JdIGFyY2hpdm8/IiAlIChDT0xPUjIsIENPTE9SMSwgaXRlbSksIHllc2xhYmVsPSJbQl1bQ09MT1IgZ3JlZW5dU2ksIHJlZW1wbGF6YXJbL0NPTE9SXVsvQl0iLCBub2xhYmVsPSJbQl1bQ09MT1IgcmVkXU5vWy9DT0xPUl1bL0JdIik6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgZWxzZTogb3MucmVtb3ZlKG9sZCkKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5KHRlbXAsIG9sZCkKICAgICAgICAgICAgZGVicmlkaXQuaW1wb3J0bGlzdCgnYWxsJykKICAgICAgICAgICAgZGVicmlkaXQuZGVicmlkSXQoJ3Jlc3RvcmUnLCAnYWxsJykKICAgICAgICB3aXouY2xlYW5Ib3VzZShURU1QKQogICAgICAgIHdpei5yZW1vdmVGb2xkZXIoVEVNUCkKICAgICAgICBvcy5yZW1vdmUodGVtcGZpbGUpCiAgICAgICAgaWYgeCA9PSAwOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11FbCBndWFyZGFkbyBkZSBkYXRvcyBoYSBmYWxsYWRvWy9DT0xPUl0iICUgQ09MT1IyKQogICAgICAgIGVsc2U6IHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAiW0NPTE9SICVzXUd1YXJkYWRvIGRlIGRhdG9zIGNvbXBsZXRhZG9bL0NPTE9SXSIgJSBDT0xPUjIpCiAgICBlbGlmIGRvID09ICdleHBvcnQnOgogICAgICAgIG15YnVpbGRzID0geGJtYy50cmFuc2xhdGVQYXRoKE1ZQlVJTERTKQogICAgICAgIGRpciA9IFt0cmFrdGl0LlRSQUtURk9MRCwgZGVicmlkaXQuUkVBTEZPTEQsIGxvZ2luaXQuTE9HSU5GT0xEXQogICAgICAgIHRyYWt0aXQudHJha3RJdCgndXBkYXRlJywgJ2FsbCcpCiAgICAgICAgbG9naW5pdC5sb2dpbkl0KCd1cGRhdGUnLCAnYWxsJykKICAgICAgICBkZWJyaWRpdC5kZWJyaWRJdCgndXBkYXRlJywgJ2FsbCcpCiAgICAgICAgc291cmNlID0gRElBTE9HLmJyb3dzZSgzLCAnW0NPTE9SICVzXVNlbGVjY2lvbmEgZG9uZGUgZGVzZWFzIGV4cG9ydGFyIGxvcyBkYXRvcywgZWwgYXJjaGl2byBsbGFtYWRvIHNhdmVkYXRhIHppcD9bL0NPTE9SXScgJSBDT0xPUjIsICdmaWxlcycsICcnLCBGYWxzZSwgVHJ1ZSwgSE9NRSkKICAgICAgICBzb3VyY2UgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoc291cmNlKQogICAgICAgIHRlbXB6aXAgPSBvcy5wYXRoLmpvaW4obXlidWlsZHMsICdTYXZlRGF0YS56aXAnKQogICAgICAgIHppcGYgPSB6aXBmaWxlLlppcEZpbGUodGVtcHppcCwgbW9kZT0ndycpCiAgICAgICAgZm9yIGZvbGQgaW4gZGlyOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmb2xkKToKICAgICAgICAgICAgICAgIGZpbGVzID0gb3MubGlzdGRpcihmb2xkKQogICAgICAgICAgICAgICAgZm9yIGZpbGUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgemlwZi53cml0ZShvcy5wYXRoLmpvaW4oZm9sZCwgZmlsZSksIG9zLnBhdGguam9pbihmb2xkLCBmaWxlKS5yZXBsYWNlKEFERE9OREFUQSwgJycpLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgICB6aXBmLmNsb3NlKCkKICAgICAgICBpZiBzb3VyY2UgPT0gbXlidWlsZHM6CiAgICAgICAgICAgIERJQUxPRy5vayhBRERPTlRJVExFLCAiW0NPTE9SICVzXURhdG9zIGd1YXJkYWRvcyBlbjpbL0NPTE9SXSIgJSAoQ09MT1IyKSwgIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIHRlbXB6aXApKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHhibWN2ZnMuY29weSh0ZW1wemlwLCBvcy5wYXRoLmpvaW4oc291cmNlLCAnU2F2ZURhdGEuemlwJykpCiAgICAgICAgICAgICAgICBESUFMT0cub2soQURET05USVRMRSwgIltDT0xPUiAlc11EYXRvcyBndWFyZGFkb3MgZW46Wy9DT0xPUl0iICUgKENPTE9SMiksICJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBvcy5wYXRoLmpvaW4oc291cmNlLCAnU2F2ZURhdGEuemlwJykpKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBESUFMT0cub2soQURET05USVRMRSwgIltDT0xPUiAlc11EYXRvcyBndWFyZGFkb3MgZW46Wy9DT0xPUl0iICUgKENPTE9SMiksICJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCB0ZW1wemlwKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIEluc3RhbGFjaW9uIGxpbXBpYSAjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiBmcmVzaFN0YXJ0KGluc3RhbGw9Tm9uZSwgb3Zlcj1GYWxzZSk6CiAgICBpZiBLRUVQVFJBS1QgPT0gJ3RydWUnOgogICAgICAgIHRyYWt0aXQuYXV0b1VwZGF0ZSgnYWxsJykKICAgICAgICB3aXouc2V0UygndHJha3RsYXN0c2F2ZScsIHN0cihUSFJFRURBWVMpKQogICAgaWYgS0VFUFJFQUwgPT0gJ3RydWUnOgogICAgICAgIGRlYnJpZGl0LmF1dG9VcGRhdGUoJ2FsbCcpCiAgICAgICAgd2l6LnNldFMoJ2RlYnJpZGxhc3RzYXZlJywgc3RyKFRIUkVFREFZUykpCiAgICBpZiBLRUVQTE9HSU4gPT0gJ3RydWUnOgogICAgICAgIGxvZ2luaXQuYXV0b1VwZGF0ZSgnYWxsJykKICAgICAgICB3aXouc2V0UygnbG9naW5sYXN0c2F2ZScsIHN0cihUSFJFRURBWVMpKQogICAgaWYgb3ZlciA9PSBUcnVlOiB5ZXNfcHJlc3NlZCA9IDEKICAgIGVsaWYgaW5zdGFsbCA9PSAncmVzdG9yZSc6IHllc19wcmVzc2VkPURJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgcmVzdGF1cmFyIHR1IiAlIENPTE9SMiwgIkNvbmZpZ3VyYWNpb24gZGUgS29kaSBhIGxvcyB2YWxvcmVzIHBvciBkZWZlY3RvIiwgIkFudGVzIGRlIHJlc3R1YXIgZWwgYmFja3VwIGxvY2FsP1svQ09MT1JdIiwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgQ2FuY2VsYXJbL0NPTE9SXVsvQl0nLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXUNvbnRpbnVhclsvQ09MT1JdWy9CXScpCiAgICBlbGlmIGluc3RhbGw6IHllc19wcmVzc2VkPURJQUxPRy55ZXNubyhBRERPTlRJVExFLCAiW0NPTE9SICVzXVF1aWVyZXMgcmVzdGF1cmFyIHR1IiAlIENPTE9SMiwgIkNvbmZpZ3VyYWNpb24gZGUgS29kaSBhIGxvcyB2YWxvcmVzIHBvciBkZWZlY3RvIiwgIkFudGVzIGRlIGluc3RhbGFyIFtDT0xPUiAlc10lc1svQ09MT1JdPyIgJSAoQ09MT1IxLCBpbnN0YWxsKSwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgQ2FuY2VsYXJbL0NPTE9SXVsvQl0nLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXUNvbnRpbnVhclsvQ09MT1JdWy9CXScpCiAgICBlbHNlOiB5ZXNfcHJlc3NlZD1ESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11RdWllcmVzIHJlc3RhdXJhciB0dSIgJSBDT0xPUjIsICJDb25maWd1cmFjaW9uIGRlIEtvZGkgYSBsb3MgdmFsb3JlcyBwb3IgZGVmZWN0b1svQ09MT1JdIiwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1ObywgQ2FuY2VsYXJbL0NPTE9SXVsvQl0nLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXUNvbnRpbnVhclsvQ09MT1JdWy9CXScpCiAgICBpZiB5ZXNfcHJlc3NlZDoKICAgICAgICBpZiBub3Qgd2l6LmN1cnJTa2luKCkgaW4gWydza2luLmNvbmZsdWVuY2UnLCAnc2tpbi5lc3R1YXJ5J106CiAgICAgICAgICAgIHNraW4gPSAnc2tpbi5jb25mbHVlbmNlJyBpZiBLT0RJViA8IDE3IGVsc2UgJ3NraW4uZXN0dWFyeScKICAgICAgICAgICAgI3llcz1ESUFMT0cueWVzbm8oQURET05USVRMRSwgIltDT0xPUiAlc11UZW5lbW9zIHF1ZSBjYW1iaWFyIGxhIHNraW4gYSAgW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMiwgQ09MT1IxLCBza2luWzU6XSksICJBbnRlcyBkZSBoYWNlciB1bmEgbGltcGllemEgdG90YWwgZGUgbGFzIHRleHR5cmFzLCIsICJRdWllcmVzIHF1ZSBsbyBoYWdhP1svQ09MT1JdIiwgeWVzbGFiZWw9IltCXVtDT0xPUiBncmVlbl1DYW1iaWEgZGUgc2tpblsvQ09MT1JdWy9CXSIsIG5vbGFiZWw9IltCXVtDT0xPUiByZWRdTG8gaGFyZSB5b1svQ09MT1JdWy9CXSI7CiAgICAgICAgICAgICNpZiB5ZXM6CiAgICAgICAgICAgIHNraW5Td2l0Y2guc3dhcFNraW5zKHNraW4pCiAgICAgICAgICAgIHggPSAwCiAgICAgICAgICAgIHhibWMuc2xlZXAoMTAwMCkKICAgICAgICAgICAgd2hpbGUgbm90IHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoIldpbmRvdy5pc1Zpc2libGUoeWVzbm9kaWFsb2cpIikgYW5kIHggPCAxNTA6CiAgICAgICAgICAgICAgICB4ICs9IDEKICAgICAgICAgICAgICAgIHhibWMuc2xlZXAoMjAwKQogICAgICAgICAgICAgICAgd2l6LmViaSgnU2VuZEFjdGlvbihTZWxlY3QpJykKICAgICAgICAgICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgiV2luZG93LmlzVmlzaWJsZSh5ZXNub2RpYWxvZykiKToKICAgICAgICAgICAgICAgIHdpei5lYmkoJ1NlbmRDbGljaygxMSknKQogICAgICAgICAgICBlbHNlOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgJ1tDT0xPUiAlc11JbnN0YWxhaWNvbiBsaW1waWE6IFRpZW1wbyBwYXJhIGNhbWJpbyBkZSBza2luZyBhZ290YWRvIVsvQ09MT1JdJyAlIENPTE9SMik7IHJldHVybiBGYWxzZQogICAgICAgICAgICB4Ym1jLnNsZWVwKDEwMDApCiAgICAgICAgaWYgbm90IHdpei5jdXJyU2tpbigpIGluIFsnc2tpbi5jb25mbHVlbmNlJywgJ3NraW4uZXN0dWFyeSddOgogICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgJ1tDT0xPUiAlc11JbnN0YWxhaWNvbiBsaW1waWE6IEhhIGZhbGxhZG8gZWwgY2FtYmlvIGRlIHNraW4hWy9DT0xPUl0nICUgQ09MT1IyKQogICAgICAgICAgICByZXR1cm4KICAgICAgICB3aXouYWRkb25VcGRhdGVzKCdzZXQnKQogICAgICAgIHhibWNQYXRoPW9zLnBhdGguYWJzcGF0aChIT01FKQogICAgICAgIERQLmNyZWF0ZShBRERPTlRJVExFLCJbQ09MT1IgJXNdQ2FsY3VsYW5kbyBhcmNoaXZvcyB5IGNhcnBldGFzIiAlIENPTE9SMiwnJywgJ1BvciBmYXZvciwgZXNwZXJhWy9DT0xPUl0nKQogICAgICAgIHRvdGFsX2ZpbGVzID0gc3VtKFtsZW4oZmlsZXMpIGZvciByLCBkLCBmaWxlcyBpbiBvcy53YWxrKHhibWNQYXRoKV0pOyBkZWxfZmlsZSA9IDAKICAgICAgICBEUC51cGRhdGUoMCwgIltDT0xPUiAlc11SZXZpc2FuZG8gbGlzdGEgZGUgZXhjbHVzaW9uLiIgJSBDT0xPUjIpCiAgICAgICAgRVhDTFVERVMuYXBwZW5kKCdTYWxvbkRpZ2l0YWxfQmFja3VwJykKICAgICAgICBFWENMVURFUy5hcHBlbmQoJ2FyY2hpdmVfY2FjaGUnKQogICAgICAgIGlmIEtFRVBSRVBPUyA9PSAndHJ1ZSc6CiAgICAgICAgICAgIHJlcG9zID0gZ2xvYi5nbG9iKG9zLnBhdGguam9pbihBRERPTlMsICdyZXBvKi8nKSkKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gcmVwb3M6CiAgICAgICAgICAgICAgICByZXBvZm9sZGVyID0gb3MucGF0aC5zcGxpdChpdGVtWzotMV0pWzFdCiAgICAgICAgICAgICAgICBpZiBub3QgcmVwb2ZvbGRlciA9PSBFWENMVURFUzoKICAgICAgICAgICAgICAgICAgICBFWENMVURFUy5hcHBlbmQocmVwb2ZvbGRlcikKICAgICAgICBpZiBLRUVQU1VQRVIgPT0gJ3RydWUnOgogICAgICAgICAgICBFWENMVURFUy5hcHBlbmQoJ3BsdWdpbi5wcm9ncmFtLnN1cGVyLmZhdm91cml0ZXMnKQogICAgICAgIGlmIEtFRVBXSElURUxJU1QgPT0gJ3RydWUnOgogICAgICAgICAgICBwdnIgPSAnJwogICAgICAgICAgICB3aGl0ZWxpc3QgPSB3aXoud2hpdGVMaXN0KCdyZWFkJykKICAgICAgICAgICAgaWYgbGVuKHdoaXRlbGlzdCkgPiAwOgogICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gd2hpdGVsaXN0OgogICAgICAgICAgICAgICAgICAgIHRyeTogbmFtZSwgaWQsIGZvbGQgPSBpdGVtCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgICAgICAgICAgaWYgZm9sZC5zdGFydHN3aXRoKCdwdnInKTogcHZyID0gaWQgCiAgICAgICAgICAgICAgICAgICAgZGVwZW5kcyA9IGRlcGVuZHNMaXN0KGZvbGQpCiAgICAgICAgICAgICAgICAgICAgZm9yIHBsdWcgaW4gZGVwZW5kczoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHBsdWcgaW4gRVhDTFVERVM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFWENMVURFUy5hcHBlbmQocGx1ZykKICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kczIgPSBkZXBlbmRzTGlzdChwbHVnKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcGx1ZzIgaW4gZGVwZW5kczI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgcGx1ZzIgaW4gRVhDTFVERVM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRVhDTFVERVMuYXBwZW5kKHBsdWcyKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBmb2xkIGluIEVYQ0xVREVTOgogICAgICAgICAgICAgICAgICAgICAgICBFWENMVURFUy5hcHBlbmQoZm9sZCkKICAgICAgICAgICAgICAgIGlmIG5vdCBwdnIgPT0gJyc6IHdpei5zZXRTKCdwdnJjbGllbnQnLCBmb2xkKQogICAgICAgIGlmIHdpei5nZXRTKCdwdnJjbGllbnQnKSA9PSAnJzoKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gRVhDTFVERVM6CiAgICAgICAgICAgICAgICBpZiBpdGVtLnN0YXJ0c3dpdGgoJ3B2cicpOgogICAgICAgICAgICAgICAgICAgIHdpei5zZXRTKCdwdnJjbGllbnQnLCBpdGVtKQogICAgICAgIERQLnVwZGF0ZSgwLCAiW0NPTE9SICVzXUxpbXBpYW5kbyBhcmNoaXZvcyB5IGNhcnBldGFzOiIgJSBDT0xPUjIpCiAgICAgICAgbGF0ZXN0QWRkb25EQiA9IHdpei5sYXRlc3REQignQWRkb25zJykKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh4Ym1jUGF0aCx0b3Bkb3duPVRydWUpOgogICAgICAgICAgICBkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBFWENMVURFU10KICAgICAgICAgICAgZm9yIG5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICBkZWxfZmlsZSArPSAxCiAgICAgICAgICAgICAgICBmb2xkID0gcm9vdC5yZXBsYWNlKCcvJywnXFwnKS5zcGxpdCgnXFwnKQogICAgICAgICAgICAgICAgeCA9IGxlbihmb2xkKS0xCiAgICAgICAgICAgICAgICBpZiBuYW1lID09ICdzb3VyY2VzLnhtbCcgYW5kIGZvbGRbLTFdID09ICd1c2VyZGF0YScgYW5kIEtFRVBTT1VSQ0VTID09ICd0cnVlJzogd2l6LmxvZygiTWFudGVuZXIgZnVlbnRlczogJXMiICUgb3MucGF0aC5qb2luKHJvb3QsIG5hbWUpLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICAgICAgICAgIGVsaWYgbmFtZSA9PSAnZmF2b3VyaXRlcy54bWwnIGFuZCBmb2xkWy0xXSA9PSAndXNlcmRhdGEnIGFuZCBLRUVQRkFWUyA9PSAndHJ1ZSc6IHdpei5sb2coIk1hbnRlbmVyIGZhdm9yaXRvczogJXMiICUgb3MucGF0aC5qb2luKHJvb3QsIG5hbWUpLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICAgICAgICAgIGVsaWYgbmFtZSA9PSAncHJvZmlsZXMueG1sJyBhbmQgZm9sZFstMV0gPT0gJ3VzZXJkYXRhJyBhbmQgS0VFUFBST0ZJTEVTID09ICd0cnVlJzogd2l6LmxvZygiTWFudGVuZXIgcGVyZmlsZXM6ICVzIiAlIG9zLnBhdGguam9pbihyb290LCBuYW1lKSwgeGJtYy5MT0dOT1RJQ0UpCiAgICAgICAgICAgICAgICBlbGlmIG5hbWUgPT0gJ2FkdmFuY2Vkc2V0dGluZ3MueG1sJyBhbmQgZm9sZFstMV0gPT0gJ3VzZXJkYXRhJyBhbmQgS0VFUEFEVkFOQ0VEID09ICd0cnVlJzogIHdpei5sb2coIk1hbnRlbmVyIEFkdmFuY2VkU2V0dGluZ3M6ICVzIiAlIG9zLnBhdGguam9pbihyb290LCBuYW1lKSwgeGJtYy5MT0dOT1RJQ0UpCiAgICAgICAgICAgICAgICBlbGlmIG5hbWUgaW4gTE9HRklMRVM6IHdpei5sb2coIk1hbnRlbmVyIGFyY2hpdm8gZGUgbG9nOiAlcyIgJSBuYW1lLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICAgICAgICAgIGVsaWYgbmFtZS5lbmRzd2l0aCgnLmRiJyk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBpZiBuYW1lID09IGxhdGVzdEFkZG9uREIgYW5kIEtPRElWID49IDE3OiB3aXoubG9nKCJJZ25vcmFuZG8gJXMgZW4gdiVzIiAlIChuYW1lLCBLT0RJViksIHhibWMuTE9HTk9USUNFKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiBvcy5yZW1vdmUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiwgZTogCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBuYW1lLnN0YXJ0c3dpdGgoJ1RleHR1cmVzMTMnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2coJ0ZhbGxvIGFsIGJvcnJhciwgcHVyZ2FuZG8gREInLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2coIi0+ICVzIiAlIChzdHIoZSkpLCB4Ym1jLkxPR05PVElDRSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpei5wdXJnZURiKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBEUC51cGRhdGUoaW50KHdpei5wZXJjZW50YWdlKGRlbF9maWxlLCB0b3RhbF9maWxlcykpLCAnJywgJ1tDT0xPUiAlc11BcmNoaXZvOiBbL0NPTE9SXVtDT0xPUiAlc10lc1svQ09MT1JdJyAlIChDT0xPUjIsIENPTE9SMSwgbmFtZSksICcnKQogICAgICAgICAgICAgICAgICAgIHRyeTogb3MucmVtb3ZlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24sIGU6IAogICAgICAgICAgICAgICAgICAgICAgICB3aXoubG9nKCJFcnJvciBlbGltaW5hbmRvICVzIiAlIG9zLnBhdGguam9pbihyb290LCBuYW1lKSwgeGJtYy5MT0dOT1RJQ0UpCiAgICAgICAgICAgICAgICAgICAgICAgIHdpei5sb2coIi0+IC8gJXMiICUgKHN0cihlKSksIHhibWMuTE9HTk9USUNFKQogICAgICAgICAgICBpZiBEUC5pc2NhbmNlbGVkKCk6IAogICAgICAgICAgICAgICAgRFAuY2xvc2UoKQogICAgICAgICAgICAgICAgd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdSW5zdGFsYWNpb24gbGltcGlhIGNhbmNlbGFkYVsvQ09MT1JdIiAlIENPTE9SMikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHhibWNQYXRoLHRvcGRvd249VHJ1ZSk6CiAgICAgICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIEVYQ0xVREVTXQogICAgICAgICAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgICAgICAgICAgRFAudXBkYXRlKDEwMCwgJycsICdMaW1waWFuZG8gY2FycGV0YXMgdmFjaWFzOiBbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoQ09MT1IxLCBuYW1lKSwgJycpCiAgICAgICAgICAgICAgICBpZiBuYW1lIG5vdCBpbiBbIkRhdGFiYXNlIiwidXNlcmRhdGEiLCJ0ZW1wIiwiYWRkb25zIiwiYWRkb25fZGF0YSJdOgogICAgICAgICAgICAgICAgICAgIHNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsbmFtZSksaWdub3JlX2Vycm9ycz1UcnVlLCBvbmVycm9yPU5vbmUpCiAgICAgICAgICAgIGlmIERQLmlzY2FuY2VsZWQoKTogCiAgICAgICAgICAgICAgICBEUC5jbG9zZSgpCiAgICAgICAgICAgICAgICB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11JbnN0YWxhY2lvbiBsaW1waWEgY2FuY2VsYWRhWy9DT0xPUl0iICUgQ09MT1IyKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgRFAuY2xvc2UoKQogICAgICAgIHdpei5jbGVhclMoJ2J1aWxkJykKICAgICAgICBpZiBvdmVyID09IFRydWU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiBpbnN0YWxsID09ICdyZXN0b3JlJzogCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiBpbnN0YWxsOiAKICAgICAgICAgICAgYnVpbGRXaXphcmQoaW5zdGFsbCwgJ25vcm1hbCcsIG92ZXI9VHJ1ZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBJTlNUQUxMTUVUSE9EID09IDE6IHRvZG8gPSAxCiAgICAgICAgICAgIGVsaWYgSU5TVEFMTE1FVEhPRCA9PSAyOiB0b2RvID0gMAogICAgICAgICAgICBlbHNlOiB0b2RvID0gRElBTE9HLnllc25vKEFERE9OVElUTEUsICJbQ09MT1IgJXNdUXVpZXJlcyBbQ09MT1IgJXNdRm9yemFyIGVsIGNpZXJyZVsvQ09MT1JdIGRlIGtvZGkgbyBbQ09MT1IgJXNdUmVjYXJnYXIgZWwgcGVyZmlsIGFjdHVhbFsvQ09MT1JdP1svQ09MT1JdIiAlIChDT0xPUjIsIENPTE9SMSwgQ09MT1IxKSwgeWVzbGFiZWw9IltCXVtDT0xPUiByZWRdUmVjYXJnYXIgZWwgcGVyZmlsWy9DT0xPUl1bL0JdIiwgbm9sYWJlbD0iW0JdW0NPTE9SIGdyZWVuXUZvcnphciBjaWVycmVbL0NPTE9SXVsvQl0iKQogICAgICAgICAgICBpZiB0b2RvID09IDE6IHdpei5yZWxvYWRGaXgoJ2ZyZXNoJykKICAgICAgICAgICAgZWxzZTogd2l6LmFkZG9uVXBkYXRlcygncmVzZXQnKTsgd2l6LmtpbGx4Ym1jKFRydWUpCiAgICBlbHNlOiAKICAgICAgICBpZiBub3QgaW5zdGFsbCA9PSAncmVzdG9yZSc6CiAgICAgICAgICAgIHdpei5Mb2dOb3RpZnkoIltDT0xPUiAlc10lc1svQ09MT1JdIiAlIChDT0xPUjEsIEFERE9OVElUTEUpLCAnW0NPTE9SICVzXUluc3RhbGFjaW9uIGxpbXBpYSBjYW5jZWxhZGFbL0NPTE9SXScgJSBDT0xPUjIpCiAgICAgICAgICAgIHdpei5yZWZyZXNoKCkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjI0VMSU1JTkFSIENBQ0hFIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiBjbGVhckNhY2hlKCk6CiAgICBpZiBESUFMT0cueWVzbm8oQURET05USVRMRSwgJ1tDT0xPUiAlc11Xb3VsZCB5b3UgbGlrZSB0byBjbGVhciBjYWNoZT9bL0NPTE9SXScgJSBDT0xPUjIsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdTm8sIENhbmNlbFsvQ09MT1JdWy9CXScsIHllc2xhYmVsPSdbQl1bQ09MT1IgZ3JlZW5dQ2xlYXIgQ2FjaGVbL0NPTE9SXVsvQl0nKToKICAgICAgICB3aXouY2xlYXJDYWNoZSgpCiAgICAgICAgI2NsZWFyVGh1bWIoKQoKZGVmIHRvdGFsQ2xlYW4oKToKICAgIGlmIERJQUxPRy55ZXNubyhBRERPTlRJVExFLCAnW0NPTE9SICVzXVF1aWVyZXMgbGltcGlhciBsYSBjYWNoZSwgbWluaWF0dXJhcyB5IHBhcXVldGVzP1svQ09MT1JdJyAlIENPTE9SMiwgbm9sYWJlbD0nW0JdW0NPTE9SIHJlZF1DYW5jZWxhclsvQ09MT1JdWy9CXScseWVzbGFiZWw9J1tCXVtDT0xPUiBncmVlbl1MaW1waWFyWy9DT0xPUl1bL0JdJyk6CiAgICAgICAgd2l6LmNsZWFyQ2FjaGUoKQogICAgICAgIHdpei5jbGVhclBhY2thZ2VzKCd0b3RhbCcpCiAgICAgICAgY2xlYXJUaHVtYigndG90YWwnKQoKZGVmIGNsZWFyVGh1bWIodHlwZT1Ob25lKToKICAgIGxhdGVzdCA9IHdpei5sYXRlc3REQignVGV4dHVyZXMnKQogICAgaWYgbm90IHR5cGUgPT0gTm9uZTogY2hvaWNlID0gMQogICAgZWxzZTogY2hvaWNlID0gRElBTE9HLnllc25vKEFERE9OVElUTEUsICdbQ09MT1IgJXNdUXVpZXJlcyBlbGltaW5hciBlbCAlcyB5IGxhIGNhcnBldGEgZGUgbWluaWF0dXJhcz8nICUgKENPTE9SMiwgbGF0ZXN0KSwgIlNlIHZvbHZlcmEgYSBnZW5lcmFyIGxpbXBpYW1lbnRlIGVuIGVsIHByb3hpbW8gaW5pY2lvIGRlIEtvZGlbL0NPTE9SXSIsIG5vbGFiZWw9J1tCXVtDT0xPUiByZWRdTm9bL0NPTE9SXVsvQl0nLCB5ZXNsYWJlbD0nW0JdW0NPTE9SIGdyZWVuXVNpLCBwb3IgZmF2b3JbL0NPTE9SXVsvQl0nKQogICAgaWYgY2hvaWNlID09IDE6CiAgICAgICAgdHJ5OiB3aXoucmVtb3ZlRmlsZShvcy5qb2luKERBVEFCQVNFLCBsYXRlc3QpKQogICAgICAgIGV4Y2VwdDogd2l6LmxvZygnRmFsbG8gYWwgYm9ycmFyLCBwdXJnYW5kbyBEQi4nKTsgd2l6LnB1cmdlRGIobGF0ZXN0KQogICAgICAgIHdpei5yZW1vdmVGb2xkZXIoVEhVTUJTKQogICAgICAgICNpZiBub3QgdHlwZSA9PSAndG90YWwnOiB3aXoua2lsbHhibWMoKQogICAgZWxzZTogd2l6LmxvZygnTGltcGlhciBtaW5pdXR1cmFzOiBjYW5jZWxhZG8nKQogICAgd2l6LnJlZG9UaHVtYnMoKQoKZGVmIHB1cmdlRGIoKToKICAgIERCID0gW107IGRpc3BsYXkgPSBbXQogICAgZm9yIGRpcnBhdGgsIGRpcm5hbWVzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUpOgogICAgICAgIGZvciBmIGluIGZubWF0Y2guZmlsdGVyKGZpbGVzLCAnKi5kYicpOgogICAgICAgICAgICBpZiBmICE9ICdUaHVtYnMuZGInOgogICAgICAgICAgICAgICAgZm91bmQgPSBvcy5wYXRoLmpvaW4oZGlycGF0aCwgZikKICAgICAgICAgICAgICAgIERCLmFwcGVuZChmb3VuZCkKICAgICAgICAgICAgICAgIGRpciA9IGZvdW5kLnJlcGxhY2UoJ1xcJywgJy8nKS5zcGxpdCgnLycpCiAgICAgICAgICAgICAgICBkaXNwbGF5LmFwcGVuZCgnKCVzKSAlcycgJSAoZGlyW2xlbihkaXIpLTJdLCBkaXJbbGVuKGRpciktMV0pKQogICAgaWYgS09ESVYgPj0gMTY6IAogICAgICAgIGNob2ljZSA9IERJQUxPRy5tdWx0aXNlbGVjdCgiW0NPTE9SICVzXVNlbGVjY2lvbmEgZWwgYXJjaGl2byBkZSBsYSBCRCBhIGVsaW1pbmFyWy9DT0xPUl0iICUgQ09MT1IyLCBkaXNwbGF5KQogICAgICAgIGlmIGNob2ljZSA9PSBOb25lOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdUHVyZ2FyIEJhc2UgZGUgZGF0b3NbL0NPTE9SXSIgJSBDT0xPUjEsICJbQ09MT1IgJXNdQ2FuY2VsYWRvWy9DT0xPUl0iICUgQ09MT1IyKQogICAgICAgIGVsaWYgbGVuKGNob2ljZSkgPT0gMDogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXVB1cmdhciBCYXNlIGRlIGRhdG9zWy9DT0xPUl0iICUgQ09MT1IxLCAiW0NPTE9SICVzXUNhbmNlbGFkb1svQ09MT1JdIiAlIENPTE9SMikKICAgICAgICBlbHNlOiAKICAgICAgICAgICAgZm9yIHB1cmdlIGluIGNob2ljZTogd2l6LnB1cmdlRGIoREJbcHVyZ2VdKQogICAgZWxzZToKICAgICAgICBjaG9pY2UgPSBESUFMT0cuc2VsZWN0KCJbQ09MT1IgJXNdU2VsZWNjaW9uYSBlbCBhcmNoaXZvIGRlIGxhIEJEIGEgZWxpbWluYXJbL0NPTE9SXSIgJSBDT0xPUjIsIGRpc3BsYXkpCiAgICAgICAgaWYgY2hvaWNlID09IC0xOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdUHVyZ2FyIEJhc2UgZGUgZGF0b3NbL0NPTE9SXSIgJSBDT0xPUjEsICJbQ09MT1IgJXNdQ2FuY2VsYWRvWy9DT0xPUl0iICUgQ09MT1IyKQogICAgICAgIGVsc2U6IHdpei5wdXJnZURiKERCW3B1cmdlXSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBNRU5VIERFIERFU0FSUk9MTEFET1IgIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiB0ZXN0bm90aWZ5KCk6CiAgICB1cmwgPSB3aXoud29ya2luZ1VSTChOT1RJRklDQVRJT04pCiAgICBpZiB1cmwgPT0gVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlkLCBtc2cgPSB3aXouc3BsaXROb3RpZnkoTk9USUZJQ0FUSU9OKQogICAgICAgICAgICBpZiBpZCA9PSBGYWxzZTogd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdTm90aWZpY2FjaW9uZXM6IE5vIHRpZW5lbiBlbCBmb3JtYXRvIGNvcnJlY3RvWy9DT0xPUl0iICUgQ09MT1IyKTsgcmV0dXJuCiAgICAgICAgICAgIG5vdGlmeS5ub3RpZmljYXRpb24obXNnLCBUcnVlKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24sIGU6CiAgICAgICAgICAgIHdpei5sb2coIkVycm9yIGVuIE5vdGlmaWNhY2lvbmVzOiAlcyIgJSBzdHIoZSksIHhibWMuTE9HRVJST1IpCiAgICBlbHNlOiB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11VUkwgcGFyYSBub3RpZmljYWNpb25lcyBubyB2YWxpZG9bL0NPTE9SXSIgJSBDT0xPUjIpCgpkZWYgdGVzdHVwZGF0ZSgpOgogICAgaWYgQlVJTEROQU1FID09ICIiOgogICAgICAgIG5vdGlmeS51cGRhdGVXaW5kb3coKQogICAgZWxzZToKICAgICAgICBub3RpZnkudXBkYXRlV2luZG93KEJVSUxETkFNRSwgQlVJTERWRVJTSU9OLCBCVUlMRExBVEVTVCwgd2l6LmNoZWNrQnVpbGQoQlVJTEROQU1FLCAnaWNvbicpLCB3aXouY2hlY2tCdWlsZChCVUlMRE5BTUUsICdmYW5hcnQnKSkKCmRlZiB0ZXN0Zmlyc3QoKToKICAgIG5vdGlmeS5maXJzdFJ1bigpCgpkZWYgdGVzdGZpcnN0UnVuKCk6CiAgICBub3RpZnkuZmlyc3RSdW5TZXR0aW5ncygpCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyMjIyBESVJFQ1RPUklPUyAjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZGVmIGFkZERpcihkaXNwbGF5LCBtb2RlPU5vbmUsIG5hbWU9Tm9uZSwgdXJsPU5vbmUsIG1lbnU9Tm9uZSwgZGVzY3JpcHRpb249QURET05USVRMRSwgb3ZlcndyaXRlPVRydWUsIGZhbmFydD1GQU5BUlQsIGljb249SUNPTiwgdGhlbWVpdD1Ob25lKToKICAgIHUgPSBzeXMuYXJndlswXQogICAgaWYgbm90IG1vZGUgPT0gTm9uZTogdSArPSAiP21vZGU9JXMiICUgdXJsbGliLnF1b3RlX3BsdXMobW9kZSkKICAgIGlmIG5vdCBuYW1lID09IE5vbmU6IHUgKz0gIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkKICAgIGlmIG5vdCB1cmwgPT0gTm9uZTogdSArPSAiJnVybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkKICAgIG9rPVRydWUKICAgIGlmIHRoZW1laXQ6IGRpc3BsYXkgPSB0aGVtZWl0ICUgZGlzcGxheQogICAgbGl6PXhibWNndWkuTGlzdEl0ZW0oZGlzcGxheSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb24pCiAgICBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogZGlzcGxheSwgIlBsb3QiOiBkZXNjcmlwdGlvbn0gKQogICAgbGl6LnNldFByb3BlcnR5KCAiRmFuYXJ0X0ltYWdlIiwgZmFuYXJ0ICkKICAgIGlmIG5vdCBtZW51ID09IE5vbmU6IGxpei5hZGRDb250ZXh0TWVudUl0ZW1zKG1lbnUsIHJlcGxhY2VJdGVtcz1vdmVyd3JpdGUpCiAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpCiAgICByZXR1cm4gb2sKCmRlZiBhZGRGaWxlKGRpc3BsYXksIG1vZGU9Tm9uZSwgbmFtZT1Ob25lLCB1cmw9Tm9uZSwgbWVudT1Ob25lLCBkZXNjcmlwdGlvbj1BRERPTlRJVExFLCBvdmVyd3JpdGU9VHJ1ZSwgZmFuYXJ0PUZBTkFSVCwgaWNvbj1JQ09OLCB0aGVtZWl0PU5vbmUpOgogICAgdSA9IHN5cy5hcmd2WzBdCiAgICBpZiBub3QgbW9kZSA9PSBOb25lOiB1ICs9ICI/bW9kZT0lcyIgJSB1cmxsaWIucXVvdGVfcGx1cyhtb2RlKQogICAgaWYgbm90IG5hbWUgPT0gTm9uZTogdSArPSAiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKQogICAgaWYgbm90IHVybCA9PSBOb25lOiB1ICs9ICImdXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKQogICAgb2s9VHJ1ZQogICAgaWYgdGhlbWVpdDogZGlzcGxheSA9IHRoZW1laXQgJSBkaXNwbGF5CiAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShkaXNwbGF5LCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbikKICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBkaXNwbGF5LCAiUGxvdCI6IGRlc2NyaXB0aW9ufSApCiAgICBsaXouc2V0UHJvcGVydHkoICJGYW5hcnRfSW1hZ2UiLCBmYW5hcnQgKQogICAgaWYgbm90IG1lbnUgPT0gTm9uZTogbGl6LmFkZENvbnRleHRNZW51SXRlbXMobWVudSwgcmVwbGFjZUl0ZW1zPW92ZXJ3cml0ZSkKICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9RmFsc2UpCiAgICByZXR1cm4gb2sKCmRlZiBnZXRfcGFyYW1zKCk6CiAgICBwYXJhbT1bXQogICAgcGFyYW1zdHJpbmc9c3lzLmFyZ3ZbMl0KICAgIGlmIGxlbihwYXJhbXN0cmluZyk+PTI6CiAgICAgICAgcGFyYW1zPXN5cy5hcmd2WzJdCiAgICAgICAgY2xlYW5lZHBhcmFtcz1wYXJhbXMucmVwbGFjZSgnPycsJycpCiAgICAgICAgaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToKICAgICAgICAgICAgcGFyYW1zPXBhcmFtc1swOmxlbihwYXJhbXMpLTJdCiAgICAgICAgcGFpcnNvZnBhcmFtcz1jbGVhbmVkcGFyYW1zLnNwbGl0KCcmJykKICAgICAgICBwYXJhbT17fQogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihwYWlyc29mcGFyYW1zKSk6CiAgICAgICAgICAgIHNwbGl0cGFyYW1zPXt9CiAgICAgICAgICAgIHNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQogICAgICAgICAgICBpZiAobGVuKHNwbGl0cGFyYW1zKSk9PTI6CiAgICAgICAgICAgICAgICBwYXJhbVtzcGxpdHBhcmFtc1swXV09c3BsaXRwYXJhbXNbMV0KCiAgICAgICAgcmV0dXJuIHBhcmFtCgpwYXJhbXM9Z2V0X3BhcmFtcygpCnVybD1Ob25lCm5hbWU9Tm9uZQptb2RlPU5vbmUKCnRyeTogICAgIG1vZGU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm1vZGUiXSkKZXhjZXB0OiAgcGFzcwp0cnk6ICAgICBuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pCmV4Y2VwdDogIHBhc3MKdHJ5OiAgICAgdXJsPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ1cmwiXSkKZXhjZXB0OiAgcGFzcwoKd2l6LmxvZygnWyBWZXJzaW9uIDogXCclc1wnIF0gWyBNb2RlIDogXCclc1wnIF0gWyBOYW1lIDogXCclc1wnIF0gWyBVcmwgOiBcJyVzXCcgXScgJSAoVkVSU0lPTiwgbW9kZSBpZiBub3QgbW9kZSA9PSAnJyBlbHNlIE5vbmUsIG5hbWUsIHVybCkpCgpkZWYgc2V0Vmlldyhjb250ZW50LCB2aWV3VHlwZSk6CiAgICBpZiB3aXouZ2V0UygnYXV0by12aWV3Jyk9PSd0cnVlJzoKICAgICAgICB2aWV3cyA9IHdpei5nZXRTKHZpZXdUeXBlKQogICAgICAgIGlmIHZpZXdzID09ICc1MCcgYW5kIEtPRElWID49IDE3IGFuZCBTS0lOID09ICdza2luLmVzdHVhcnknOiB2aWV3cyA9ICc1NScKICAgICAgICBpZiB2aWV3cyA9PSAnNTAwJyBhbmQgS09ESVYgPj0gMTcgYW5kIFNLSU4gPT0gJ3NraW4uZXN0dWFyeSc6IHZpZXdzID0gJzUwJwogICAgICAgIHdpei5lYmkoIkNvbnRhaW5lci5TZXRWaWV3TW9kZSglcykiICUgIHZpZXdzKQoKaWYgICBtb2RlPT1Ob25lICAgICAgICAgICAgIDogaW5kZXgoKQoKZWxpZiBtb2RlPT0nd2l6YXJkdXBkYXRlJyAgIDogd2l6LndpemFyZFVwZGF0ZSgpCmVsaWYgbW9kZT09J2J1aWxkcycgICAgICAgICA6IGJ1aWxkTWVudSgpCmVsaWYgbW9kZT09J3ZpZXdidWlsZCcgICAgICA6IHZpZXdCdWlsZChuYW1lKQplbGlmIG1vZGU9PSdidWlsZGluZm8nICAgICAgOiBidWlsZEluZm8obmFtZSkKZWxpZiBtb2RlPT0nYnVpbGRwcmV2aWV3JyAgIDogYnVpbGRWaWRlbyhuYW1lKQplbGlmIG1vZGU9PSdpbnN0YWxsJyAgICAgICAgOiBidWlsZFdpemFyZChuYW1lLCB1cmwpCmVsaWYgbW9kZT09J3RoZW1lJyAgICAgICAgICA6IGJ1aWxkV2l6YXJkKG5hbWUsIG1vZGUsIHVybCkKZWxpZiBtb2RlPT0ndmlld3RoaXJkcGFydHknIDogdmlld1RoaXJkTGlzdChuYW1lKQplbGlmIG1vZGU9PSdpbnN0YWxsdGhpcmQnICAgOiB0aGlyZFBhcnR5SW5zdGFsbChuYW1lLCB1cmwpCmVsaWYgbW9kZT09J2VkaXR0aGlyZCcgICAgICA6IGVkaXRUaGlyZFBhcnR5KG5hbWUpOyB3aXoucmVmcmVzaCgpCgplbGlmIG1vZGU9PSdtYWludCcgICAgICAgICAgOiBtYWludE1lbnUobmFtZSkKZWxpZiBtb2RlPT0na29kaTE3Zml4JyAgICAgIDogd2l6LmtvZGkxN0ZpeCgpCmVsaWYgbW9kZT09J2FkdmFuY2Vkc2V0dGluZyc6IGFkdmFuY2VkV2luZG93KG5hbWUpCmVsaWYgbW9kZT09J2F1dG9hZHZhbmNlZCcgICA6IHNob3dBdXRvQWR2YW5jZWQoKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSdyZW1vdmVhZHZhbmNlZCcgOiByZW1vdmVBZHZhbmNlZCgpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2FzY2lpY2hlY2snICAgICA6IHdpei5hc2NpaUNoZWNrKCkKZWxpZiBtb2RlPT0nYmFja3VwYnVpbGQnICAgIDogd2l6LmJhY2tVcE9wdGlvbnMoJ2J1aWxkJykKZWxpZiBtb2RlPT0nYmFja3VwZ3VpJyAgICAgIDogd2l6LmJhY2tVcE9wdGlvbnMoJ2d1aWZpeCcpCmVsaWYgbW9kZT09J2JhY2t1cHRoZW1lJyAgICA6IHdpei5iYWNrVXBPcHRpb25zKCd0aGVtZScpCmVsaWYgbW9kZT09J2JhY2t1cGFkZG9uJyAgICA6IHdpei5iYWNrVXBPcHRpb25zKCdhZGRvbmRhdGEnKQplbGlmIG1vZGU9PSdvbGRUaHVtYnMnICAgICAgOiB3aXoub2xkVGh1bWJzKCkKZWxpZiBtb2RlPT0nY2xlYXJiYWNrdXAnICAgIDogd2l6LmNsZWFudXBCYWNrdXAoKQplbGlmIG1vZGU9PSdjb252ZXJ0cGF0aCcgICAgOiB3aXouY29udmVydFNwZWNpYWwoSE9NRSkKZWxpZiBtb2RlPT0nY3VycmVudHNldHRpbmdzJzogdmlld0FkdmFuY2VkKCkKZWxpZiBtb2RlPT0nZnVsbGNsZWFuJyAgICAgIDogdG90YWxDbGVhbigpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2NsZWFyY2FjaGUnICAgICA6IGNsZWFyQ2FjaGUoKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSdjbGVhcnBhY2thZ2VzJyAgOiB3aXouY2xlYXJQYWNrYWdlcygpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2NsZWFyY3Jhc2gnICAgICA6IHdpei5jbGVhckNyYXNoKCk7IHdpei5yZWZyZXNoKCkKZWxpZiBtb2RlPT0nY2xlYXJ0aHVtYicgICAgIDogY2xlYXJUaHVtYigpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2NoZWNrc291cmNlcycgICA6IHdpei5jaGVja1NvdXJjZXMoKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSdjaGVja3JlcG9zJyAgICAgOiB3aXouY2hlY2tSZXBvcygpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2ZyZXNoc3RhcnQnICAgICA6IGZyZXNoU3RhcnQoKQplbGlmIG1vZGU9PSdmb3JjZXVwZGF0ZScgICAgOiB3aXouZm9yY2VVcGRhdGUoKQplbGlmIG1vZGU9PSdmb3JjZXByb2ZpbGUnICAgOiB3aXoucmVsb2FkUHJvZmlsZSh3aXouZ2V0SW5mbygnU3lzdGVtLlByb2ZpbGVOYW1lJykpCmVsaWYgbW9kZT09J2ZvcmNlY2xvc2UnICAgICA6IHdpei5raWxseGJtYygpCmVsaWYgbW9kZT09J2ZvcmNlc2tpbicgICAgICA6IHdpei5lYmkoIlJlbG9hZFNraW4oKSIpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J2hpZGVwYXNzd29yZCcgICA6IHdpei5oaWRlUGFzc3dvcmQoKQplbGlmIG1vZGU9PSd1bmhpZGVwYXNzd29yZCcgOiB3aXoudW5oaWRlUGFzc3dvcmQoKQplbGlmIG1vZGU9PSdlbmFibGVhZGRvbnMnICAgOiBlbmFibGVBZGRvbnMoKQplbGlmIG1vZGU9PSd0b2dnbGVhZGRvbicgICAgOiB3aXoudG9nZ2xlQWRkb24obmFtZSwgdXJsKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSd0b2dnbGVjYWNoZScgICAgOiB0b2dnbGVDYWNoZShuYW1lKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSd0b2dnbGVhZHVsdCcgICAgOiB3aXoudG9nZ2xlQWR1bHQoKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSdjaGFuZ2VmZXEnICAgICAgOiBjaGFuZ2VGZXEoKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSd1cGxvYWRsb2cnICAgICAgOiB1cGxvYWRMb2cuTWFpbigpCmVsaWYgbW9kZT09J3ZpZXdsb2cnICAgICAgICA6IExvZ1ZpZXdlcigpCmVsaWYgbW9kZT09J3ZpZXd3aXpsb2cnICAgICA6IExvZ1ZpZXdlcihXSVpMT0cpCmVsaWYgbW9kZT09J3ZpZXdlcnJvcmxvZycgICA6IGVycm9yQ2hlY2tpbmcoYWxsPVRydWUpCmVsaWYgbW9kZT09J2NsZWFyd2l6bG9nJyAgICA6IGYgPSBvcGVuKFdJWkxPRywgJ3cnKTsgZi5jbG9zZSgpOyB3aXouTG9nTm90aWZ5KCJbQ09MT1IgJXNdJXNbL0NPTE9SXSIgJSAoQ09MT1IxLCBBRERPTlRJVExFKSwgIltDT0xPUiAlc11Mb2cgZGVsIGFkZG9uIGxpbXBpYWRvIVsvQ09MT1JdIiAlIENPTE9SMikKZWxpZiBtb2RlPT0ncHVyZ2VkYicgICAgICAgIDogcHVyZ2VEYigpCmVsaWYgbW9kZT09J2ZpeGFkZG9udXBkYXRlJyA6IGZpeFVwZGF0ZSgpCmVsaWYgbW9kZT09J3JlbW92ZWFkZG9ucycgICA6IHJlbW92ZUFkZG9uTWVudSgpCmVsaWYgbW9kZT09J3JlbW92ZWFkZG9uJyAgICA6IHJlbW92ZUFkZG9uKG5hbWUpCmVsaWYgbW9kZT09J3JlbW92ZWFkZG9uZGF0YSc6IHJlbW92ZUFkZG9uRGF0YU1lbnUoKQplbGlmIG1vZGU9PSdyZW1vdmVkYXRhJyAgICAgOiByZW1vdmVBZGRvbkRhdGEobmFtZSkKZWxpZiBtb2RlPT0ncmVzZXRhZGRvbicgICAgIDogdG90YWwgPSB3aXouY2xlYW5Ib3VzZShBRERPTkRBVEEsIGlnbm9yZT1UcnVlKTsgd2l6LkxvZ05vdGlmeSgiW0NPTE9SICVzXSVzWy9DT0xPUl0iICUgKENPTE9SMSwgQURET05USVRMRSksICJbQ09MT1IgJXNdUmVzZXRhZG9zIGxvcyBkYXRvcyBkZSBsb3MgYWRkb25zWy9DT0xPUl0iICUgQ09MT1IyKQplbGlmIG1vZGU9PSdzeXN0ZW1pbmZvJyAgICAgOiBzeXN0ZW1JbmZvKCkKZWxpZiBtb2RlPT0ncmVzdG9yZXppcCcgICAgIDogcmVzdG9yZWl0KCdidWlsZCcpCmVsaWYgbW9kZT09J3Jlc3RvcmVndWknICAgICA6IHJlc3RvcmVpdCgnZ3VpJykKZWxpZiBtb2RlPT0ncmVzdG9yZWFkZG9uJyAgIDogcmVzdG9yZWl0KCdhZGRvbmRhdGEnKQplbGlmIG1vZGU9PSdyZXN0b3JlZXh0emlwJyAgOiByZXN0b3JlZXh0aXQoJ2J1aWxkJykKZWxpZiBtb2RlPT0ncmVzdG9yZWV4dGd1aScgIDogcmVzdG9yZWV4dGl0KCdndWknKQplbGlmIG1vZGU9PSdyZXN0b3JlZXh0YWRkb24nOiByZXN0b3JlZXh0aXQoJ2FkZG9uZGF0YScpCmVsaWYgbW9kZT09J3dyaXRlYWR2YW5jZWQnICA6IHdyaXRlQWR2YW5jZWQobmFtZSwgdXJsKQoKZWxpZiBtb2RlPT0nYXBrJyAgICAgICAgICAgIDogYXBrTWVudShuYW1lKQplbGlmIG1vZGU9PSdhcGtzY3JhcGUnICAgICAgOiBhcGtTY3JhcGVyKG5hbWUpCmVsaWYgbW9kZT09J2Fwa2luc3RhbGwnICAgICA6IGFwa0luc3RhbGxlcihuYW1lLCB1cmwpCgplbGlmIG1vZGU9PSd5b3V0dWJlJyAgICAgICAgOiB5b3V0dWJlTWVudShuYW1lKQplbGlmIG1vZGU9PSd2aWV3VmlkZW8nICAgICAgOiBwbGF5VmlkZW8odXJsKQoKZWxpZiBtb2RlPT0nYWRkb25zJyAgICAgICAgIDogYWRkb25NZW51KG5hbWUpCmVsaWYgbW9kZT09J2FkZG9uaW5zdGFsbCcgICA6IGFkZG9uSW5zdGFsbGVyKG5hbWUsIHVybCkKCmVsaWYgbW9kZT09J3NhdmVkYXRhJyAgICAgICA6IHNhdmVNZW51KCkKZWxpZiBtb2RlPT0ndG9nZ2xlc2V0dGluZycgIDogd2l6LnNldFMobmFtZSwgJ2ZhbHNlJyBpZiB3aXouZ2V0UyhuYW1lKSA9PSAndHJ1ZScgZWxzZSAndHJ1ZScpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J21hbmFnZWRhdGEnICAgICA6IG1hbmFnZVNhdmVEYXRhKG5hbWUpCmVsaWYgbW9kZT09J3doaXRlbGlzdCcgICAgICA6IHdpei53aGl0ZUxpc3QobmFtZSkKCmVsaWYgbW9kZT09J3RyYWt0JyAgICAgICAgICA6IHRyYWt0TWVudSgpCmVsaWYgbW9kZT09J3NhdmV0cmFrdCcgICAgICA6IHRyYWt0aXQudHJha3RJdCgndXBkYXRlJywgICAgICBuYW1lKQplbGlmIG1vZGU9PSdyZXN0b3JldHJha3QnICAgOiB0cmFrdGl0LnRyYWt0SXQoJ3Jlc3RvcmUnLCAgICAgbmFtZSkKZWxpZiBtb2RlPT0nYWRkb250cmFrdCcgICAgIDogdHJha3RpdC50cmFrdEl0KCdjbGVhcmFkZG9uJywgIG5hbWUpCmVsaWYgbW9kZT09J2NsZWFydHJha3QnICAgICA6IHRyYWt0aXQuY2xlYXJTYXZlZChuYW1lKQplbGlmIG1vZGU9PSdhdXRodHJha3QnICAgICAgOiB0cmFrdGl0LmFjdGl2YXRlVHJha3QobmFtZSk7IHdpei5yZWZyZXNoKCkKZWxpZiBtb2RlPT0ndXBkYXRldHJha3QnICAgIDogdHJha3RpdC5hdXRvVXBkYXRlKCdhbGwnKQplbGlmIG1vZGU9PSdpbXBvcnR0cmFrdCcgICAgOiB0cmFrdGl0LmltcG9ydGxpc3QobmFtZSk7IHdpei5yZWZyZXNoKCkKCmVsaWYgbW9kZT09J3JlYWxkZWJyaWQnICAgICA6IHJlYWxNZW51KCkKZWxpZiBtb2RlPT0nc2F2ZWRlYnJpZCcgICAgIDogZGVicmlkaXQuZGVicmlkSXQoJ3VwZGF0ZScsICAgICAgbmFtZSkKZWxpZiBtb2RlPT0ncmVzdG9yZWRlYnJpZCcgIDogZGVicmlkaXQuZGVicmlkSXQoJ3Jlc3RvcmUnLCAgICAgbmFtZSkKZWxpZiBtb2RlPT0nYWRkb25kZWJyaWQnICAgIDogZGVicmlkaXQuZGVicmlkSXQoJ2NsZWFyYWRkb24nLCAgbmFtZSkKZWxpZiBtb2RlPT0nY2xlYXJkZWJyaWQnICAgIDogZGVicmlkaXQuY2xlYXJTYXZlZChuYW1lKQplbGlmIG1vZGU9PSdhdXRoZGVicmlkJyAgICAgOiBkZWJyaWRpdC5hY3RpdmF0ZURlYnJpZChuYW1lKTsgd2l6LnJlZnJlc2goKQplbGlmIG1vZGU9PSd1cGRhdGVkZWJyaWQnICAgOiBkZWJyaWRpdC5hdXRvVXBkYXRlKCdhbGwnKQplbGlmIG1vZGU9PSdpbXBvcnRkZWJyaWQnICAgOiBkZWJyaWRpdC5pbXBvcnRsaXN0KG5hbWUpOyB3aXoucmVmcmVzaCgpCgplbGlmIG1vZGU9PSdsb2dpbicgICAgICAgICAgOiBsb2dpbk1lbnUoKQplbGlmIG1vZGU9PSdzYXZlbG9naW4nICAgICAgOiBsb2dpbml0LmxvZ2luSXQoJ3VwZGF0ZScsICAgICAgbmFtZSkKZWxpZiBtb2RlPT0ncmVzdG9yZWxvZ2luJyAgIDogbG9naW5pdC5sb2dpbkl0KCdyZXN0b3JlJywgICAgIG5hbWUpCmVsaWYgbW9kZT09J2FkZG9ubG9naW4nICAgICA6IGxvZ2luaXQubG9naW5JdCgnY2xlYXJhZGRvbicsICBuYW1lKQplbGlmIG1vZGU9PSdjbGVhcmxvZ2luJyAgICAgOiBsb2dpbml0LmNsZWFyU2F2ZWQobmFtZSkKZWxpZiBtb2RlPT0nYXV0aGxvZ2luJyAgICAgIDogbG9naW5pdC5hY3RpdmF0ZUxvZ2luKG5hbWUpOyB3aXoucmVmcmVzaCgpCmVsaWYgbW9kZT09J3VwZGF0ZWxvZ2luJyAgICA6IGxvZ2luaXQuYXV0b1VwZGF0ZSgnYWxsJykKZWxpZiBtb2RlPT0naW1wb3J0bG9naW4nICAgIDogbG9naW5pdC5pbXBvcnRsaXN0KG5hbWUpOyB3aXoucmVmcmVzaCgpCgplbGlmIG1vZGU9PSdjb250YWN0JyAgICAgICAgOiBub3RpZnkuY29udGFjdChDT05UQUNUKQplbGlmIG1vZGU9PSdzZXR0aW5ncycgICAgICAgOiB3aXoub3BlblMobmFtZSk7IHdpei5yZWZyZXNoKCkKZWxpZiBtb2RlPT0nb3BlbnNldHRpbmdzJyAgIDogaWQgPSBldmFsKHVybC51cHBlcigpKydJRCcpW25hbWVdWydwbHVnaW4nXTsgYWRkb25pZCA9IHdpei5hZGRvbklkKGlkKTsgYWRkb25pZC5vcGVuU2V0dGluZ3MoKTsgd2l6LnJlZnJlc2goKQoKZWxpZiBtb2RlPT0nZGV2ZWxvcGVyJyAgICAgIDogZGV2ZWxvcGVyKCkKZWxpZiBtb2RlPT0nY29udmVydHRleHQnICAgIDogd2l6LmNvbnZlcnRUZXh0KCkKZWxpZiBtb2RlPT0nY3JlYXRlcXInICAgICAgIDogd2l6LmNyZWF0ZVFSKCkKZWxpZiBtb2RlPT0ndGVzdG5vdGlmeScgICAgIDogdGVzdG5vdGlmeSgpCmVsaWYgbW9kZT09J3Rlc3R1cGRhdGUnICAgICA6IHRlc3R1cGRhdGUoKQplbGlmIG1vZGU9PSd0ZXN0Zmlyc3QnICAgICAgOiB0ZXN0Zmlyc3QoKQplbGlmIG1vZGU9PSd0ZXN0Zmlyc3RydW4nICAgOiB0ZXN0Zmlyc3RSdW4oKQplbGlmIG1vZGU9PSd0ZXN0YXBrJyAgICAgICAgOiBub3RpZnkuYXBrSW5zdGFsbGVyKCdTUE1DJykKCnhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSk="))
