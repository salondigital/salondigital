exec("import re;import base64");exec(base64.b64decode("import xbmc, xbmcaddon, xbmcgui, xbmcplugin, os, sys, xbmcvfs, HTMLParser, glob, zipfile, json
import shutil
import errno
import string
import random
import urllib2,urllib
import re
import downloader
import extract
import skinSwitch
import time
import pyqrcode
from datetime import date, datetime, timedelta
try:    from sqlite3 import dbapi2 as database
except: from pysqlite2 import dbapi2 as database
from string import digits

ADDON_ID       = xbmcaddon.Addon().getAddonInfo('id')
ADDONTITLE     = 'SalonDigital'
ADDON          = xbmcaddon.Addon(ADDON_ID)
VERSION        = ADDON.getAddonInfo('version')
USER_AGENT     = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 SE 2.X MetaSr 1.0'
DIALOG         = xbmcgui.Dialog()
DP             = xbmcgui.DialogProgress()
HOME           = xbmc.translatePath('special://home/')
XBMC           = xbmc.translatePath('special://xbmc/')
LOG            = xbmc.translatePath('special://logpath/')
PROFILE        = xbmc.translatePath('special://profile/')
SOURCE         = xbmc.translatePath('source://')
ADDONS         = os.path.join(HOME,      'addons')
USERDATA       = os.path.join(HOME,      'userdata')
PLUGIN         = os.path.join(ADDONS,    ADDON_ID)
PACKAGES       = os.path.join(ADDONS,    'packages')
HIDESPACERS    = 'No'
SPACER         = '='
ADDOND         = os.path.join(USERDATA,  'addon_data')
ADDONDATA      = os.path.join(USERDATA,  'addon_data', ADDON_ID)
ADVANCED       = os.path.join(USERDATA,  'advancedsettings.xml')
SOURCES        = os.path.join(USERDATA,  'sources.xml')
GUISETTINGS    = os.path.join(USERDATA,  'guisettings.xml')
FAVOURITES     = os.path.join(USERDATA,  'favourites.xml')
PROFILES       = os.path.join(USERDATA,  'profiles.xml')
THUMBS         = os.path.join(USERDATA,  'Thumbnails')
DATABASE       = os.path.join(USERDATA,  'Database')
FANART         = os.path.join(PLUGIN,    'fanart.jpg')
ICON           = os.path.join(PLUGIN,    'icon.png')
ART            = os.path.join(PLUGIN,    'resources', 'art')
WIZLOG         = os.path.join(ADDONDATA, 'wizard.log')
WHITELIST      = os.path.join(ADDONDATA, 'whitelist.txt')
QRCODES        = os.path.join(ADDONDATA, 'QRCodes')
SKIN           = xbmc.getSkinDir()
TODAY          = date.today()
TOMORROW       = TODAY + timedelta(days=1)
TWODAYS        = TODAY + timedelta(days=2)
THREEDAYS      = TODAY + timedelta(days=3)
ONEWEEK        = TODAY + timedelta(days=7)
KODIV          = float(xbmc.getInfoLabel("System.BuildVersion")[:4])
EXCLUDES       = [ADDON_ID , 'repository.salondigital']
BUILDFILE      = 'https://raw.githubusercontent.com/pedrojuanamelie/universidadpal/master/mfhg2.txt'
APKFILE        = 'https://raw.githubusercontent.com/pedrojuanamelie/universidadpal/master/almpk.txt'
YOUTUBEFILE    = ''
ADDONFILE      = 'http://'
ADVANCEDFILE   = 'http://'
AUTOUPDATE     = 'No'
WIZARDFILE     = 'https://salondigital.es/wizard.php'
NOTIFICATION   = 'http://'
ENABLE         = 'No'
AUTOINSTALL    = 'No'
REPOADDONXML   = ''
REPOZIPURL     = ''
CONTACT        = 'Gracias por adquirir uno de nuestros productos, para dudas y soporte dirijase al foro de clientes --> www.salondigital.es/foro'
COLOR1         = 'red'
COLOR2         = 'white'
INCLUDEVIDEO   = ADDON.getSetting('includevideo')
INCLUDEALL     = ADDON.getSetting('includeall')
INCLUDEBOB     = ADDON.getSetting('includebob')
INCLUDEPHOENIX = ADDON.getSetting('includephoenix')
INCLUDESPECTO  = ADDON.getSetting('includespecto')
INCLUDEGENESIS = ADDON.getSetting('includegenesis')
INCLUDEEXODUS  = ADDON.getSetting('includeexodus')
INCLUDEONECHAN = ADDON.getSetting('includeonechan')
INCLUDESALTS   = ADDON.getSetting('includesalts')
INCLUDESALTSHD = ADDON.getSetting('includesaltslite')
SHOWADULT      = ADDON.getSetting('adult')
WIZDEBUGGING   = ADDON.getSetting('addon_debug')
DEBUGLEVEL     = ADDON.getSetting('debuglevel')
ENABLEWIZLOG   = ADDON.getSetting('wizardlog')
CLEANWIZLOG    = ADDON.getSetting('autocleanwiz')
CLEANWIZLOGBY  = ADDON.getSetting('wizlogcleanby')
CLEANDAYS      = ADDON.getSetting('wizlogcleandays')
CLEANSIZE      = ADDON.getSetting('wizlogcleansize')
CLEANLINES     = ADDON.getSetting('wizlogcleanlines')
INSTALLMETHOD  = ADDON.getSetting('installmethod')
DEVELOPER      = ADDON.getSetting('developer')
#THIRDPARTY     = ADDON.getSetting('enable3rd')
#THIRD1NAME     = ADDON.getSetting('wizard1name')
#THIRD1URL      = ADDON.getSetting('wizard1url')
#THIRD2NAME     = ADDON.getSetting('wizard2name')
#THIRD2URL      = ADDON.getSetting('wizard2url')
#THIRD3NAME     = ADDON.getSetting('wizard3name')
#THIRD3URL      = ADDON.getSetting('wizard3url')
BACKUPLOCATION = ADDON.getSetting('path') if not ADDON.getSetting('path') == '' else 'special://home/'
MYBUILDS       = os.path.join(BACKUPLOCATION, 'SalonDigital_Backup', '')
LOGFILES       = ['log', 'xbmc.old.log', 'kodi.log', 'kodi.old.log', 'spmc.log', 'spmc.old.log', 'tvmc.log', 'tvmc.old.log']
DEFAULTPLUGINS = ['metadata.album.universal', 'metadata.artists.universal', 'metadata.common.fanart.tv', 'metadata.common.imdb.com', 'metadata.common.musicbrainz.org', 'metadata.themoviedb.org', 'metadata.tvdb.com', 'service.xbmc.versioncheck']
MAXWIZSIZE     = [100, 200, 300, 400, 500, 1000]
MAXWIZLINES    = [100, 200, 300, 400, 500]
MAXWIZDATES    = [1, 2, 3, 7]


##########################
## Objetos de Opciones ###
###########################

def getS(name):
    try: return ADDON.getSetting(name)
    except: return False

def setS(name, value):
    try: ADDON.setSetting(name, value)
    except: return False

def openS(name=""):
    ADDON.openSettings()

def clearS(type):
    build    = {'buildname':'', 'buildversion':'', 'buildtheme':'', 'latestversion':'', 'lastbuildcheck':'2016-01-01'}
    install  = {'installed':'false', 'extract':'', 'errors':''}
    default  = {'defaultskinignore':'false', 'defaultskin':'', 'defaultskinname':''}
    lookfeel = ['default.enablerssfeeds', 'default.font', 'default.rssedit', 'default.skincolors', 'default.skintheme', 'default.skinzoom', 'default.soundskin', 'default.startupwindow', 'default.stereostrength']
    if type == 'build':
        for set in build:
            setS(set, build[set])
        for set in install:
            setS(set, install[set])
        for set in default:
            setS(set, default[set])
        for set in lookfeel:
            setS(set, '')
    elif type == 'default':
        for set in default:
            setS(set, default[set])
        for set in lookfeel:
            setS(set, '')
    elif type == 'install':
        for set in install:
            setS(set, install[set])
    elif type == 'lookfeel':
        for set in lookfeel:
            setS(set, '')

###########################
###### Items activos ######
###########################

# def TextBoxes(heading,announce):
    # class TextBox():
        # WINDOW=10147
        # CONTROL_LABEL=1
        # CONTROL_TEXTBOX=5
        # def __init__(self,*args,**kwargs):
            # ebi("ActivateWindow(%d)" % (self.WINDOW, )) # activate the text viewer window
            # self.win=xbmcgui.Window(self.WINDOW) # get window
            # xbmc.sleep(500) # give window time to initialize
            # self.setControls()
        # def setControls(self):
            # self.win.getControl(self.CONTROL_LABEL).setLabel(heading) # set heading
            # try: f=open(announce); text=f.read()
            # except: text=announce
            # self.win.getControl(self.CONTROL_TEXTBOX).setText(str(text))
            # return
    # TextBox()
    # while xbmc.getCondVisibility('Window.IsVisible(10147)'):
        # xbmc.sleep(500)


ACTION_PREVIOUS_MENU            =  10   ## ESC action
ACTION_NAV_BACK                 =  92   ## Backspace action
ACTION_MOVE_LEFT                =   1   ## Left arrow key
ACTION_MOVE_RIGHT               =   2   ## Right arrow key
ACTION_MOVE_UP                  =   3   ## Up arrow key
ACTION_MOVE_DOWN                =   4   ## Down arrow key
ACTION_MOUSE_WHEEL_UP           = 104   ## Mouse wheel up
ACTION_MOUSE_WHEEL_DOWN         = 105   ## Mouse wheel down
ACTION_MOVE_MOUSE               = 107   ## Down arrow key
ACTION_SELECT_ITEM              =   7   ## Number Pad Enter
ACTION_BACKSPACE                = 110   ## ?
ACTION_MOUSE_LEFT_CLICK         = 100
ACTION_MOUSE_LONG_CLICK         = 108
def TextBox(title, msg):
    class TextBoxes(xbmcgui.WindowXMLDialog):
        def onInit(self):
            self.title      = 101
            self.msg        = 102
            self.scrollbar  = 103
            self.okbutton   = 201
            self.showdialog()

        def showdialog(self):
            self.getControl(self.title).setLabel(title)
            self.getControl(self.msg).setText(msg)
            self.setFocusId(self.scrollbar)
            
        def onClick(self, controlId):
            if (controlId == self.okbutton):
                self.close()
        
        def onAction(self, action):
            if   action == ACTION_PREVIOUS_MENU: self.close()
            elif action == ACTION_NAV_BACK: self.close()
            
    tb = TextBoxes( "Textbox.xml" , ADDON.getAddonInfo('path'), 'DefaultSkin', title=title, msg=msg)
    tb.doModal()
    del tb

def highlightText(msg):
    msg = msg.replace('\n', '[NL]')
    matches = re.compile("-->Python callback/script returned the following error<--(.+?)-->End of Python script error report<--").findall(msg)
    for item in matches:
        string = '-->Python callback/script returned the following error<--%s-->End of Python script error report<--' % item
        msg    = msg.replace(string, '[COLOR red]%s[/COLOR]' % string)
    msg = msg.replace('WARNING', '[COLOR yellow]WARNING[/COLOR]').replace('ERROR', '[COLOR red]ERROR[/COLOR]').replace('[NL]', '\n').replace(': EXCEPTION Thrown (PythonToCppException) :', '[COLOR red]: EXCEPTION Thrown (PythonToCppException) :[/COLOR]')
    msg = msg.replace('\\\\', '\\').replace(HOME, '')
    return msg

def LogNotify(title, message, times=2000, icon=ICON,sound=False):
    DIALOG.notification(title, message, icon, int(times), sound)
    #ebi('XBMC.Notification(%s, %s, %s, %s)' % (title, message, times, icon))

def percentage(part, whole):
    return 100 * float(part)/float(whole)

def addonUpdates(do=None):
    setting = '"general.addonupdates"'
    if do == 'set':
        query = '{"jsonrpc":"2.0", "method":"Settings.GetSettingValue","params":{"setting":%s}, "id":1}' % (setting)
        response = xbmc.executeJSONRPC(query)
        match = re.compile('{"value":(.+?)}').findall(response)
        if len(match) > 0: default = match[0]
        else: default = 0
        setS('default.addonupdate', str(default))
        query = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":%s,"value":%s}, "id":1}' % (setting, '2')
        response = xbmc.executeJSONRPC(query)
    elif do == 'reset':
        try:
            value = int(float(getS('default.addonupdate')))
        except:
            value = 0
        if not value in [0, 1, 2]: value = 0
        query = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":%s,"value":%s}, "id":1}' % (setting, value)
        response = xbmc.executeJSONRPC(query)

###########################
#### Info de versiones ####
###########################

def checkBuild(name, ret):
    if not workingURL(BUILDFILE) == True: return False
    link = openURL(BUILDFILE).replace('\n','').replace('\r','').replace('\t','').replace('gui=""', 'gui="http://"').replace('theme=""', 'theme="http://"')
    match = re.compile('name="%s".+?ersion="(.+?)".+?rl="(.+?)".+?ui="(.+?)".+?odi="(.+?)".+?heme="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?review="(.+?)".+?dult="(.+?)".+?escription="(.+?)"' % name).findall(link)
    if len(match) > 0:
        for version, url, gui, kodi, theme, icon, fanart, preview, adult, description in match:
            if ret   == 'version':       return version
            elif ret == 'url':           return url
            elif ret == 'gui':           return gui
            elif ret == 'kodi':          return kodi
            elif ret == 'theme':         return theme
            elif ret == 'icon':          return icon
            elif ret == 'fanart':        return fanart
            elif ret == 'preview':       return preview
            elif ret == 'adult':         return adult
            elif ret == 'description':   return description
            elif ret == 'all':           return name, version, url, gui, kodi, theme, icon, fanart, preview, adult, description
    else: return False

def checkTheme(name, theme, ret):
    themeurl = checkBuild(name, 'theme')
    if not workingURL(themeurl) == True: return False
    link = openURL(themeurl).replace('\n','').replace('\r','').replace('\t','')
    match = re.compile('name="%s".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?dult=(.+?).+?escription="(.+?)"' % theme).findall(link)
    if len(match) > 0:
        for url, icon, fanart, adult, description in match:
            if ret   == 'url':           return url
            elif ret == 'icon':          return icon
            elif ret == 'fanart':        return fanart
            elif ret == 'adult':         return adult
            elif ret == 'description':   return description
            elif ret == 'all':           return name, theme, url, icon, fanart, adult, description
    else: return False

def checkWizard(ret):
    if not workingURL(WIZARDFILE) == True: return False
    link = openURL(WIZARDFILE).replace('\n','').replace('\r','').replace('\t','')
    match = re.compile('id="%s".+?ersion="(.+?)".+?ip="(.+?)"' % ADDON_ID).findall(link)
    if len(match) > 0:
        for version, zip in match:
            if ret   == 'version':       return version
            elif ret == 'zip':           return zip
            elif ret == 'all':           return ADDON_ID, version, zip
    else: return False

def buildCount(ver=None):
    link  = openURL(BUILDFILE).replace('\n','').replace('\r','').replace('\t','')
    match = re.compile('name="(.+?)".+?odi="(.+?)".+?dult="(.+?)"').findall(link)
    total = 0; count15 = 0; count16 = 0; count17 = 0; count18 = 0; hidden = 0; adultcount = 0
    if len(match) > 0:
        for name, kodi, adult in match:
            if not SHOWADULT == 'true' and adult.lower() == 'yes': hidden += 1; adultcount +=1; continue
            if not DEVELOPER == 'true' and strTest(name): hidden += 1; continue
            kodi = int(float(kodi))
            total += 1
            if kodi == 18: count18 += 1
            elif kodi == 17: count17 += 1
            elif kodi == 16: count16 += 1
            elif kodi <= 15: count15 += 1
    return total, count15, count16, count17, count18, adultcount, hidden

def strTest(string):
    a = (string.lower()).split(' ')
    if 'test' in a: return True
    else: return False

def themeCount(name, count=True):
    themefile = checkBuild(name, 'theme')
    if themefile == 'http://': return False
    link = openURL(themefile).replace('\n','').replace('\r','').replace('\t','')
    match = re.compile('name="(.+?)".+?dult="(.+?)"').findall(link)
    if len(match) == 0: return False
    themes = []
    for item, adult in match:
        if not SHOWADULT == 'true' and adult.lower() == 'yes': continue
        themes.append(item)
    if len(themes) > 0:
        if count == True: return len(themes)
        else: return themes
    else: return False

#def thirdParty(url=None):
#   if url == None: return
#   link = openURL(url).replace('\n','').replace('\r','').replace('\t','')
#   match  = re.compile('name="(.+?)".+?ersion="(.+?)".+?rl="(.+?)".+?odi="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?dult="(.+?)".+?escription="(.+?)"').findall(link)
#   match2 = re.compile('name="(.+?)".+?rl="(.+?)".+?mg="(.+?)".+?anart="(.+?)".+?escription="(.+?)"').findall(link)
#   if len(match) > 0:
#       return True, match
#   elif len(match2) > 0:
#       return False, match2
#   else:
#       return False, []

###########################
### Comprobacion de URL ###
###########################
 
def workingURL(url):
    if url in ['http://', 'https://', '']: return False
    check = 0; status = ''
    while check < 3:
        check += 1
        try:
            req = urllib2.Request(url)
            req.add_header('User-Agent', USER_AGENT)
            response = urllib2.urlopen(req)
            response.close()
            status = True
            break
        except Exception, e:
            status = str(e)
            log("Error de URL: %s [%s]" % (e, url))
            xbmc.sleep(500)
    return status
 
def openURL(url):
    req = urllib2.Request(url)
    req.add_header('User-Agent', USER_AGENT)
    response = urllib2.urlopen(req)
    link=response.read()
    response.close()
    return link

###########################
###### Funciones Misc #####
###########################

def getKeyboard( default="", heading="", hidden=False ):
    keyboard = xbmc.Keyboard( default, heading, hidden )
    keyboard.doModal()
    if keyboard.isConfirmed():
        return unicode( keyboard.getText(), "utf-8" )
    return default

def getSize(path, total=0):
    for dirpath, dirnames, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total += os.path.getsize(fp)
    return total

def convertSize(num, suffix='B'):
    for unit in ['', 'K', 'M', 'G']:
        if abs(num) < 1024.0:
            return "%3.02f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.02f %s%s" % (num, 'G', suffix)

def getCacheSize():
    PROFILEADDONDATA = os.path.join(PROFILE,'addon_data')
    dbfiles   = [
        (os.path.join(ADDONDATA, 'plugin.video.phstreams', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.bob', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.specto', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.genesis', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.exodus', 'cache.db')),
        (os.path.join(DATABASE,  'onechannelcache.db')),
        (os.path.join(DATABASE,  'saltscache.db')),
        (os.path.join(DATABASE,  'saltshd.lite.db'))]
    cachelist = [
        (PROFILEADDONDATA),
        (ADDONDATA),
        (os.path.join(HOME,'cache')),
        (os.path.join(HOME,'temp')),
        (os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'Other')),
        (os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'LocalAndRental')),
        (os.path.join(ADDONDATA,'script.module.simple.downloader')),
        (os.path.join(ADDONDATA,'plugin.video.itv','Images')),
        (os.path.join(PROFILEADDONDATA,'script.module.simple.downloader')),
        (os.path.join(PROFILEADDONDATA,'plugin.video.itv','Images'))]
        
    totalsize = 0

    for item in cachelist:
        if os.path.exists(item) and not item in [ADDONDATA, PROFILEADDONDATA]:
            totalsize = getSize(item, totalsize)
        else:
            for root, dirs, files in os.walk(item):
                for d in dirs:
                    if 'cache' in d.lower() and not d.lower() == 'meta_cache': totalsize = getSize(os.path.join(root, d), totalsize)
    
    if INCLUDEVIDEO == 'true':
        files = []
        if INCLUDEALL == 'true': files = dbfiles
        else:
            if INCLUDEBOB == 'true':     files.append(os.path.join(ADDONDATA, 'plugin.video.bob', 'cache.db'))
            if INCLUDEPHOENIX == 'true': files.append(os.path.join(ADDONDATA, 'plugin.video.phstreams', 'cache.db'))
            if INCLUDESPECTO == 'true':  files.append(os.path.join(ADDONDATA, 'plugin.video.specto', 'cache.db'))
            if INCLUDEGENESIS == 'true': files.append(os.path.join(ADDONDATA, 'plugin.video.genesis', 'cache.db'))
            if INCLUDEEXODUS == 'true':  files.append(os.path.join(ADDONDATA, 'plugin.video.exodus', 'cache.db'))
            if INCLUDEONECHAN == 'true': files.append(os.path.join(DATABASE,  'onechannelcache.db'))
            if INCLUDESALTS == 'true':   files.append(os.path.join(DATABASE,  'saltscache.db'))
            if INCLUDESALTSHD == 'true': files.append(os.path.join(DATABASE,  'saltshd.lite.db'))
        if len(files) > 0:
            for item in files: totalsize = getSize(item, totalsize)
        else: log("Limpieza de cache: Limpieza de cache de video no activada", xbmc.LOGNOTICE)
    return totalsize

def getInfo(label):
    try: return xbmc.getInfoLabel(label)
    except: return False

def removeFolder(path):
    log("Eliminando carpeta: %s" % path, xbmc.LOGNOTICE)
    try: shutil.rmtree(path,ignore_errors=True, onerror=None)
    except: return False

def removeFile(path):
    log("Eliminando archivo: %s" % path, xbmc.LOGNOTICE)
    try:    os.remove(path)
    except: return False

def currSkin():
    return xbmc.getSkinDir()

def cleanHouse(folder, ignore=False):
    log(folder)
    total_files = 0; total_folds = 0
    for root, dirs, files in os.walk(folder):
        if ignore == False: dirs[:] = [d for d in dirs if d not in EXCLUDES]
        file_count = 0
        file_count += len(files)
        if file_count >= 0:
            for f in files:
                try: 
                    os.unlink(os.path.join(root, f))
                    total_files += 1
                except: 
                    try:
                        shutil.rmtree(os.path.join(root, f))
                    except:
                        log("Error Eliminando %s" % f, xbmc.LOGERROR)
            for d in dirs:
                total_folds += 1
                try: 
                    shutil.rmtree(os.path.join(root, d))
                    total_folds += 1
                except: 
                    log("Error Eliminando %s" % d, xbmc.LOGERROR)
    return total_files, total_folds

def emptyfolder(folder):
    total = 0
    for root, dirs, files in os.walk(folder, topdown=True):
        dirs[:] = [d for d in dirs if d not in EXCLUDES]
        file_count = 0
        file_count += len(files) + len(dirs)
        if file_count == 0:
            shutil.rmtree(os.path.join(root))
            total += 1
            log("Carpeta vacia: %s" % root, xbmc.LOGNOTICE)
    return total

def log(msg, level=xbmc.LOGDEBUG):
    if not os.path.exists(ADDONDATA): os.makedirs(ADDONDATA)
    if not os.path.exists(WIZLOG): f = open(WIZLOG, 'w'); f.close()
    if WIZDEBUGGING == 'false': return False
    if DEBUGLEVEL == '0': return False
    if DEBUGLEVEL == '1' and not level in [xbmc.LOGNOTICE, xbmc.LOGERROR, xbmc.LOGSEVERE, xbmc.LOGFATAL]: return False
    if DEBUGLEVEL == '2': level = xbmc.LOGNOTICE
    try:
        if isinstance(msg, unicode):
            msg = '%s' % (msg.encode('utf-8'))
        xbmc.log('%s: %s' % (ADDONTITLE, msg), level)
    except Exception as e:
        try: xbmc.log('Fallo de log: %s' % (e), level)
        except: pass
    if ENABLEWIZLOG == 'true':
        lastcheck = getS('nextcleandate') if not getS('nextcleandate') == '' else str(TODAY)
        if CLEANWIZLOG == 'true' and lastcheck <= str(TODAY): checkLog()
        with open(WIZLOG, 'a') as f:
            line = "[%s %s] %s" % (datetime.now().date(), str(datetime.now().time())[:8], msg)
            f.write(line.rstrip('\r\n')+'\n')

def checkLog():
    nextclean = getS('nextcleandate')
    next = TOMORROW
    if CLEANWIZLOGBY == '0':
        keep = TODAY - timedelta(days=MAXWIZDATES[int(float(CLEANDAYS))])
        x    = 0
        f    = open(WIZLOG); a = f.read(); f.close(); lines = a.split('\n')
        for line in lines:
            if str(line[1:11]) >= str(keep):
                break
            x += 1
        newfile = lines[x:]
        writing = '\n'.join(newfile)
        f = open(WIZLOG, 'w'); f.write(writing); f.close()
    elif CLEANWIZLOGBY == '1':
        maxsize = MAXWIZSIZE[int(float(CLEANSIZE))]*1024
        f    = open(WIZLOG); a = f.read(); f.close(); lines = a.split('\n')
        if os.path.getsize(WIZLOG) >= maxsize:
            start = len(lines)/2
            newfile = lines[start:]
            writing = '\n'.join(newfile)
            f = open(WIZLOG, 'w'); f.write(writing); f.close()
    elif CLEANWIZLOGBY == '2':
        f      = open(WIZLOG); a = f.read(); f.close(); lines = a.split('\n')
        maxlines = MAXWIZLINES[int(float(CLEANLINES))]
        if len(lines) > maxlines:
            start = len(lines) - int(maxlines/2)
            newfile = lines[start:]
            writing = '\n'.join(newfile)
            f = open(WIZLOG, 'w'); f.write(writing); f.close()
    setS('nextcleandate', str(next))

def latestDB(DB):
    if DB in ['Addons', 'ADSP', 'Epg', 'MyMusic', 'MyVideos', 'Textures', 'TV', 'ViewModes']:
        match = glob.glob(os.path.join(DATABASE,'%s*.db' % DB))
        comp = '%s(.+?).db' % DB[1:]
        highest = 0
        for file in match :
            try: check = int(re.compile(comp).findall(file)[0])
            except: check = 0
            if highest < check :
                highest = check
        return '%s%s.db' % (DB, highest)
    else: return False

def addonId(add):
    try: 
        return xbmcaddon.Addon(id=add)
    except:
        return False

def toggleDependency(name, DP=None):
    dep=os.path.join(ADDONS, name, 'addon.xml')
    if os.path.exists(dep):
        source = open(dep,mode='r'); link=source.read(); source.close(); 
        match  = parseDOM(link, 'import', ret='addon')
        for depends in match:
            if not 'xbmc.python' in depends:
                dependspath=os.path.join(ADDONS, depends)
                if not DP == None: 
                    DP.update("","Comprobando dependencia [COLOR yellow]%s[/COLOR] para [COLOR yellow]%s[/COLOR]" % (depends, name),"")
                if os.path.exists(dependspath):
                    toggleAddon(name, 'true')
            xbmc.sleep(100)

def toggleAdult():
    do = DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres [COLOR %s]Activar[/COLOR] o [COLOR %s]Desactivar[/COLOR] todos los addons para adultos?[/COLOR]" % (COLOR2, COLOR1, COLOR1), yeslabel="[B][COLOR green]Activar[/COLOR][/B]", nolabel="[B][COLOR red]Desactivar[/COLOR][/B]")
    state = 'true' if do == 1 else 'false'
    goto = 'Enabling' if do == 1 else 'Disabling'
    link = openURL('http://noobsandnerds.com/TI/AddonPortal/adult.php').replace('\n','').replace('\r','').replace('\t','')
    list = re.compile('i="(.+?)"').findall(link)
    found = []
    for item in list:
        fold = os.path.join(ADDONS, item)
        if os.path.exists(fold):
            found.append(item)
            toggleAddon(item, state, True)
            log("[Adultos] %s %s" % (goto, item), xbmc.LOGNOTICE)
    if len(found) > 0: 
        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres ver una lista completa de todos los addons de %s?[/COLOR]" % (COLOR2, goto.replace('ing', 'ed')), yeslabel="[B][COLOR green]Ver lista[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
            editlist = '[CR]'.join(found)
            TextBox(ADDONTITLE, "[COLOR %s]Aqui hay una lista de %s para addons de adultos:[/COLOR][CR][CR][COLOR %s]%s[/COLOR]" % (COLOR1, goto.replace('ing', 'ed'), COLOR2, editlist))
        else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s][COLOR %s]%d[/COLOR] Adult Addons %s[/COLOR]" % (COLOR2, COLOR1, count, goto.replace('ing', 'ed')))
        forceUpdate(True)
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]No se han encontrado addons para adultos[/COLOR]" % COLOR2)

def createTemp(plugin):
    temp   = os.path.join(PLUGIN, 'resources', 'tempaddon.xml')
    f      = open(temp, 'r'); r = f.read(); f.close()
    plugdir = os.path.join(ADDONS, plugin)
    if not os.path.exists(plugdir): os.makedirs(plugdir)
    a = open(os.path.join(plugdir, 'addon.xml'), 'w')
    a.write(r.replace('testid', plugin).replace('testversion', '0.0.1'))
    a.close()
    log("%s: escrito addon.xml" % plugin)

def fixmetas():
    idlist = ['plugin.video.metalliq', 'plugin.video.meta', 'script.renegadesmeta']
    temp   = os.path.join(PLUGIN, 'resources', 'tempaddon.xml')
    f      = open(temp, 'r'); r = f.read(); f.close()
    for item in idlist:
        fold = os.path.join(ADDONS, item)
        if os.path.exists(fold):
            if not os.path.exists(os.path.join(fold, 'addon.xml')): continue
            a = open(os.path.join(fold, 'addon.xml'), 'w')
            a.write(r.replace('testid', item).replace('testversion', '0.0.1'))
            a.close()
            log("%s: re-escrito addon.xml" % item)

def toggleAddon(id, value, over=None):
    if KODIV >= 17:
        addonDatabase(id, value)
        return
    addonid  = id
    addonxml = os.path.join(ADDONS, id, 'addon.xml')
    if os.path.exists(addonxml):
        f        = open(addonxml)
        b        = f.read()
        tid      = parseDOM(b, 'addon', ret='id')
        tname    = parseDOM(b, 'addon', ret='name')
        tservice = parseDOM(b, 'extension', ret='library', attrs = {'point': 'xbmc.service'})
        try:
            if len(tid) > 0:
                addonid = tid[0]
            if len(tservice) > 0:
                log("Parando script: %s" % match[0], xbmc.LOGDEBUG)
                ebi('StopScript(%s)' % os.path.join(ADDONS, addonid))
                ebi('StopScript(%s)' % addonid)
                ebi('StopScript(%s)' % os.path.join(ADDONS, addonid, tservice[0]))
                xbmc.sleep(500)
        except:
            pass
    query = '{"jsonrpc":"2.0", "method":"Addons.SetAddonEnabled","params":{"addonid":"%s","enabled":%s}, "id":1}' % (addonid, value)
    response = xbmc.executeJSONRPC(query)
    if 'error' in response and over == None:
        v = 'Enabling' if value == 'true' else 'Disabling'
        DIALOG.ok(ADDONTITLE, "[COLOR %s]Error %s [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, v, id), "Comprueba que el listado de addons es funcional y esta subido correctamente.[/COLOR]")
        forceUpdate()

def addonInfo(add, info):
    addon = addonId(add)
    if addon: return addon.getAddonInfo(info)
    else: return False

def whileWindow(window, active=False, count=0, counter=15):
    windowopen = getCond('Window.IsActive(%s)' % window)
    log("%s es %s" % (window, windowopen), xbmc.LOGDEBUG)
    while not windowopen and count < counter:
        log("%s es %s(%s)" % (window, windowopen, count))
        windowopen = getCond('Window.IsActive(%s)' % window)
        count += 1 
        xbmc.sleep(500)
        
    while windowopen:
        active = True
        log("%s is %s" % (window, windowopen), xbmc.LOGDEBUG)
        windowopen = getCond('Window.IsActive(%s)' % window)
        xbmc.sleep(250)
    return active

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def generateQR(url, filename):
    if not os.path.exists(QRCODES): os.makedirs(QRCODES)
    imagefile = os.path.join(QRCODES,'%s.png' % filename)
    qrIMG     = pyqrcode.create(url)
    qrIMG.png(imagefile, scale=10)
    return imagefile

def createQR():
    url = getKeyboard('', "%s: Inserte la URL para el QRCode." % ADDONTITLE)
    if url == "": LogNotify("[COLOR %s]Creacion de QR[/COLOR]" % COLOR1, '[COLOR %s]Creaacion del QR cancelado![/COLOR]' % COLOR2); return
    if not url.startswith('http://') and not url.startswith('https://'): LogNotify("[COLOR %s]Creacion de QR[/COLOR]" % COLOR1, '[COLOR %s]URL no valida![/COLOR]' % COLOR2); return
    if url == 'http://' or url == 'https://': LogNotify("[COLOR %s]Creacion de QR[/COLOR]" % COLOR1, '[COLOR %s]URL no valida![/COLOR]' % COLOR2); return
    working = workingURL(url)
    if not working == True:
        if not DIALOG.yesno(ADDONTITLE, "[COLOR %s]Parece que no es funcional, quieres crearlo de todas maneras?[/COLOR]" % COLOR2, "[COLOR %s]%s[/COLOR]" % (COLOR1, working), yeslabel="[B][COLOR red]Si, crear[/COLOR][/B]", nolabel="[B][COLOR green]No, Cancelar[/COLOR][/B]"):
            return
    name = getKeyboard('', "%s: Inserta el nombre para el QRCode." % ADDONTITLE)
    name = "QrImage_%s" % id_generator(6) if name == "" else name
    image = generateQR(url, name)
    DIALOG.ok(ADDONTITLE, "[COLOR %s]El codigo QR se ha creado correctamente y se ha guardado en la carpeta de datos del addon:[/COLOR]" % COLOR2, "[COLOR %s]%s[/COLOR]" % (COLOR1, image.replace(HOME, '')))

def cleanupBackup():
    mybuilds = xbmc.translatePath(MYBUILDS)
    folder = glob.glob(os.path.join(mybuilds, "*"))
    list = []; filelist = []
    if len(folder) == 0:
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Localizacion del backup: Vacio[/COLOR]" % (COLOR2))
        return
    for item in sorted(folder, key=os.path.getmtime):
        filelist.append(item)
        base = item.replace(mybuilds, '')
        if os.path.isdir(item): 
            list.append('/%s/' % base)
        elif os.path.isfile(item): 
            list.append(base)
    list = ['--- Eliminar todo ---'] + list
    selected = DIALOG.select("%s: Selecciona los items a eliminar de 'SalonDigital_Backup'." % ADDONTITLE, list)
    
    if selected == -1:
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Limpieza cancelada![/COLOR]" % COLOR2)
    elif selected == 0: 
        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres limpiar todos los items de la carpeta 'SalonDigital_Backup' ?[/COLOR]" % COLOR2, "[COLOR %s]%s[/COLOR]" % (COLOR1, MYBUILDS), yeslabel="[B][COLOR green]Limpiar[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
            clearedfiles, clearedfolders = cleanHouse(xbmc.translatePath(MYBUILDS))
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Archivos eliminados: [COLOR %s]%s[/COLOR] / Carpetas:[/COLOR] [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, clearedfiles, COLOR1, clearedfolders))
        else:
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Limpieza cancelada![/COLOR]" % COLOR2)
    else:
        path = filelist[selected-1]; passed = False
        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres eliminar [COLOR %s]%s[/COLOR] de la carpeta 'SalonDigital_Backup' ?[/COLOR]" % (COLOR2, COLOR1, list[selected]), "[COLOR %s]%s[/COLOR]" % (COLOR1, path), yeslabel="[B][COLOR green]Limpiar[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
            if os.path.isfile(path): 
                try:
                    os.remove(path)
                    passed = True
                except:
                    log("Imposible eliminar: %s" % path)
            else:
                cleanHouse(path)
                try:
                    shutil.rmtree(path)
                    passed = True
                except Exception ,e: 
                    log("Error eliminando %s" % path, xbmc.LOGNOTICE)
            if passed: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]%s Eliminado![/COLOR]" % (COLOR2, list[selected]))
            else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Error Eliminando %s![/COLOR]" % (COLOR2, list[selected]))
        else:
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Limpieza cancelada![/COLOR]" % COLOR2)

def getCond(type):
    return xbmc.getCondVisibility(type)

def ebi(proc):
    xbmc.executebuiltin(proc)

def refresh():
    ebi('Container.Refresh()')

def splitNotify(notify):
    link = openURL(notify).replace('\r','').replace('\t','').replace('\n', '[CR]')
    if link.find('|||') == -1: return False, False
    id, msg = link.split('|||')
    if msg.startswith('[CR]'): msg = msg[4:]
    return id.replace('[CR]', ''), msg

def forceUpdate(silent=False):
    ebi('UpdateAddonRepos()')
    ebi('UpdateLocalAddons()')
    if silent == False: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Forzando actualizacion de addons[/COLOR]' % COLOR2)

def convertSpecial(url, over=False):
    total = fileCount(url); start = 0
    DP.create(ADDONTITLE, "[COLOR %s]Cambiando rutas fisicas por especiales" % COLOR2, "", "Por favor, espere[/COLOR]")
    for root, dirs, files in os.walk(url):
        for file in files:
            start += 1
            perc = int(percentage(start, total))
            if file.endswith(".xml") or file.endswith(".hash") or file.endswith("properies"):
                DP.update(perc, "[COLOR %s]Escaneando: [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, root.replace(HOME, '')), "[COLOR %s]%s[/COLOR]" % (COLOR1, file), "Por favor, espere[/COLOR]")
                a = open(os.path.join(root, file)).read()
                encodedpath  = urllib.quote(HOME)
                encodedpath2  = urllib.quote(HOME).replace('%3A','%3a').replace('%5C','%5c')
                b = a.replace(HOME, 'special://home/').replace(encodedpath, 'special://home/').replace(encodedpath2, 'special://home/')
                f = open((os.path.join(root, file)), mode='w')
                f.write(str(b))
                f.close()
    DP.close()
    log("[Convertir rutas fisicas a especiales] Completado", xbmc.LOGNOTICE)
    if over == False: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Convertir rutas fisicas a especiales] Completado![/COLOR]" % COLOR2)

def clearCrash():  
    files = []
    for file in glob.glob(os.path.join(LOG, '*crashlog*.*')):
        files.append(file)
    if len(files) > 0:
        if DIALOG.yesno(ADDONTITLE, '[COLOR %s]Quieres eliminar los logs de crasheo?' % COLOR2, '[COLOR %s]%s[/COLOR] Archivos encontrados[/COLOR]' % (COLOR1, len(files)), yeslabel="[B][COLOR green]Eliminar Logs[/COLOR][/B]", nolabel="[B][COLOR red]Mantener Logs[/COLOR][/B]"):
            for f in files:
                os.remove(f)
            LogNotify('[COLOR %s]Limpiar logs de crasheo[/COLOR]' % COLOR1, '[COLOR %s]%s Logs de crasheo eliminados[/COLOR]' % (COLOR2, len(files)))
        else: LogNotify('[COLOR %s]%s[/COLOR]' % (COLOR1, ADDONTITLE), '[COLOR %s]Clear Logs de crasheo cancelado[/COLOR]' % COLOR2)
    else: LogNotify('[COLOR %s]Limpiar logs de crasheo[/COLOR]' % COLOR1, '[COLOR %s]No se han encontrado Logs de crasheo[/COLOR]' % COLOR2)

def hidePassword():
    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Would you like to [COLOR %s]hide[/COLOR] all passwords when typing in the add-on settings menus?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Hide Passwords[/COLOR][/B]", nolabel="[B][COLOR red]No Cancel[/COLOR][/B]"):
        count = 0
        for folder in glob.glob(os.path.join(ADDONS, '*/')):
            sett = os.path.join(folder, 'resources', 'settings.xml')
            if os.path.exists(sett):
                f = open(sett).read()
                match = parseDOM(f, 'addon', ret='id')
                for line in match:
                    if 'pass' in line:
                        if not 'option="hidden"' in line:
                            try:
                                change = line.replace('/', 'option="hidden" /')
                                f.replace(line, change)
                                count += 1
                                log("[Hide Passwords] found in %s on %s" % (sett.replace(HOME, ''), line), xbmc.LOGDEBUG)
                            except:
                                pass
                f2 = open(sett, mode='w'); f2.write(f); f2.close()
        LogNotify("[COLOR %s]Hide Passwords[/COLOR]" % COLOR1, "[COLOR %s]%s items changed[/COLOR]" % (COLOR2, count))
        log("[Hide Passwords] %s items changed" % count, xbmc.LOGNOTICE)
    else: log("[Hide Passwords] Cancelled", xbmc.LOGNOTICE)

def unhidePassword():
    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres [COLOR %s]mostrar[/COLOR] todos los passwords en el teclado virtual a la hora de configurar addons?[/COLOR]" % (COLOR2, COLOR1), yeslabel="[B][COLOR green]Mostrar Passwords[/COLOR][/B]", nolabel="[B][COLOR red]No, Cancelar[/COLOR][/B]"):
        count = 0
        for folder in glob.glob(os.path.join(ADDONS, '*/')):
            sett = os.path.join(folder, 'resources', 'settings.xml')
            if os.path.exists(sett):
                f = open(sett).read()
                match = parseDOM(f, 'addon', ret='id')
                for line in match:
                    if 'pass' in line:
                        if 'option="hidden"' in line:
                            try:
                                change = line.replace('option="hidden"', '')
                                f.replace(line, change)
                                count += 1
                                log("[Mostrar Passwords] encontrado en %s on %s" % (sett.replace(HOME, ''), line), xbmc.LOGDEBUG)
                            except:
                                pass
                f2 = open(sett, mode='w'); f2.write(f); f2.close()
        LogNotify("[COLOR %s]Mostrar Passwords[/COLOR]" % COLOR1, "[COLOR %s]%s items cambiados[/COLOR]" % (COLOR2, count))
        log("[Mostrar Passwords] %s items cambiados" % count, xbmc.LOGNOTICE)
    else: log("[Mostrar Passwords] Cancelado", xbmc.LOGNOTICE)

def wizardUpdate(startup=None):
    if workingURL(WIZARDFILE):
        ver = checkWizard('version')
        zip = checkWizard('zip')
        if ver > VERSION:
            yes = DIALOG.yesno(ADDONTITLE, '[COLOR %s]Hay una nueva version de [COLOR %s]%s[/COLOR]!' % (COLOR2, COLOR1, ADDONTITLE), 'Quieres descargar [COLOR %s]v%s[/COLOR]?[/COLOR]' % (COLOR1, ver), nolabel='[B][COLOR red]Recordarmelo mas tarde[/COLOR][/B]', yeslabel="[B][COLOR green]Actualizar[/COLOR][/B]")
            if yes:
                log("[Auto Update] Instlanado version v%s" % ver, xbmc.LOGNOTICE)
                DP.create(ADDONTITLE,'[COLOR %s]Descargando Update...' % COLOR2,'', 'Por favor, espere[/COLOR]')
                lib=os.path.join(PACKAGES, '%s-%s.zip' % (ADDON_ID, ver))
                try: os.remove(lib)
                except: pass
                downloader.download(zip, lib, DP)
                xbmc.sleep(2000)
                DP.update(0,"", "Instalando %s update" % ADDONTITLE)
                percent, errors, error = extract.all(lib, ADDONS, DP, True)
                DP.close()
                xbmc.sleep(1000)
                ebi('UpdateAddonRepos()')
                ebi('UpdateLocalAddons()')
                xbmc.sleep(1000)
                LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Add-on actualizado[/COLOR]' % COLOR2)
                log("[Auto Update] Version actualizada a v%s" % ver, xbmc.LOGNOTICE)
                reloadProfile()
                return
            else: log("[Auto Update] Instalar nueva version: Ignorado: %s" % ver, xbmc.LOGNOTICE)
        else: 
            if not startup: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]No hay nueva version del addon[/COLOR]" % COLOR2)
            log("[Auto Update] No hay nueva version de v%s" % ver, xbmc.LOGNOTICE)
    else: log("[Auto Update] Url no valido: %s" % WIZARDFILE, xbmc.LOGNOTICE)

def convertText():
    TEXTFILES = os.path.join(ADDONDATA, 'TextFiles')
    if not os.path.exists(TEXTFILES): os.makedirs(TEXTFILES)
    
    DP.create(ADDONTITLE,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR]' % (COLOR2),'', 'Por favor, espere')
    
    if not BUILDFILE == 'http://':
        filename = os.path.join(TEXTFILES, 'builds.txt')
        writing = '';x = 0
        a = openURL(BUILDFILE).replace('\n','').replace('\r','').replace('\t','')
        DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]Builds.txt[/COLOR]' % (COLOR2, COLOR1),'', 'Por favor, espere')
        if WIZARDFILE == BUILDFILE:
            try:
                addonid, version, url = checkWizard('all')
                writing  = 'id="%s"\n' % addonid
                writing += 'version="%s"\n' % version
                writing += 'zip="%s"\n' % url
            except:
                pass
        match = re.compile('name="(.+?)".+?ersion="(.+?)".+?rl="(.+?)".+?ui="(.+?)".+?odi="(.+?)".+?heme="(.+?)".+?con="(.+?)".+?anart="(.+?)"').findall(a)
        match2 = re.compile('name="(.+?)".+?ersion="(.+?)".+?rl="(.+?)".+?ui="(.+?)".+?odi="(.+?)".+?heme="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?dult="(.+?)".+?escription="(.+?)"').findall(a)
        if len(match2) == 0:
            for name, version, url, gui, kodi, theme, icon, fanart in match:
                x += 1
                DP.update(int(percentage(x, len(match2))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                if not writing == '': writing += '\n'
                writing += 'name="%s"\n' % name
                writing += 'version="%s"\n' % version
                writing += 'url="%s"\n' % url
                writing += 'gui="%s"\n' % gui
                writing += 'kodi="%s"\n' % kodi
                writing += 'theme="%s"\n' % theme
                writing += 'icon="%s"\n' % icon
                writing += 'fanart="%s"\n' % fanart
                writing += 'preview="http://"\n'
                writing += 'adult="no"\n'
                writing += 'description="Descargado %s de %s"\n' % (name, ADDONTITLE)
                if not theme == 'http://':
                    filename2 = os.path.join(TEXTFILES, '%s_theme.txt' % name)
                    themewrite = ''; x2 = 0
                    a = openURL(theme).replace('\n','').replace('\r','').replace('\t','')
                    DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]%s_theme.txt[/COLOR]' % (COLOR2, COLOR1, name),'', 'Por favor, espere')
                    match3 = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?escription="(.+?)"').findall(a)
                    for name, url, icon, fanart, description in match3:
                        x2 += 1
                        DP.update(int(percentage(x2, len(match2))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                        if not themewrite == '': themewrite += '\n'
                        themewrite += 'name="%s"\n' % name
                        themewrite += 'url="%s"\n' % url
                        themewrite += 'icon="%s"\n' % icon
                        themewrite += 'fanart="%s"\n' % fanart
                        themewrite += 'adult="no"\n'
                        themewrite += 'description="%s"\n' % description
                    f = open(filename2, 'w'); f.write(themewrite); f.close()
        else:
            for name, version, url, gui, kodi, theme, icon, fanart, adult, description in match2:
                x += 1
                DP.update(int(percentage(x, len(match2))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                if not writing == '': writing += '\n'
                writing += 'name="%s"\n' % name
                writing += 'version="%s"\n' % version
                writing += 'url="%s"\n' % url
                writing += 'gui="%s"\n' % gui
                writing += 'kodi="%s"\n' % kodi
                writing += 'theme="%s"\n' % theme
                writing += 'icon="%s"\n' % icon
                writing += 'fanart="%s"\n' % fanart
                writing += 'preview="http://"\n'
                writing += 'adult="%s"\n' % adult
                writing += 'description="%s"\n' % description
                if not theme == 'http://':
                    filename2 = os.path.join(TEXTFILES, '%s_theme.txt' % name)
                    themewrite = ''; x2 = 0
                    a = openURL(theme).replace('\n','').replace('\r','').replace('\t','')
                    DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]%s_theme.txt[/COLOR]' % (COLOR2, COLOR1, name),'', 'Por favor, espere')
                    match3 = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?escription="(.+?)"').findall(a)
                    for name, url, icon, fanart, description in match3:
                        x2 += 1
                        DP.update(int(percentage(x2, len(match2))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                        if not themewrite == '': themewrite += '\n'
                        themewrite += 'name="%s"\n' % name
                        themewrite += 'url="%s"\n' % url
                        themewrite += 'icon="%s"\n' % icon
                        themewrite += 'fanart="%s"\n' % fanart
                        themewrite += 'adult="no"\n'
                        themewrite += 'description="%s"\n' % description
                    f = open(filename2, 'w'); f.write(themewrite); f.close()
        f = open(filename, 'w'); f.write(writing); f.close()
    
    if not APKFILE == 'http://':
        filename = os.path.join(TEXTFILES, 'apks.txt')
        writing = ''; x = 0
        a = openURL(APKFILE).replace('\n','').replace('\r','').replace('\t','')
        DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]Apks.txt[/COLOR]' % (COLOR2, COLOR1), '', 'Por favor, espere')
        match = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)"').findall(a)
        match2 = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?dult="(.+?)".+?escription="(.+?)"').findall(a)
        if len(match2) == 0:
            for name, url, icon, fanart in match:
                x += 1
                DP.update(int(percentage(x, len(match))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                if not writing == '': writing += '\n'
                writing += 'name="%s"\n' % name
                writing += 'section="no"'
                writing += 'url="%s"\n' % url
                writing += 'icon="%s"\n' % icon
                writing += 'fanart="%s"\n' % fanart
                writing += 'adult="no"\n'
                writing += 'description="Descargado %s de %s"\n' % (name, ADDONTITLE)
        else:
            for name, url, icon, fanart, adult, description in match2:
                x += 1
                DP.update(int(percentage(x, len(match2))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
                if not writing == '': writing += '\n'
                writing += 'name="%s"\n' % name
                writing += 'section="no"'
                writing += 'url="%s"\n' % url
                writing += 'icon="%s"\n' % icon
                writing += 'fanart="%s"\n' % fanart
                writing += 'adult="%s"\n' % adult
                writing += 'description="%s"\n' % description
        f = open(filename, 'w'); f.write(writing); f.close()
    
    if not YOUTUBEFILE == 'http://':
        filename = os.path.join(TEXTFILES, 'youtube.txt')
        writing = ''; x = 0
        a = openURL(YOUTUBEFILE).replace('\n','').replace('\r','').replace('\t','')
        DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]YouTube.txt[/COLOR]' % (COLOR2, COLOR1), '', 'Por favor, espere')
        match = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?escription="(.+?)"').findall(a)
        for name, url, icon, fanart, description in match:
            x += 1
            DP.update(int(percentage(x, len(match))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
            if not writing == '': writing += '\n'
            writing += 'name="%s"\n' % name
            writing += 'section="no"'
            writing += 'url="%s"\n' % url
            writing += 'icon="%s"\n' % icon
            writing += 'fanart="%s"\n' % fanart
            writing += 'description="%s"\n' % description
        f = open(filename, 'w'); f.write(writing); f.close()

    if not ADVANCEDFILE == 'http://':
        filename = os.path.join(TEXTFILES, 'advancedsettings.txt')
        writing = ''; x = 0
        a = openURL(ADVANCEDFILE).replace('\n','').replace('\r','').replace('\t','')
        DP.update(0,'[COLOR %s][B]Convertiendo texto:[/B][/COLOR] [COLOR %s]AdvancedSettings.txt[/COLOR]' % (COLOR2, COLOR1), '', 'Por favor, espere')
        match = re.compile('name="(.+?)".+?rl="(.+?)".+?con="(.+?)".+?anart="(.+?)".+?escription="(.+?)"').findall(a)
        for name, url, icon, fanart, description in match:
            x += 1
            DP.update(int(percentage(x, len(match))), '', "[COLOR %s]%s[/COLOR]" % (COLOR1, name))
            if not writing == '': writing += '\n'
            writing += 'name="%s"\n' % name
            writing += 'section="no"'
            writing += 'url="%s"\n' % url
            writing += 'icon="%s"\n' % icon
            writing += 'fanart="%s"\n' % fanart
            writing += 'description="%s"\n' % description
        f = open(filename, 'w'); f.write(writing); f.close()
    
    DP.close()
    DIALOG.ok(ADDONTITLE, '[COLOR %s]Textos convertidos y compatibilizados para la version 0.1.7 y guardados en [COLOR %s]/addon_data/%s/[/COLOR] carpeta[/COLOR]' % (COLOR2, COLOR1, ADDON_ID))

def reloadProfile(profile=None):
    if profile == None: 
        #if os.path.exists(PROFILES):
        #   profile = getInfo('System.ProfileName')
        #   log("Profile: %s" % profile)
        #   ebi('LoadProfile(%s)' % profile)
        #else:
        #ebi('Mastermode')
        ebi('LoadProfile(Master user)')
    else: ebi('LoadProfile(%s)' % profile)

def chunks(s, n):
    for start in range(0, len(s), n):
        yield s[start:start+n]

def asciiCheck(use=None, over=False):
    if use == None:
        source = DIALOG.browse(3, '[COLOR %s]Selecciona la carpeta a escanear[/COLOR]' % COLOR2, 'files', '', False, False, HOME)
        if over == True:
            yes = 1
        else:
            yes = DIALOG.yesno(ADDONTITLE,'[COLOR %s]Quieres [COLOR %s]eliminar[/COLOR] todos los archivos con caracteres especiales o solo [COLOR %s]escanear y ver[/COLOR] los resultados en el log?[/COLOR]' % (COLOR2, COLOR1, COLOR1), yeslabel='[B][COLOR green]Eliminar[/COLOR][/B]', nolabel='[B][COLOR red]Escanear y ver[/COLOR][/B]')
    else: 
        source = use
        yes = 1

    if source == "":
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Comprobacion ASCII: Cancelado[/COLOR]" % COLOR2)
        return
    
    files_found  = os.path.join(ADDONDATA, 'asciifiles.txt')
    files_fails  = os.path.join(ADDONDATA, 'asciifails.txt')
    afiles       = open(files_found, mode='w+')
    afails       = open(files_fails, mode='w+')
    f1           = 0; f2           = 0
    items        = fileCount(source)
    msg          = ''
    prog         = []
    log("Archivo de origen: (%s)" % str(source), xbmc.LOGNOTICE)
    
    DP.create(ADDONTITLE, 'Por favor, espere...')
    for base, dirs, files in os.walk(source):
        dirs[:] = [d for d in dirs]
        files[:] = [f for f in files]
        for file in files:
            prog.append(file) 
            prog2 = int(len(prog) / float(items) * 100)
            DP.update(prog2,"[COLOR %s]Comprobacion de archivos no ASCII" % COLOR2,'[COLOR %s]%s[/COLOR]' % (COLOR1, d), 'Por favor, espere...[/COLOR]')
            try:
                file.encode('ascii')
            except UnicodeDecodeError:
                badfile = os.path.join(base, file)
                if yes:
                    try: 
                        os.remove(badfile)
                        for chunk in chunks(badfile, 75):
                            afiles.write(chunk+'\n')
                        afiles.write('\n')
                        f1 += 1
                        log("[Comprobacion ASCII] Archivo eliminado: %s " % badfile, xbmc.LOGERROR)
                    except:
                        for chunk in chunks(badfile, 75):
                            afails.write(chunk+'\n')
                        afails.write('\n')
                        f2 += 1
                        log("[Comprobacion ASCII] Archivo fallado: %s " % badfile, xbmc.LOGERROR)
                else:
                    for chunk in chunks(badfile, 75):
                        afiles.write(chunk+'\n')
                    afiles.write('\n')
                    f1 += 1
                    log("[Comprobacion ASCII] File encontrado: %s " % badfile, xbmc.LOGERROR)
                pass
    DP.close(); afiles.close(); afails.close()
    total = int(f1) + int(f2)
    if total > 0:
        if os.path.exists(files_found): afiles = open(files_found, mode='r'); msg = afiles.read(); afiles.close()
        if os.path.exists(files_fails): afails = open(files_fails, mode='r'); msg2 = afails.read(); afails.close()
        if yes:
            if use:
                LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Comprobacion ASCII: %s Eliminado / %s Fallados.[/COLOR]" % (COLOR2, f1, f2))
            else:
                TextBox(ADDONTITLE, "[COLOR yellow][B]%s Archivos eliminados:[/B][/COLOR]\n %s\n\n[COLOR yellow][B]%s Archivos fallados:[B][/COLOR]\n %s" % (f1, msg, f2, msg2))
        else: 
            TextBox(ADDONTITLE, "[COLOR yellow][B]%s Files encontrados:[/B][/COLOR]\n %s" % (f1, msg))
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Comprobacion ASCII: No se ha encontrado ningun archivo.[/COLOR]" % COLOR2)

def fileCount(home, excludes=True):
    exclude_dirs  = [ADDON_ID, 'cache', 'system', 'packages', 'Thumbnails', 'peripheral_data', 'temp', 'SalonDigital_Backup', 'library', 'keymaps']
    exclude_files = ['Textures13.db', '.DS_Store', 'advancedsettings.xml', 'Thumbs.db', '.gitignore']
    item = []
    for base, dirs, files in os.walk(home):
        if excludes:
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            files[:] = [f for f in files if f not in exclude_files]
        for file in files:
            item.append(file)
    return len(item)

def defaultSkin():
    log("[Comprobacion de skin]", xbmc.LOGNOTICE)
    tempgui = os.path.join(USERDATA, 'guitemp.xml')
    gui = tempgui if os.path.exists(tempgui) else GUISETTINGS
    if not os.path.exists(gui): return False
    log("Leyendo archivo de skin: %s" % gui, xbmc.LOGNOTICE)
    guif = open(gui, 'r+')
    msg = guif.read().replace('\n','').replace('\r','').replace('\t','').replace('    ',''); guif.close()
    log("Abriendo archivo de skin", xbmc.LOGNOTICE)
    match = re.compile('<lookandfeel>.+?<ski.+?>(.+?)</skin>.+?</lookandfeel>').findall(msg)
    log("Coincidencias: %s" % str(match), xbmc.LOGNOTICE)
    if len(match) > 0:
        skinid = match[0]
        addonxml = os.path.join(ADDONS, match[0], 'addon.xml')
        if os.path.exists(addonxml):
            addf = open(addonxml, 'r+')
            msg2 = addf.read(); addf.close()
            match2 = parseDOM(msg2, 'addon', ret='name')
            if len(match2) > 0: skinname = match2[0]
            else: skinname = 'no match'
        else: skinname = 'no file'
        log("[Comprobacion de skin] Nombre de skin: %s" % skinname, xbmc.LOGNOTICE)
        log("[Comprobacion de skin] ID de skin: %s" % skinid, xbmc.LOGNOTICE)
        setS('defaultskin', skinid)
        setS('defaultskinname', skinname)
        setS('defaultskinignore', 'false')
    if os.path.exists(tempgui):
        log("Eliminando archivo temporal de skin.", xbmc.LOGNOTICE)
        os.remove(tempgui)
    log("[Comprobacion de skin] Fin", xbmc.LOGNOTICE)

def lookandFeelData(do='save'):
    scan = ['lookandfeel.enablerssfeeds', 'lookandfeel.font', 'lookandfeel.rssedit', 'lookandfeel.skincolors', 'lookandfeel.skintheme', 'lookandfeel.skinzoom', 'lookandfeel.soundskin', 'lookandfeel.startupwindow', 'lookandfeel.stereostrength']
    if do == 'save':
        for item in scan:
            query = '{"jsonrpc":"2.0", "method":"Settings.GetSettingValue","params":{"setting":"%s"}, "id":1}' % (item)
            response = xbmc.executeJSONRPC(query)
            if not 'error' in response:
                match = re.compile('{"value":(.+?)}').findall(str(response))
                setS(item.replace('lookandfeel', 'default'), match[0])
                log("%s guardado en %s" % (item, match[0]), xbmc.LOGNOTICE)
    else:
        for item in scan:
            value = getS(item.replace('lookandfeel', 'default'))
            query = '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue","params":{"setting":"%s","value":%s}, "id":1}' % (item, value)
            response = xbmc.executeJSONRPC(query)
            log("%s restaurado en %s" % (item, value), xbmc.LOGNOTICE)

def sep(middle=''):
    char = SPACER
    ret = char * 40
    if not middle == '': 
        middle = '[ %s ]' % middle
        fluff = int((40 - len(middle))/2)
        ret = "%s%s%s" % (ret[:fluff], middle, ret[:fluff+2])
    return ret[:40]

def convertAdvanced():
    if os.path.exists(ADVANCED):
        f = open(ADVANCED)
        a = f.read()
        if KODIV >= 17:
            return
        else:
            return
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Archivo AdvancedSettings.xml no encontrado[/COLOR]")

##########################
###BACKUP/RESTAURACION #######
##########################
def backUpOptions(type, name=""):
    exclude_dirs  = [ADDON_ID, 'cache', 'system', 'Thumbnails', 'peripheral_data', 'temp', 'SalonDigital_Backup', 'library', 'keymaps']
    exclude_files = ['Textures13.db', '.DS_Store', 'advancedsettings.xml', 'Thumbs.db', '.gitignore']
    bad_files     = [os.path.join(DATABASE, 'onechannelcache.db'),
                     os.path.join(DATABASE, 'saltscache.db'), 
                     os.path.join(DATABASE, 'saltscache.db-shm'), 
                     os.path.join(DATABASE, 'saltscache.db-wal'),
                     os.path.join(DATABASE, 'saltshd.lite.db'),
                     os.path.join(DATABASE, 'saltshd.lite.db-shm'), 
                     os.path.join(DATABASE, 'saltshd.lite.db-wal'),
                     os.path.join(ADDOND, 'script.trakt', 'queue.db'),
                     os.path.join(HOME, 'cache', 'commoncache.db'),
                     os.path.join(ADDOND, 'script.module.dudehere.routines', 'access.log'),
                     os.path.join(ADDOND, 'script.module.dudehere.routines', 'trakt.db'),
                     os.path.join(ADDOND, 'script.module.metahandler', 'meta_cache', 'video_cache.db')]
    
    backup   = xbmc.translatePath(BACKUPLOCATION)
    mybuilds = xbmc.translatePath(MYBUILDS)
    try:
        if not os.path.exists(backup): xbmcvfs.mkdirs(backup)
        if not os.path.exists(mybuilds): xbmcvfs.mkdirs(mybuilds)
    except Exception, e:
        DIALOG.ok(ADDONTITLE, "[COLOR %s]Error creando el directorio de bACKUP:[/COLOR]" % (COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, str(e)))
        return
    if type == "build":
        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres hacer una copia de la version actual?[/COLOR]" % COLOR2, nolabel="[B][COLOR red]Cancelar[/COLOR][/B]", yeslabel="[B][COLOR green]Hacer backup[/COLOR][/B]"):
            if name == "":
                name = getKeyboard("","Por favor, introduce el nombre para %s zip" % type)
                if not name: return False
                name = name.replace('\\', '').replace('/', '').replace(':', '').replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
            name = urllib.quote_plus(name); tempzipname = ''
            zipname = os.path.join(mybuilds, '%s.zip' % name)
            for_progress  = 0
            ITEM          = []
            if not DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres incluir los datos de los addons?" % COLOR2, 'Contiene [COLOR %s]TODOS[/COLOR] los datos de todos los addons, como passwords, skin, iconos, etc. Te recomendamos [COLOR %s]MANUALMENTE[/COLOR] eliminar los datos de addons que no vayas a usar.' % (COLOR1, COLOR1), '[COLOR %s]%s[/COLOR] addon_data sera ignorado[/COLOR]' % (COLOR1, ADDON_ID), yeslabel='[B][COLOR green]Incluir datos[/COLOR][/B]',nolabel='[B][COLOR red]No Incluir[/COLOR][/B]'):
                exclude_dirs.append('addon_data')
            convertSpecial(HOME, True)
            asciiCheck(HOME, True)
            try:
                zipf = zipfile.ZipFile(xbmc.translatePath(zipname), mode='w')
            except:
                try:
                    tempzipname = os.path.join(PACKAGES, '%s.zip' % name)
                    zipf = zipfile.ZipFile(tempzipname, mode='w')
                except:
                    log("No es posible crear %s.zip" % name, xbmc.LOGERROR)
                    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Imposible escribir en el directorio de backups, quieres seleccionar otro?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Cambiar directorio[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
                        openS()
                        return
                    else:
                        return
            DP.create("[COLOR %s]%s[/COLOR][COLOR %s]: Creando zip[/COLOR]" % (COLOR1, ADDONTITLE,COLOR2), "[COLOR %s]Creando zip" % COLOR2, "", "Por favor, espere...[/COLOR]")
            for base, dirs, files in os.walk(HOME):
                dirs[:] = [d for d in dirs if d not in exclude_dirs]
                files[:] = [f for f in files if f not in exclude_files]
                for file in files:
                    ITEM.append(file)
            N_ITEM = len(ITEM)
            fixmetas()
            for base, dirs, files in os.walk(HOME):
                dirs[:] = [d for d in dirs if d not in exclude_dirs]
                files[:] = [f for f in files if f not in exclude_files]
                for file in files:
                    try:
                        for_progress += 1
                        progress = percentage(for_progress, N_ITEM) 
                        DP.update(int(progress), '[COLOR %s]Creando zip: [COLOR%s]%s[/COLOR] / [COLOR%s]%s[/COLOR]' % (COLOR2, COLOR1, for_progress, COLOR1, N_ITEM), '[COLOR %s]%s[/COLOR]' % (COLOR1, file), '')
                        fn = os.path.join(base, file)
                        if file in LOGFILES: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif os.path.join(base, file) in bad_files: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif os.path.join('addons', 'packages') in fn: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif file.endswith('.csv'): log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif file.endswith('.pyo'): continue
                        elif file.endswith('.db') and 'Database' in base:
                            temp = file.replace('.db', '')
                            temp = ''.join([i for i in temp if not i.isdigit()])
                            if temp in ['Addons', 'ADSP', 'Epg', 'MyMusic', 'MyVideos', 'Textures', 'TV', 'ViewModes']:
                                if not file == latestDB(temp):  log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        try:
                            zipf.write(fn, fn[len(HOME):], zipfile.ZIP_DEFLATED)
                        except Exception, e:
                            log("[Back Up] Type = '%s': Unable to backup %s" % (type, file), xbmc.LOGNOTICE)
                            log("%s / %s" % (Exception, e))
                    except Exception, e:
                        log("[Back Up] Type = '%s': Unable to backup %s" % (type, file), xbmc.LOGNOTICE)
                        log("Build Backup Error: %s" % str(e), xbmc.LOGNOTICE)
            zipf.close()
            xbmc.sleep(500)
            DP.update(100, "Creando %s_guisettings.zip" % name, "", "")
            backUpOptions('guifix', name)
            if not tempzipname == '':
                success = xbmcvfs.rename(tempzipname, zipname)
                if success == 0:
                    xbmcvfs.copy(tempzipname, zipname)
                    xbmcvfs.delete(tempzipname)
            DP.close()
            DIALOG.ok(ADDONTITLE, "[COLOR %s]%s[/COLOR] [COLOR %s]Backup creado con exito:[/COLOR]" % (COLOR1, name, COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, zipname))
    elif type == "guifix":
        if name == "":
            guiname = getKeyboard("","Por favor, introduzca el nombre para %s zip" % type)
            if not guiname: return False
            convertSpecial(USERDATA, True)
            asciiCheck(USERDATA, True)
        else: guiname = name
        guiname = urllib.quote_plus(guiname); tempguizipname = ''
        guizipname = xbmc.translatePath(os.path.join(mybuilds, '%s_guisettings.zip' % guiname))
        if os.path.exists(GUISETTINGS):
            try:
                zipf = zipfile.ZipFile(guizipname, mode='w')
            except:
                try:
                    tempguizipname = os.path.join(PACKAGES, '%s_guisettings.zip' % guiname)
                    zipf = zipfile.ZipFile(tempguizipname, mode='w')
                except:
                    log("No es posible crear %s_guisettings.zip" % guiname, xbmc.LOGERROR)
                    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Imposible escribir en el directorio de backups, quieres seleccionar otro?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Cambiar directorio[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
                        openS()
                        return
                    else:
                        return
            try:
                zipf.write(GUISETTINGS, 'guisettings.xml', zipfile.ZIP_DEFLATED)
                zipf.write(PROFILES,    'profiles.xml',    zipfile.ZIP_DEFLATED)
                match = glob.glob(os.path.join(ADDOND,'skin.*', ''))
                log(str(match), xbmc.LOGNOTICE)
                for fold in match:
                    fd = os.path.split(fold[:-1])[1]
                    if not fd in ['skin.confluence', 'skin.re-touch', 'skin.estuary', 'skin.estouchy']:
                        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres incluir la skin siguiente y sus opciones en un backup restaurable?[/COLOR]" % COLOR2, "[COLOR %s]%s[/COLOR]" % (COLOR1, fd), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
                            for base, dirs, files in os.walk(os.path.join(ADDOND,fold)):
                                files[:] = [f for f in files if f not in exclude_files]
                                for file in files:
                                    fn = os.path.join(base, file)
                                    zipf.write(fn, fn[len(USERDATA):], zipfile.ZIP_DEFLATED)
                            match  = parseDOM(link, 'import', ret='addon')
                            if 'script.skinshortcuts' in match:
                                for base, dirs, files in os.walk(os.path.join(ADDOND,'script.skinshortcuts')):
                                    files[:] = [f for f in files if f not in exclude_files]
                                    for file in files:
                                        fn = os.path.join(base, file)
                                        zipf.write(fn, fn[len(USERDATA):], zipfile.ZIP_DEFLATED)
                        else: log("[Back Up] Type = '%s': %s ignored" % (type, fold), xbmc.LOGNOTICE)
            except Exception, e:
                log("[Back Up] Type = '%s': %s" % (type, e), xbmc.LOGNOTICE)
                pass
            zipf.close()
            if not tempguizipname == '':
                success = xbmcvfs.rename(tempguizipname, guizipname)
                if success == 0:
                    xbmcvfs.copy(tempguizipname, guizipname)
                    xbmcvfs.delete(tempguizipname)
        else: log("[Back Up] Type = '%s': guisettings.xml not found" % type, xbmc.LOGNOTICE)
        if name == "":
            DIALOG.ok(ADDONTITLE, "[COLOR %s]Copia de skin y sus datos creada con exito:[/COLOR]" % (COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, guizipname))
    elif type == "theme":
        if not DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Backup de tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres crear una copia del tema actual?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Continuar[/COLOR][/B]", nolabel="[B][COLOR red]No, Cancelar[/COLOR][/B]"): LogNotify("Copia de Tema", "Cancelado!"); return False
        if name == "":
            themename = getKeyboard("","Por favor, introduzca el nombre para %s zip" % type)
            if not themename: return False
        else: themename = name
        themename = urllib.quote_plus(themename); tempzipname = ''
        zipname = os.path.join(mybuilds, '%s.zip' % themename)
        try:
            zipf = zipfile.ZipFile(xbmc.translatePath(zipname), mode='w')
        except:
            try:
                tempzipname = os.path.join(PACKAGES, '%s.zip' % themename)
                zipf = zipfile.ZipFile(tempzipname, mode='w')
            except:
                log("Unable to create %s.zip" % themename, xbmc.LOGERROR)
                if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Imposible escribir en el directorio de backups, quieres seleccionar otro?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Cambiar directorio[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
                    openS()
                    return
                else:
                    return
        convertSpecial(USERDATA, True)
        asciiCheck(USERDATA, True)
        try:
            if not SKIN == 'skin.confluence':
                skinfold = os.path.join(ADDONS, SKIN, 'media')
                match2 = glob.glob(os.path.join(skinfold,'*.xbt'))
                if len(match2) > 1:
                    if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo Texture?[/COLOR]" % COLOR2, "[COLOR %s]%s[/COLOR]" % (COLOR1, SKIN), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
                        skinfold = os.path.join(ADDONS, SKIN, 'media')
                        match2 = glob.glob(os.path.join(skinfold,'*.xbt'))
                        for xbt in match2:
                            if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo Texture [COLOR %s]%s[/COLOR]?" % (COLOR1, COLOR2, xbt.replace(skinfold, "")[1:]), "desde [COLOR %s]%s[/COLOR][/COLOR]" % (COLOR1, SKIN), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
                                fn  = xbt
                                fn2 = fn.replace(HOME, "")
                                zipf.write(fn, fn2, zipfile.ZIP_DEFLATED)
                else:
                    for xbt in match2:
                        if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo Texture [COLOR %s]%s[/COLOR]?" % (COLOR2, COLOR1, xbt.replace(skinfold, "")[1:]), "desde [COLOR %s]%s[/COLOR][/COLOR]" % (COLOR1, SKIN), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
                            fn  = xbt
                            fn2 = fn.replace(HOME, "")
                            zipf.write(fn, fn2, zipfile.ZIP_DEFLATED)
                ad_skin = os.path.join(ADDOND, SKIN, 'settings.xml')
                if os.path.exists(ad_skin):
                    if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo [COLOR %s]settings.xml[/COLOR] en [COLOR %s]/addon_data/[/COLOR] para?" % (COLOR2, COLOR1, COLOR1), "[COLOR %s]%s[/COLOR]"  % (COLOR1, SKIN), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
                        skinfold = os.path.join(ADDOND, SKIN)
                        zipf.write(ad_skin, ad_skin.replace(HOME, ""), zipfile.ZIP_DEFLATED)
                f = open(os.path.join(ADDONS, SKIN, 'addon.xml')); r = f.read(); f.close()
                match  = parseDOM(r, 'import', ret='addon')
                if 'script.skinshortcuts' in match:
                    if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo [COLOR %s]settings.xml[/COLOR] para [COLOR %s]script.skinshortcuts[/COLOR]?" % (COLOR2, COLOR1, COLOR1), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No[/COLOR][/B]"):
                        for base, dirs, files in os.walk(os.path.join(ADDOND,'script.skinshortcuts')):
                            files[:] = [f for f in files if f not in exclude_files]
                            for file in files:
                                fn = os.path.join(base, file)
                                zipf.write(fn, fn[len(HOME):], zipfile.ZIP_DEFLATED)
            if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir la carpeta [COLOR %s]Backgrounds[/COLOR]?[/COLOR]" % (COLOR2, COLOR1), yeslabel="[B][COLOR green]Si, incluir[/COLOR][/B]", nolabel="[B][COLOR red]No, continuar[/COLOR][/B]"):
                fn = DIALOG.browse(0, 'Select location of backgrounds', 'files', '', True, False, HOME, False)
                if not fn == HOME:
                    for base, dirs, files in os.walk(fn):
                        dirs[:] = [d for d in dirs if d not in exclude_dirs]
                        files[:] = [f for f in files if f not in exclude_files]
                        for file in files:
                            try:
                                fn2 = os.path.join(base, file)
                                zipf.write(fn2, fn2[len(HOME):], zipfile.ZIP_DEFLATED)
                            except Exception, e:
                                log("[Back Up] Type = '%s': Unable to backup %s" % (type, file), xbmc.LOGNOTICE)
                                log("Backup Error: %s" % str(e), xbmc.LOGNOTICE)
                text = latestDB('Textures')
                if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el addon [COLOR %s]%s[/COLOR]?[/COLOR]" % (COLOR2, COLOR1, text), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No, Continuar[/COLOR][/B]"):
                    zipf.write(os.path.join(DATABASE, text), '/userdata/Database/%s' % text, zipfile.ZIP_DEFLATED)
            if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Te gustaria incluir algun addon al backup?[/COLOR]" % (COLOR2), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No, Continuar[/COLOR][/B]"):
                fold = glob.glob(os.path.join(ADDONS, '*/'))
                addonnames = []; addonfolds = []
                for folder in sorted(fold, key = lambda x: x):
                    foldername = os.path.split(folder[:-1])[1]
                    if foldername in EXCLUDES: continue
                    elif foldername in DEFAULTPLUGINS: continue
                    elif foldername == 'packages': continue
                    xml = os.path.join(folder, 'addon.xml')
                    if os.path.exists(xml):
                        f      = open(xml)
                        a      = f.read()
                        match  = parseDOM(a, 'addon', ret='name')
                        if len(match) > 0:
                            addonnames.append(match[0])
                            addonfolds.append(foldername)
                        else:
                            addonnames.append(foldername)
                            addonfolds.append(foldername)
                if KODIV > 16:
                    selected = DIALOG.multiselect("%s: Selecciona los addons que quieras incluir en el backup." % ADDONTITLE, addonnames)
                else:
                    selected = []; choice = 0
                    tempaddonnames = ["-- Click aqui para continuar --"] + addonnames
                    while not choice == -1:
                        choice = DIALOG.select("%s: Selecciona los addons que quieras incluir en el backup." % ADDONTITLE, tempaddonnames)
                        if choice == -1: break
                        elif choice == 0: break
                        else: 
                            choice2 = (choice-1)
                            if choice2 in selected:
                                selected.remove(choice2)
                                tempaddonnames[choice] = addonnames[choice2]
                            else:
                                selected.append(choice2)
                                tempaddonnames[choice] = "[B][COLOR %s]%s[/COLOR][/B]" % (COLOR1, addonnames[choice2])
                if len(selected) > 0:
                    for item in selected:
                        for base, dirs, files in os.walk(os.path.join(ADDONS,addonfolds[item])):
                            files[:] = [f for f in files if f not in exclude_files]
                            for file in files:
                                if file.endswith('.pyo'): continue
                                fn = os.path.join(base, file)
                                zipf.write(fn, fn[len(HOME):], zipfile.ZIP_DEFLATED)
            if DIALOG.yesno('[COLOR %s]%s[/COLOR][COLOR %s]: Copia de Tema[/COLOR]' % (COLOR1, ADDONTITLE, COLOR2), "[COLOR %s]Quieres incluir el archivo [COLOR %s]guisettings.xml[/COLOR]?[/COLOR]" % (COLOR2, COLOR1), yeslabel="[B][COLOR green]Si[/COLOR][/B]", nolabel="[B][COLOR red]No, Continuar[/COLOR][/B]"):
                zipf.write(GUISETTINGS, '/userdata/guisettings.xml', zipfile.ZIP_DEFLATED)
        except Exception, e:
            zipf.close()
            log("[Back Up] Type = '%s': %s" % (type, str(e)), xbmc.LOGNOTICE)
            DIALOG.ok(ADDONTITLE, "[COLOR %s]%s[/COLOR][COLOR %s] ha fallado la creacion del archivo zip del tema:[/COLOR]" % (COLOR1, themename, COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, str(e)))
            if not tempzipname == '':
                try: os.remove(xbmc.translatePath(tempzipname))
                except Exception, e: log(str(e))
            else:
                try: os.remove(xbmc.translatePath(zipname))
                except Exception, e: log(str(e))
            return
        zipf.close()
        if not tempzipname == '':
            success = xbmcvfs.rename(tempzipname, zipname)
            if success == 0:
                xbmcvfs.copy(tempzipname, zipname)
                xbmcvfs.delete(tempzipname)
        DIALOG.ok(ADDONTITLE, "[COLOR %s]%s[/COLOR][COLOR %s] se ha crerado con exito el archivo zip del tema:[/COLOR]" % (COLOR1, themename, COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, zipname))
    elif type == "addondata":
        if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres incluir los datos del addon, es decir, la carpeta addon_data?[/COLOR]" % COLOR2, nolabel="[B][COLOR red]Cancelar[/COLOR][/B]", yeslabel="[B][COLOR green]Si, incluir Addon_Data[/COLOR][/B]"):
            if name == "":
                name = getKeyboard("","Por favor, introduzca el nombre para %s zip" % type)
                if not name: return False
                name = urllib.quote_plus(name)
            name = '%s_addondata.zip' % name; tempzipname = ''
            zipname = os.path.join(mybuilds, name)
            try:
                zipf = zipfile.ZipFile(xbmc.translatePath(zipname), mode='w')
            except:
                try:
                    tempzipname = os.path.join(PACKAGES, '%s.zip' % name)
                    zipf = zipfile.ZipFile(tempzipname, mode='w')
                except:
                    log("Unable to create %s_addondata.zip" % name, xbmc.LOGERROR)
                    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Imposible escribir en el directorio de backups, quieres seleccionar otro?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Cambiar Directorio[/COLOR][/B]", nolabel="[B][COLOR red]Cancelar[/COLOR][/B]"):
                        openS()
                        return
                    else:
                        return
            for_progress  = 0
            ITEM          = []
            convertSpecial(ADDOND, True)
            asciiCheck(ADDOND, True)
            DP.create("[COLOR %s]%s[/COLOR][COLOR %s]: Creando zip[/COLOR]" % (COLOR1, ADDONTITLE,COLOR2), "[COLOR %s]Creando zip" % COLOR2, "", "Por favor, espera...[/COLOR]")
            for base, dirs, files in os.walk(ADDOND):
                dirs[:] = [d for d in dirs if d not in exclude_dirs]
                files[:] = [f for f in files if f not in exclude_files]
                for file in files:
                    ITEM.append(file)
            N_ITEM = len(ITEM)
            for base, dirs, files in os.walk(ADDOND):
                dirs[:] = [d for d in dirs if d not in exclude_dirs]
                files[:] = [f for f in files if f not in exclude_files]
                for file in files:
                    try:
                        for_progress += 1
                        progress = percentage(for_progress, N_ITEM) 
                        DP.update(int(progress), '[COLOR %s]Creando zip: [COLOR%s]%s[/COLOR] / [COLOR%s]%s[/COLOR]' % (COLOR2, COLOR1, for_progress, COLOR1, N_ITEM), '[COLOR %s]%s[/COLOR]' % (COLOR1, file), '')
                        fn = os.path.join(base, file)
                        if file in LOGFILES: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif os.path.join(base, file) in bad_files: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif os.path.join('addons', 'packages') in fn: log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif file.endswith('.csv'): log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        elif file.endswith('.db') and 'Database' in base:
                            temp = file.replace('.db', '')
                            temp = ''.join([i for i in temp if not i.isdigit()])
                            if temp in ['Addons', 'ADSP', 'Epg', 'MyMusic', 'MyVideos', 'Textures', 'TV', 'ViewModes']:
                                if not file == latestDB(temp):  log("[Back Up] Type = '%s': Ignore %s" % (type, file), xbmc.LOGNOTICE); continue
                        try:
                            zipf.write(fn, fn[len(ADDOND):], zipfile.ZIP_DEFLATED)
                        except Exception, e:
                            log("[Back Up] Type = '%s': Unable to backup %s" % (type, file), xbmc.LOGNOTICE)
                            log("Backup Error: %s" % str(e), xbmc.LOGNOTICE)
                    except Exception, e:
                        log("[Back Up] Type = '%s': Unable to backup %s" % (type, file), xbmc.LOGNOTICE)
                        log("Backup Error: %s" % str(e), xbmc.LOGNOTICE)
            zipf.close()
            if not tempzipname == '':
                success = xbmcvfs.rename(tempzipname, zipname)
                if success == 0:
                    xbmcvfs.copy(tempzipname, zipname)
                    xbmcvfs.delete(tempzipname)
            DP.close()
            DIALOG.ok(ADDONTITLE, "[COLOR %s]%s[/COLOR] [COLOR %s]Copia creada con exito:[/COLOR]" % (COLOR1, name, COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, zipname))

def restoreLocal(type):
    backup   = xbmc.translatePath(BACKUPLOCATION)
    mybuilds = xbmc.translatePath(MYBUILDS)
    try:
        if not os.path.exists(backup): xbmcvfs.mkdirs(backup)
        if not os.path.exists(mybuilds): xbmcvfs.mkdirs(mybuilds)
    except Exception, e:
        DIALOG.ok(ADDONTITLE, "[COLOR %s]Error creando directorio para Backup:[/COLOR]" % (COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, str(e)))
        return
    file = DIALOG.browse(1, '[COLOR %s]Selecciona el Backup que quieres restaurar[/COLOR]' % COLOR2, 'files', '.zip', False, False, mybuilds)
    log("[RESTORE BACKUP %s] File: %s " % (type.upper(), file), xbmc.LOGNOTICE)
    if file == "" or not file.endswith('.zip'):
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Restauracion local: Cancelada[/COLOR]" % COLOR2)
        return
    DP.create(ADDONTITLE,'[COLOR %s]Restaurando Backup local' % COLOR2,'', 'Por favor, espere[/COLOR]')
    if not os.path.exists(USERDATA): os.makedirs(USERDATA)
    if not os.path.exists(ADDOND): os.makedirs(ADDOND)
    if not os.path.exists(PACKAGES): os.makedirs(PACKAGES)
    if type == "gui": loc = USERDATA
    elif type == "addondata": 
        loc = ADDOND
    else : loc = HOME
    log("Restoring to %s" % loc, xbmc.LOGNOTICE)
    display = os.path.split(file)
    fn = display[1]
    try:
        zipfile.ZipFile(file,  'r')
    except:
        DP.update(0, '[COLOR %s]Imposible leer el zip seleccionado.' % COLOR2, 'Copiando archivos a Paquetes')
        pack = os.path.join('special://home', 'addons', 'packages', fn)
        xbmcvfs.copy(file, pack)
        file = xbmc.translatePath(pack)
        DP.update(0, '', 'Copiando archivos a Paquetes: Completado')
        zipfile.ZipFile(file, 'r')
    percent, errors, error = extract.all(file,loc,DP)
    fixmetas()
    clearS('build')
    DP.close()
    defaultSkin()
    lookandFeelData('save')
    if not file.find('packages') == -1:
        try: os.remove(file)
        except: pass
    if int(errors) >= 1:
        yes=DIALOG.yesno(ADDONTITLE, '[COLOR %s][COLOR %s]%s[/COLOR]' % (COLOR2, COLOR1, fn), 'Completado: [COLOR %s]%s%s[/COLOR] [Errores:[COLOR %s]%s[/COLOR]]' % (COLOR1, percent, '%', COLOR1, errors), 'Quieres ver los errores?[/COLOR]', nolabel='[B][COLOR red]No[/COLOR][/B]',yeslabel='[B][COLOR green]Ver errores[/B]')
        if yes:
            if isinstance(errors, unicode):
                error = error.encode('utf-8')
            TextBox(ADDONTITLE, error.replace('\t',''))
    setS('installed', 'true')
    setS('extract', str(percent))
    setS('errors', str(errors))
    if INSTALLMETHOD == 1: todo = 1
    elif INSTALLMETHOD == 2: todo = 0
    else: todo = DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres [COLOR %s]Forzar el cierre[/COLOR] de kodi o [COLOR %s]Recargar Perfil actual[/COLOR]?[/COLOR]" % (COLOR2, COLOR1, COLOR1), yeslabel="[B][COLOR red]Recargar perfil[/COLOR][/B]", nolabel="[B][COLOR green]Forzar cierre[/COLOR][/B]")
    if todo == 1: reloadFix()
    else: killxbmc(True)

def restoreExternal(type):
    source = DIALOG.browse(1, '[COLOR %s]Selecciona el Backup que quieres restaurar[/COLOR]' % COLOR2, 'files', '.zip', False, False)
    if source == "" or not source.endswith('.zip'):
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Restauracion en la nube: Cancelada[/COLOR]" % COLOR2)
        return
    if not source.startswith('http'):
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Restauracion en la nube: URL no valida[/COLOR]" % COLOR2)
        return
    try: 
        work = workingURL(source)
    except:
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Restauracion en la nube: URL no valida[/COLOR]" % COLOR2)
        log("Not a working url, if source was local then use local restore option", xbmc.LOGNOTICE)
        log("External Source: %s" % source, xbmc.LOGNOTICE)
        return
    log("[RESTORE EXT BACKUP %s] File: %s " % (type.upper(), source), xbmc.LOGNOTICE)
    zipit = os.path.split(source); zname = zipit[1]
    DP.create(ADDONTITLE,'[COLOR %s]Descargando archivo zip' % COLOR2,'', 'Por favor, espere[/COLOR]')
    if type == "gui": loc = USERDATA
    elif type == "addondata": loc = ADDOND
    else : loc = HOME
    if not os.path.exists(USERDATA): os.makedirs(USERDATA)
    if not os.path.exists(ADDOND): os.makedirs(ADDOND)
    if not os.path.exists(PACKAGES): os.makedirs(PACKAGES)
    file = os.path.join(PACKAGES, zname)
    downloader.download(source, file, DP)
    DP.update(0,'Installing Backup de la nube','', 'Por favor, espere')
    percent, errors, error = extract.all(file,loc,DP)
    fixmetas()
    clearS('build')
    DP.close()
    defaultSkin()
    lookandFeelData('save')
    if int(errors) >= 1:
        yes=DIALOG.yesno(ADDONTITLE, '[COLOR %s][COLOR %s]%s[/COLOR]' % (COLOR2, COLOR1, zname), 'Completado: [COLOR %s]%s%s[/COLOR] [Errores:[COLOR %s]%s[/COLOR]]' % (COLOR1, percent, '%', COLOR1, errors), 'Quieres ver los errores?[/COLOR]', nolabel='[B][COLOR red]No[/COLOR][/B]',yeslabel='[B][COLOR green]Ver errores[/COLOR][/B]')
        if yes:
            TextBox(ADDONTITLE, error.replace('\t',''))
    setS('installed', 'true')
    setS('extract', str(percent))
    setS('errors', str(errors))
    try: os.remove(file)
    except: pass
    if INSTALLMETHOD == 1: todo = 1
    elif INSTALLMETHOD == 2: todo = 0
    else: todo = DIALOG.yesno(ADDONTITLE, "[COLOR %s]Quieres [COLOR %s]Forzar el cierre[/COLOR] de kodi o [COLOR %s]Recargar Perfil[/COLOR]?[/COLOR]" % (COLOR2, COLOR1, COLOR1), yeslabel="[B][COLOR red]Recargar Perfil[/COLOR][/B]", nolabel="[B][COLOR green]Forzar cierre[/COLOR][/B]")
    if todo == 1: reloadFix()
    else: killxbmc(True)

##########################
##DETERMINAR PLATFORMA####
##########################

def platform():
    if xbmc.getCondVisibility('system.platform.android'):             return 'android'
    elif xbmc.getCondVisibility('system.platform.linux'):             return 'linux'
    elif xbmc.getCondVisibility('system.platform.linux.Raspberrypi'): return 'linux'
    elif xbmc.getCondVisibility('system.platform.windows'):           return 'windows'
    elif xbmc.getCondVisibility('system.platform.osx'):               return 'osx'
    elif xbmc.getCondVisibility('system.platform.atv2'):              return 'atv2'
    elif xbmc.getCondVisibility('system.platform.ios'):               return 'ios'
    elif xbmc.getCondVisibility('system.platform.darwin'):            return 'ios'

def Grab_Log(file=False, old=False, wizard=False):
    if wizard == True:
        if not os.path.exists(WIZLOG): return False
        else:
            if file == True:
                return WIZLOG
            else:
                filename    = open(WIZLOG, 'r')
                logtext     = filename.read()
                filename.close()
                return logtext
    finalfile   = 0
    logfilepath = os.listdir(LOG)
    logsfound   = []

    for item in logfilepath:
        if old == True and item.endswith('.old.log'): logsfound.append(os.path.join(LOG, item))
        elif old == False and item.endswith('.log') and not item.endswith('.old.log'): logsfound.append(os.path.join(LOG, item))

    if len(logsfound) > 0:
        logsfound.sort(key=lambda f: os.path.getmtime(f))
        if file == True: return logsfound[-1]
        else:
            filename    = open(logsfound[-1], 'r')
            logtext     = filename.read()
            filename.close()
            return logtext
    else: 
        return False

def whiteList(do):
    backup   = xbmc.translatePath(BACKUPLOCATION)
    mybuilds = xbmc.translatePath(MYBUILDS)
    if   do == 'edit':
        fold = glob.glob(os.path.join(ADDONS, '*/'))
        addonnames = []; addonids = []; addonfolds = []
        for folder in sorted(fold, key = lambda x: x):
            foldername = os.path.split(folder[:-1])[1]
            if foldername in EXCLUDES: continue
            elif foldername in DEFAULTPLUGINS: continue
            elif foldername == 'packages': continue
            xml = os.path.join(folder, 'addon.xml')
            if os.path.exists(xml):
                f       = open(xml)
                a       = f.read()
                f.close()
                getid   = parseDOM(a, 'addon', ret='id')
                getname = parseDOM(a, 'addon', ret='name')
                addid   = foldername if len(getid) == 0 else getid[0]
                title   = foldername if len(getname) == 0 else getname[0]
                temp    = title.replace('[', '<').replace(']', '>')
                temp    = re.sub('<[^<]+?>', '', temp)
                addonnames.append(temp)
                addonids.append(addid)
                addonfolds.append(foldername)
        fold2 = glob.glob(os.path.join(ADDOND, '*/'))
        for folder in sorted(fold2, key = lambda x: x):
            foldername = os.path.split(folder[:-1])[1]
            if foldername in addonfolds: continue
            if foldername in EXCLUDES: continue
            xml  = os.path.join(ADDONS, foldername, 'addon.xml')
            xml2 = os.path.join(XBMC, 'addons', foldername, 'addon.xml')
            if os.path.exists(xml):
                f       = open(xml)
            elif os.path.exists(xml2):
                f       = open(xml2)
            else: continue
            a       = f.read()
            f.close()
            getid   = parseDOM(a, 'addon', ret='id')
            getname = parseDOM(a, 'addon', ret='name')
            addid   = foldername if len(getid) == 0 else getid[0]
            title   = foldername if len(getname) == 0 else getname[0]
            temp    = title.replace('[', '<').replace(']', '>')
            temp    = re.sub('<[^<]+?>', '', temp)
            addonnames.append(temp)
            addonids.append(addid)
            addonfolds.append(foldername)
        selected = []; choice = 0
        tempaddonnames = ["-- Click aqui para Continuar --"] + addonnames
        currentWhite = whiteList('read')
        for item in currentWhite:
            log(str(item), xbmc.LOGDEBUG)
            try: name, id, fold = item
            except Exception, e: log(str(e))
            if id in addonids:
                pos = addonids.index(id)+1
                selected.append(pos-1)
                tempaddonnames[pos] = "[B][COLOR %s]%s[/COLOR][/B]" % (COLOR1, name)
            else:
                addonids.append(id)
                addonnames.append(name)
                tempaddonnames.append("[B][COLOR %s]%s[/COLOR][/B]" % (COLOR1, name))
        choice = 1
        while not choice in [-1, 0]:
            choice = DIALOG.select("%s: Selecciona los addons que quieras para la White List." % ADDONTITLE, tempaddonnames)
            if choice == -1: break
            elif choice == 0: break
            else: 
                choice2 = (choice-1)
                if choice2 in selected:
                    selected.remove(choice2)
                    tempaddonnames[choice] = addonnames[choice2]
                else:
                    selected.append(choice2)
                    tempaddonnames[choice] = "[B][COLOR %s]%s[/COLOR][/B]" % (COLOR1, addonnames[choice2])
        whitelist = []
        if len(selected) > 0:
            for addon in selected:
                whitelist.append("['%s', '%s', '%s']" % (addonnames[addon], addonids[addon], addonfolds[addon]))
            writing = '\n'.join(whitelist)
            f = open(WHITELIST, 'w'); f.write(writing); f.close()
        else:
            try: os.remove(WHITELIST)
            except: pass
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]%s Addons en la White List[/COLOR]" % (COLOR2, len(selected)))
    elif do == 'read' :
        white = []
        if os.path.exists(WHITELIST): 
            f = open(WHITELIST)
            a = f.read()
            f.close()
            lines = a.split('\n')
            for item in lines:
                try:
                    name, id, fold = eval(item)
                    white.append(eval(item))
                except:
                    pass
        return white
    elif do == 'view' :
        list = whiteList('read')
        if len(list) > 0:
            msg = "Aqui esta una lista con tus addons en la White List, esta lista (y sus dependencias) no se eliminaran cuando instales actualizaciones o instalaciones limpias.[CR][CR]"
            for item in list:
                try: name, id, fold = item
                except Exception, e: log(str(e))
                msg += "[COLOR %s]%s[/COLOR] [COLOR %s]\"%s\"[/COLOR][CR]" % (COLOR1, name, COLOR2, id) 
            TextBox("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), msg)
        else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]No hay items en la White List[/COLOR]" % COLOR2)
    elif do == 'import':
        source = DIALOG.browse(1, '[COLOR %s]Selecciona una White list para restaurar[/COLOR]' % COLOR2, 'files', '.txt', False, False, HOME)
        log(str(source))
        if not source.endswith('.txt'):
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Importacion Cancelada![/COLOR]" % COLOR2)
            return
        f       = xbmcvfs.File(source)
        a       = f.read()
        f.close()
        current = whiteList('read'); idList = []; count = 0
        for item in current:
            name, id, fold = item
            idList.append(id)
        lines = a.split('\n')
        with open(WHITELIST, 'a') as f:
            for item in lines:
                try:
                    name, id, folder = eval(item)
                except Exception, e:
                    log("Error Adding: '%s' / %s" % (item, str(e)), xbmc.LOGERROR)
                    continue
                log("%s / %s / %s" % (name, id, folder), xbmc.LOGDEBUG)
                if not id in idList:
                    count += 1
                    writing = "['%s', '%s', '%s']" % (name, id, folder)
                    if len(idList) + count > 1: writing = "\n%s" % writing
                    f.write(writing)
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]%s Item(s) Agregados[/COLOR]" % (COLOR2, count))
    elif do == 'export':
        source = DIALOG.browse(3, '[COLOR %s]Selecciona donde quieres guardar la White List[/COLOR]' % COLOR2, 'files', '.txt', False, False, HOME)
        log(str(source), xbmc.LOGDEBUG)
        try:
            xbmcvfs.copy(WHITELIST, os.path.join(source, 'whitelist.txt'))
            DIALOG.ok(ADDONTITLE, "[COLOR %s]La Whitelist se ha exportado a:[/COLOR]" % (COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, os.path.join(source, 'whitelist.txt')))
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Whitelist Exportada[/COLOR]" % (COLOR2))
        except Exception, e:
            log("Export Error: %s" % str(e), xbmc.LOGERROR)
            if not DIALOG.yesno(ADDONTITLE, "[COLOR %s]Imposible escribir en el directorio, quieres seleccionar otro?[/COLOR]" % COLOR2, yeslabel="[B][COLOR green]Cambiar directorio[/COLOR][/B]", nolabel="[B][COLOR red]No, Cancelar[/COLOR][/B]"):
                LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Exportacion de Whitelist Cancelado[/COLOR]" % (COLOR2, e))
            else:
                whitelist(export)
    elif do == 'clear':
        if not DIALOG.yesno(ADDONTITLE, "[COLOR %s]Seguro que quieres eliminar tu whitelist?" % COLOR2, "Este proceso es irreversible.[/COLOR]", yeslabel="[B][COLOR green]Si, eliminar[/COLOR][/B]", nolabel="[B][COLOR red]No, Cancelar[/COLOR][/B]"):
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Limpiar Whitelist: Cancelado[/COLOR]" % (COLOR2))
            return
        try: 
            os.remove(WHITELIST)
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Whitelist: limpiado[/COLOR]" % (COLOR2))
        except: 
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Error limpiando Whitelist![/COLOR]" % (COLOR2))

def clearPackages(over=None):
    if os.path.exists(PACKAGES):
        try:
            for root, dirs, files in os.walk(PACKAGES):
                file_count = 0
                file_count += len(files)
                if file_count > 0:
                    size = convertSize(getSize(PACKAGES))
                    if over: yes=1
                    else: yes=DIALOG.yesno("[COLOR %s]Delete Package Files" % COLOR2, "[COLOR %s]%s[/COLOR] files found / [COLOR %s]%s[/COLOR] in size." % (COLOR1, str(file_count), COLOR1, size), "Do you want to delete them?[/COLOR]", nolabel='[B][COLOR red]Don\'t Clear[/COLOR][/B]',yeslabel='[B][COLOR green]Clear Packages[/COLOR][/B]')
                    if yes:
                        for f in files: os.unlink(os.path.join(root, f))
                        for d in dirs: shutil.rmtree(os.path.join(root, d))
                        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Limpiando paquetes: Ok[/COLOR]' % COLOR2)
                else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Limpiando paquetes: Ninguno encontrado![/COLOR]' % COLOR2)
        except Exception, e:
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Limpiando paquetes: Error![/COLOR]' % COLOR2)
            log("Clear Packages Error: %s" % str(e), xbmc.LOGERROR)
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Limpiando paquetes: Ninguno encontrado![/COLOR]' % COLOR2)

def clearPackagesStartup():
    start = datetime.utcnow() - timedelta(minutes=3)
    file_count = 0; cleanupsize = 0
    if os.path.exists(PACKAGES):
        pack = os.listdir(PACKAGES)
        pack.sort(key=lambda f: os.path.getmtime(os.path.join(PACKAGES, f)))
        try:
            for item in pack:
                file = os.path.join(PACKAGES, item)
                lastedit = datetime.utcfromtimestamp(os.path.getmtime(file))
                if lastedit <= start:
                    if os.path.isfile(file):
                        file_count += 1
                        cleanupsize += os.path.getsize(file)
                        os.unlink(file)
                    elif os.path.isdir(file): 
                        cleanupsize += getSize(file)
                        cleanfiles, cleanfold = cleanHouse(file)
                        file_count += cleanfiles + cleanfold
                        try:
                            shutil.rmtree(file)
                        except Exception, e:
                            log("Error al eliminar %s: %s" % (file, str(e), xbmc.LOGERROR))
            if file_count > 0: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiando paquetes: Ok: %s[/COLOR]' % (COLOR2, convertSize(cleanupsize)))
            else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiando paquetes: Ninguno encontrado![/COLOR]' % COLOR2)
        except Exception, e:
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiando paquetes: Error![/COLOR]' % COLOR2)
            log("Clear Packages Error: %s" % str(e), xbmc.LOGERROR)
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiando paquetes: Ninguno encontrado![/COLOR]' % COLOR2)

def clearCache(over=None):
    PROFILEADDONDATA = os.path.join(PROFILE,'addon_data')
    dbfiles   = [
        (os.path.join(ADDONDATA, 'plugin.video.phstreams', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.bob', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.specto', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.genesis', 'cache.db')),
        (os.path.join(ADDONDATA, 'plugin.video.exodus', 'cache.db')),
        (os.path.join(DATABASE,  'onechannelcache.db')),
        (os.path.join(DATABASE,  'saltscache.db')),
        (os.path.join(DATABASE,  'saltshd.lite.db'))]
        
    cachelist = [
        (PROFILEADDONDATA),
        (ADDONDATA),
        (os.path.join(HOME,'cache')),
        (os.path.join(HOME,'temp')),
        (os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'Other')),
        (os.path.join('/private/var/mobile/Library/Caches/AppleTV/Video/', 'LocalAndRental')),
        (os.path.join(ADDONDATA,'script.module.simple.downloader')),
        (os.path.join(ADDONDATA,'plugin.video.itv','Images')),
        (os.path.join(PROFILEADDONDATA,'script.module.simple.downloader')),
        (os.path.join(PROFILEADDONDATA,'plugin.video.itv','Images'))]
        
    delfiles = 0
    excludes = ['meta_cache', 'archive_cache']
    for item in cachelist:
        if os.path.exists(item) and not item in [ADDONDATA, PROFILEADDONDATA]:
            for root, dirs, files in os.walk(item):
                dirs[:] = [d for d in dirs if d not in excludes]
                file_count = 0
                file_count += len(files)
                if file_count > 0:
                    for f in files:
                        if not f in LOGFILES:
                            try:
                                os.unlink(os.path.join(root, f))
                                log("[Wiped] %s" % os.path.join(root, f), xbmc.LOGNOTICE)
                                delfiles += 1
                            except:
                                pass
                        else: log('Ignore Log File: %s' % f, xbmc.LOGNOTICE)
                    for d in dirs:
                        try:
                            shutil.rmtree(os.path.join(root, d))
                            delfiles += 1
                            log("[Success] cleared %s files from %s" % (str(file_count), os.path.join(item,d)), xbmc.LOGNOTICE)
                        except:
                            log("[Failed] to wipe cache in: %s" % os.path.join(item,d), xbmc.LOGNOTICE)
        else:
            for root, dirs, files in os.walk(item):
                dirs[:] = [d for d in dirs if d not in excludes]
                for d in dirs:
                    if not str(d.lower()).find('cache') == -1:
                        try:
                            shutil.rmtree(os.path.join(root, d))
                            delfiles += 1
                            log("[Success] wiped %s " % os.path.join(root,d), xbmc.LOGNOTICE)
                        except:
                            log("[Failed] to wipe cache in: %s" % os.path.join(item,d), xbmc.LOGNOTICE)
    if INCLUDEVIDEO == 'true' and over == None:
        files = []
        if INCLUDEALL == 'true': files = dbfiles
        else:
            if INCLUDEBOB == 'true':     files.append(os.path.join(ADDONDATA, 'plugin.video.bob', 'cache.db'))
            if INCLUDEPHOENIX == 'true': files.append(os.path.join(ADDONDATA, 'plugin.video.phstreams', 'cache.db'))
            if INCLUDESPECTO == 'true':  files.append(os.path.join(ADDONDATA, 'plugin.video.specto', 'cache.db'))
            if INCLUDEGENESIS == 'true': files.append(os.path.join(ADDONDATA, 'plugin.video.genesis', 'cache.db'))
            if INCLUDEEXODUS == 'true':  files.append(os.path.join(ADDONDATA, 'plugin.video.exodus', 'cache.db'))
            if INCLUDEONECHAN == 'true': files.append(os.path.join(DATABASE,  'onechannelcache.db'))
            if INCLUDESALTS == 'true':   files.append(os.path.join(DATABASE,  'saltscache.db'))
            if INCLUDESALTSHD == 'true': files.append(os.path.join(DATABASE,  'saltshd.lite.db'))
        if len(files) > 0:
            for item in files:
                if os.path.exists(item):
                    delfiles += 1
                    try:
                        textdb = database.connect(item)
                        textexe = textdb.cursor()
                    except Exception, e:
                        log("DB Connection error: %s" % str(e), xbmc.LOGERROR)
                        continue
                    if 'Database' in item:
                        try:
                            textexe.execute("DELETE FROM url_cache")
                            textexe.execute("VACUUM")
                            textdb.commit()
                            textexe.close()
                            log("[Success] wiped %s" % item, xbmc.LOGNOTICE)
                        except Exception, e:
                            log("[Failed] wiped %s: %s" % (item, str(e)), xbmc.LOGNOTICE)
                    else:
                        textexe.execute("SELECT name FROM sqlite_master WHERE type = 'table'")
                        for table in textexe.fetchall():
                            try:
                                textexe.execute("DELETE FROM %s" % table[0])
                                textexe.execute("VACUUM")
                                textdb.commit()
                                log("[Success] wiped %s in %s" % (table, item), xbmc.LOGNOTICE)
                            except Exception, e:
                                log("[Failed] wiped %s in %s: %s" % (table, item, str(e)), xbmc.LOGNOTICE)
                        textexe.close()
        else: log("Clear Cache: Clear Video Cache Not Enabled", xbmc.LOGNOTICE)
    LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiando cache: Eliminado/s %s archivos[/COLOR]' % (COLOR2, delfiles))

def checkSources():
    if not os.path.exists(SOURCES):
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]No se ha encontrado el archivo Sources.xml" % COLOR2)
        return False
    x      = 0
    bad    = []
    remove = []
    f      = open(SOURCES)
    a      = f.read()
    temp   = a.replace('\r','').replace('\n','').replace('\t','')
    match  = re.compile('<files>.+?</files>').findall(temp)
    f.close()
    if len(match) > 0:
        match2  = re.compile('<source>.+?<name>(.+?)</name>.+?<path pathversion="1">(.+?)</path>.+?<allowsharing>(.+?)</allowsharing>.+?</source>').findall(match[0])
        DP.create(ADDONTITLE, "[COLOR %s]Escaneando fuentes para encontrar links rotos[/COLOR]" % COLOR2)
        for name, path, sharing in match2:
            x     += 1
            perc   = int(percentage(x, len(match2)))
            DP.update(perc, '', "[COLOR %s]Comprobando [COLOR %s]%s[/COLOR]:[/COLOR]" % (COLOR2, COLOR1, name), "[COLOR %s]%s[/COLOR]" % (COLOR1, path))
            if 'http' in path:
                working = workingURL(path)
                if not working == True:
                    bad.append([name, path, sharing, working])

        log("Bad Sources: %s" % len(bad), xbmc.LOGNOTICE)
        if len(bad) > 0:
            choice = DIALOG.yesno(ADDONTITLE, "[COLOR %s]%s[/COLOR][COLOR %s] Una o varias fuente(s) se han encontrado rotas" % (COLOR1, len(bad), COLOR2),"Quieres eliminarlas todas o una a una?[/COLOR]", yeslabel="[B][COLOR green]Todas[/COLOR][/B]", nolabel="[B][COLOR red]Una a una[/COLOR][/B]")
            if choice == 1:
                remove = bad
            else:
                for name, path, sharing, working in bad: 
                    log("%s sources: %s, %s" % (name, path, working), xbmc.LOGNOTICE)
                    if DIALOG.yesno(ADDONTITLE, "[COLOR %s]%s[/COLOR][COLOR %s] ha encontrado una de la(s) fuente(s) rota(s)" % (COLOR1, name, COLOR2), "[COLOR %s]%s[/COLOR]" % (COLOR1, path), "[COLOR %s]%s[/COLOR]" % (COLOR1, working), yeslabel="[B][COLOR green]Eliminar fuente[/COLOR][/B]", nolabel="[B][COLOR red]Mantener fuente[/COLOR][/B]"):
                        remove.append([name, path, sharing, working])
                        log("Removing Source %s" % name, xbmc.LOGNOTICE)
                    else: log("Source %s was not removed" % name, xbmc.LOGNOTICE)
            if len(remove) > 0:
                for name, path, sharing, working in remove: 
                    a = a.replace('\n        <source>\n            <name>%s</name>\n            <path pathversion="1">%s</path>\n            <allowsharing>%s</allowsharing>\n        </source>' % (name, path, sharing), '')
                    log("Removing Source %s" % name, xbmc.LOGNOTICE)
                
                f = open(SOURCES, mode='w')
                f.write(str(a))
                f.close()
                alive = len(match) - len(bad)
                kept = len(bad) - len(remove)
                removed = len(remove)
                DIALOG.ok(ADDONTITLE, "[COLOR %s]Escaneando fuentes para encontrar links rotos: completado" % COLOR2, "Funcionando: [COLOR %s]%s[/COLOR] | Mantenidos: [COLOR %s]%s[/COLOR] | Eliminados: [COLOR %s]%s[/COLOR][/COLOR]" % (COLOR2, COLOR1, alive, COLOR1, kept, COLOR1, removed))
            else: log("No Bad Sources to be removed.", xbmc.LOGNOTICE)
        else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Todas las fuentes son correctas[/COLOR]" % COLOR2)
    else: log("No Sources Found", xbmc.LOGNOTICE)

def checkRepos():
    DP.create(ADDONTITLE, '[COLOR %s]Comprobando repositorios...[/COLOR]' % COLOR2)
    badrepos = []
    ebi('UpdateAddonRepos')
    repolist = glob.glob(os.path.join(ADDONS,'repo*'))
    if len(repolist) == 0:
        DP.close()
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]No se han encontrado repositorios![/COLOR]" % COLOR2)
        return
    sleeptime = len(repolist); start = 0;
    while start < sleeptime:
        start += 1
        if DP.iscanceled(): break
        perc = int(percentage(start, sleeptime))
        DP.update(perc, '', '[COLOR %s]Comprobando: [/COLOR][COLOR %s]%s[/COLOR]' % (COLOR2, COLOR1, repolist[start-1].replace(ADDONS, '')[1:]))
        xbmc.sleep(1000)
    if DP.iscanceled(): 
        DP.close()
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Activar Addons: Cancelado[/COLOR]" % COLOR2)
        sys.exit()
    DP.close()
    logfile = Grab_Log(False)
    fails = re.compile('CRepositoryUpdateJob(.+?)failed').findall(logfile)
    for item in fails:
        log("Bad Repository: %s " % item, xbmc.LOGNOTICE)
        brokenrepo = item.replace('[','').replace(']','').replace(' ','').replace('/','').replace('\\','')
        if not brokenrepo in badrepos:
            badrepos.append(brokenrepo)
    if len(badrepos) > 0:
        msg  = "[COLOR %s]Esto es una lista de repositorios que no funcionan. Eso no significa que esten rotos, ya que algunas veces de forma puntual puede dejar de funcionar el servidor donde se alojan. Por favor, haz varias comprobaciones antes de eliminarlos para asegurarte que estan rotos.[/COLOR][CR][CR][COLOR %s]" % (COLOR2, COLOR1)
        msg += '[CR]'.join(badrepos)
        msg += '[/COLOR]'
        TextBox("%s: Repositorios no funcionales" % ADDONTITLE, msg)
    else: 
        LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Todos los repositorios funcionando![/COLOR]" % COLOR2)

#############################
####### MATAR KODI ##########
#############################

def killxbmc(over=None):
    if over: choice = 1
    else: choice = DIALOG.yesno('Fozar cierre de Kodi', '[COLOR %s]Vas a cerrar Kodi' % COLOR2, 'Quieres continuar?[/COLOR]', nolabel='[B][COLOR red]No, Cancel[/COLOR][/B]',yeslabel='[B][COLOR green]Forzar cierre[/COLOR][/B]')
    if choice == 1:
        log("Force Closing Kodi: Platform[%s]" % str(platform()), xbmc.LOGNOTICE)
        os._exit(1)

def redoThumbs():
    if not os.path.exists(THUMBS): os.makedirs(THUMBS)
    thumbfolders = '0123456789abcdef'
    videos = os.path.join(THUMBS, 'Video', 'Bookmarks')
    for item in thumbfolders:
        foldname = os.path.join(THUMBS, item)
        if not os.path.exists(foldname): os.makedirs(foldname)
    if not os.path.exists(videos): os.makedirs(videos)

def reloadFix(default=None):
    DIALOG.ok(ADDONTITLE, "[COLOR %s]AVISO: A veces al recargar el perfil, Kodi se cierra.  Mientras Kodi recarga el pefil, por favor, no toques ningun boton![/COLOR]" % COLOR2)
    if not os.path.exists(PACKAGES): os.makedirs(PACKAGES)
    if default == None:
        lookandFeelData('save')
    redoThumbs()
    ebi('ActivateWindow(Home)')
    reloadProfile()
    xbmc.sleep(10000)
    if KODIV >= 17: kodi17Fix()
    if default == None:
        log("Switching to: %s" % getS('defaultskin'))
        gotoskin = getS('defaultskin')
        skinSwitch.swapSkins(gotoskin)
        x = 0
        while not xbmc.getCondVisibility("Window.isVisible(yesnodialog)") and x < 150:
            x += 1
            xbmc.sleep(200)
        if xbmc.getCondVisibility("Window.isVisible(yesnodialog)"):
            ebi('SendClick(11)')
        lookandFeelData('restore')
    addonUpdates('reset')
    forceUpdate()
    ebi("ReloadSkin()")

def skinToDefault():
    if not currSkin() in ['skin.confluence', 'skin.estuary']:
        skin = 'skin.confluence' if KODIV < 17 else 'skin.estuary'
    swapSkins(skin)

def swapSkins(goto):
    skinSwitch.swapSkins(goto)
    x = 0
    xbmc.sleep(1000)
    while not xbmc.getCondVisibility("Window.isVisible(yesnodialog)") and x < 150:
        x += 1
        xbmc.sleep(100)
        ebi('SendAction(Select)')
    
    if xbmc.getCondVisibility("Window.isVisible(yesnodialog)"):
        ebi('SendClick(11)')
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Instalacion limpia: Tiempo para cambiar la skin agotado![/COLOR]' % COLOR2); return False
    xbmc.sleep(500)

def mediaCenter():
    if str(HOME).lower().find('kodi'):
        return 'Kodi'
    elif str(HOME).lower().find('spmc'):
        return 'SPMC'
    else: 
        return 'Unknown Fork'

def kodi17Fix():
    addonlist = glob.glob(os.path.join(ADDONS, '*/'))
    disabledAddons = []
    for folder in sorted(addonlist, key = lambda x: x):
        addonxml = os.path.join(folder, 'addon.xml')
        if os.path.exists(addonxml):
            fold   = folder.replace(ADDONS, '')[1:-1]
            f      = open(addonxml)
            a      = f.read()
            aid    = parseDOM(a, 'addon', ret='id')
            f.close()
            try:
                add    = xbmcaddon.Addon(id=aid[0])
            except:
                try:
                    log("%s was disabled" % aid[0], xbmc.LOGDEBUG)
                    disabledAddons.append(aid[0])
                except:
                    try:
                        log("%s was disabled" % fold, xbmc.LOGDEBUG)
                        disabledAddons.append(fold)
                    except:
                        if len(aid) == 0: log("Imposible activar: %s(No se puede determinar el Addon ID)" % fold, xbmc.LOGERROR)
                        else: log("Unabled to enable: %s" % folder, xbmc.LOGERROR)
    if len(disabledAddons) > 0:
        x = 0
        DP.create(ADDONTITLE,'[COLOR %s]Activando addons desactivados' % COLOR2,'', 'Por favor, espere[/COLOR]')
        for item in disabledAddons:
            x += 1
            prog = int(percentage(x, len(disabledAddons)))
            DP.update(prog, "", "Activando: [COLOR %s]%s[/COLOR]" % (COLOR1, item))
            addonDatabase(item, 1)
            if DP.iscanceled(): break
        if DP.iscanceled(): 
            DP.close()
            LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), "[COLOR %s]Activando addons desactivados: Cancelado![/COLOR]" % COLOR2)
            sys.exit()
        DP.close()
    forceUpdate()
    ebi("ReloadSkin()")

def addonDatabase(addon=None, state=1):
    dbfile = latestDB('Addons')
    dbfile = os.path.join(DATABASE, dbfile)
    installedtime = str(datetime.now())[:-7]
    if os.path.exists(dbfile):
        try:
            textdb = database.connect(dbfile)
            textexe = textdb.cursor()
        except Exception, e:
            log("DB Connection Error: %s" % str(e), xbmc.LOGERROR)
            return False
    else: return False
    if state == 2:
        try:
            textexe.execute("DELETE FROM installed WHERE addonID = ?", (addon,))
            textdb.commit()
            textexe.close()
        except Exception, e:
            log("Error Removing %s from DB" % addon)
        return True
    try:
        textexe.execute("SELECT id, addonID, enabled FROM installed WHERE addonID = ?", (addon,))
        found = textexe.fetchone()
        if found == None:
            textexe.execute('INSERT INTO installed (addonID , enabled, installDate) VALUES (?,?,?)', (addon, state, installedtime,))
            log("Insert %s into db" % addon)
        else:
            tid, taddonid, tenabled = found
            textexe.execute('UPDATE installed SET enabled = ? WHERE id = ? ', (state, tid,))
            log("Updated %s in db" % addon)
        textdb.commit()
        textexe.close()
    except Exception, e:
        log("Erroring enabling addon: %s" % addon)

##########################
## PURGAR BASE DE DATOS ##
##########################
def purgeDb(name):
    #dbfile = name.replace('.db','').translate(None, digits)
    #if dbfile not in ['Addons', 'ADSP', 'Epg', 'MyMusic', 'MyVideos', 'Textures', 'TV', 'ViewModes']: return False
    #textfile = os.path.join(DATABASE, name)
    log('Purging DB %s.' % name, xbmc.LOGNOTICE)
    if os.path.exists(name):
        try:
            textdb = database.connect(name)
            textexe = textdb.cursor()
        except Exception, e:
            log("DB Connection Error: %s" % str(e), xbmc.LOGERROR)
            return False
    else: log('%s not found.' % name, xbmc.LOGERROR); return False
    textexe.execute("SELECT name FROM sqlite_master WHERE type = 'table'")
    for table in textexe.fetchall():
        if table[0] == 'version': 
            log('Data from table `%s` skipped.' % table[0], xbmc.LOGDEBUG)
        else:
            try:
                textexe.execute("DELETE FROM %s" % table[0])
                textdb.commit()
                log('Data from table `%s` cleared.' % table[0], xbmc.LOGDEBUG)
            except Exception, e: log("DB Remove Table `%s` Error: %s" % (table[0], str(e)), xbmc.LOGERROR)
    textexe.close()
    log('%s DB Purging Complete.' % name, xbmc.LOGNOTICE)
    show = name.replace('\\', '/').split('/')
    LogNotify("[COLOR %s]Purga de Base de datos[/COLOR]" % COLOR1, "[COLOR %s]%s Completado[/COLOR]" % (COLOR2, show[len(show)-1]))

def oldThumbs():
    dbfile = os.path.join(DATABASE, latestDB('Textures'))
    use    = 10
    week   = TODAY - timedelta(days=7)
    ids    = []
    images = []
    size   = 0
    if os.path.exists(dbfile):
        try:
            textdb = database.connect(dbfile)
            textexe = textdb.cursor()
        except Exception, e:
            log("DB Connection Error: %s" % str(e), xbmc.LOGERROR)
            return False
    else: log('%s not found.' % dbfile, xbmc.LOGERROR); return False
    textexe.execute("SELECT idtexture FROM sizes WHERE usecount < ? AND lastusetime < ?", (use, str(week)))
    found = textexe.fetchall()
    for rows in found:
        idfound = rows[0]
        ids.append(idfound)
        textexe.execute("SELECT cachedurl FROM texture WHERE id = ?", (idfound, ))
        found2 = textexe.fetchall()
        for rows2 in found2:
            images.append(rows2[0])
    log("%s total thumbs cleaned up." % str(len(images)), xbmc.LOGNOTICE)
    for id in ids:       
        textexe.execute("DELETE FROM sizes   WHERE idtexture = ?", (id, ))
        textexe.execute("DELETE FROM texture WHERE id        = ?", (id, ))
    textexe.execute("VACUUM")
    textdb.commit()
    textexe.close()
    for image in images:
        path = os.path.join(THUMBS, image)
        try:
            imagesize = os.path.getsize(path)
            os.remove(path)
            size += imagesize
        except:
            pass
    removed = convertSize(size)
    if len(images) > 0: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiar miniaturas: %s Archivos / %s MB[/COLOR]!' % (COLOR2, str(len(images)), removed))
    else: LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE), '[COLOR %s]Limpiar miniaturas: No se ha encontrado ninguno![/COLOR]' % COLOR2)

def parseDOM(html, name=u"", attrs={}, ret=False):

    if isinstance(html, str):
        try:
            html = [html.decode("utf-8")]
        except:
            html = [html]
    elif isinstance(html, unicode):
        html = [html]
    elif not isinstance(html, list):
        return u""

    if not name.strip():
        return u""

    ret_lst = []
    for item in html:
        temp_item = re.compile('(<[^>]*?\n[^>]*?>)').findall(item)
        for match in temp_item:
            item = item.replace(match, match.replace("\n", " "))

        lst = []
        for key in attrs:
            lst2 = re.compile('(<' + name + '[^>]*?(?:' + key + '=[\'"]' + attrs[key] + '[\'"].*?>))', re.M | re.S).findall(item)
            if len(lst2) == 0 and attrs[key].find(" ") == -1:
                lst2 = re.compile('(<' + name + '[^>]*?(?:' + key + '=' + attrs[key] + '.*?>))', re.M | re.S).findall(item)

            if len(lst) == 0:
                lst = lst2
                lst2 = []
            else:
                test = range(len(lst))
                test.reverse()
                for i in test:
                    if not lst[i] in lst2:
                        del(lst[i])

        if len(lst) == 0 and attrs == {}:
            lst = re.compile('(<' + name + '>)', re.M | re.S).findall(item)
            if len(lst) == 0:
                lst = re.compile('(<' + name + ' .*?>)', re.M | re.S).findall(item)

        if isinstance(ret, str):
            lst2 = []
            for match in lst:
                attr_lst = re.compile('<' + name + '.*?' + ret + '=([\'"].[^>]*?[\'"])>', re.M | re.S).findall(match)
                if len(attr_lst) == 0:
                    attr_lst = re.compile('<' + name + '.*?' + ret + '=(.[^>]*?)>', re.M | re.S).findall(match)
                for tmp in attr_lst:
                    cont_char = tmp[0]
                    if cont_char in "'\"":
                        if tmp.find('=' + cont_char, tmp.find(cont_char, 1)) > -1:
                            tmp = tmp[:tmp.find('=' + cont_char, tmp.find(cont_char, 1))]

                        if tmp.rfind(cont_char, 1) > -1:
                            tmp = tmp[1:tmp.rfind(cont_char)]
                    else:
                        if tmp.find(" ") > 0:
                            tmp = tmp[:tmp.find(" ")]
                        elif tmp.find("/") > 0:
                            tmp = tmp[:tmp.find("/")]
                        elif tmp.find(">") > 0:
                            tmp = tmp[:tmp.find(">")]

                    lst2.append(tmp.strip())
            lst = lst2
        else:
            lst2 = []
            for match in lst:
                endstr = u"</" + name

                start = item.find(match)
                end = item.find(endstr, start)
                pos = item.find("<" + name, start + 1 )

                while pos < end and pos != -1:
                    tend = item.find(endstr, end + len(endstr))
                    if tend != -1:
                        end = tend
                    pos = item.find("<" + name, pos + 1)

                if start == -1 and end == -1:
                    temp = u""
                elif start > -1 and end > -1:
                    temp = item[start + len(match):end]
                elif end > -1:
                    temp = item[:end]
                elif start > -1:
                    temp = item[start + len(match):]

                if ret:
                    endstr = item[end:item.find(">", item.find(endstr)) + 1]
                    temp = match + temp + endstr

                item = item[item.find(temp, item.find(match)) + len(temp):]
                lst2.append(temp)
            lst = lst2
        ret_lst += lst

    return ret_lst


def replaceHTMLCodes(txt):
    txt = re.sub("(&#[0-9]+)([^;^0-9]+)", "\\1;\\2", txt)
    txt = HTMLParser.HTMLParser().unescape(txt)
    txt = txt.replace("&quot;", "\"")
    txt = txt.replace("&amp;", "&")
    return txt

import os
from shutil import *
def copytree(src, dst, symlinks=False, ignore=None):
    names = os.listdir(src)
    if ignore is not None:
        ignored_names = ignore(src, names)
    else:
        ignored_names = set()
    if not os.path.isdir(dst):
        os.makedirs(dst)
    errors = []
    for name in names:
        if name in ignored_names:
            continue
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks, ignore)
            else:
                copy2(srcname, dstname)
        except Error, err:
            errors.extend(err.args[0])
        except EnvironmentError, why:
            errors.append((srcname, dstname, str(why)))
    try:
        copystat(src, dst)
    except OSError, why:
        errors.extend((src, dst, str(why)))
    if errors:
        raise Error, errors"))
