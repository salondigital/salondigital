exec("import re;import base64");exec(base64.b64decode("import xbmc, xbmcaddon, xbmcgui, xbmcplugin, os, sys, xbmcvfs, glob
import shutil
import urllib2,urllib
import re
from datetime import date, datetime, timedelta
from resources.libs import extract, downloader, notify, loginit, debridit, traktit, skinSwitch, uploadLog, wizard as wiz

ADDON_ID       = xbmcaddon.Addon().getAddonInfo('id')
ADDONTITLE     = 'SalonDigital'
BUILDFILE      = 'https://raw.githubusercontent.com/pedrojuanamelie/universidadpal/master/mfhg2.txt'
ADDON          = wiz.addonId(ADDON_ID)
VERSION        = wiz.addonInfo(ADDON_ID,'version')
ADDONPATH      = wiz.addonInfo(ADDON_ID,'path')
ADDONID        = wiz.addonInfo(ADDON_ID,'id')
DIALOG         = xbmcgui.Dialog()
DP             = xbmcgui.DialogProgress()
HOME           = xbmc.translatePath('special://home/')
PROFILE        = xbmc.translatePath('special://profile/')
KODIHOME       = xbmc.translatePath('special://xbmc/')
ADDONS         = os.path.join(HOME,     'addons')
KODIADDONS     = os.path.join(KODIHOME, 'addons')
USERDATA       = os.path.join(HOME,     'userdata')
PLUGIN         = os.path.join(ADDONS,   ADDON_ID)
PACKAGES       = os.path.join(ADDONS,   'packages')
ADDONDATA      = os.path.join(USERDATA, 'addon_data', ADDON_ID)
FANART         = os.path.join(ADDONPATH,'fanart.jpg')
ICON           = os.path.join(ADDONPATH,'icon.png')
ART            = os.path.join(ADDONPATH,'resources', 'art')
SKIN           = xbmc.getSkinDir()
BUILDNAME      = wiz.getS('buildname')
DEFAULTSKIN    = wiz.getS('defaultskin')
DEFAULTNAME    = wiz.getS('defaultskinname')
DEFAULTIGNORE  = wiz.getS('defaultskinignore')
BUILDVERSION   = wiz.getS('buildversion')
BUILDLATEST    = wiz.getS('latestversion')
BUILDCHECK     = wiz.getS('lastbuildcheck')
DISABLEUPDATE  = wiz.getS('disableupdate')
AUTOCLEANUP    = wiz.getS('autoclean')
AUTOCACHE      = wiz.getS('clearcache')
AUTOPACKAGES   = wiz.getS('clearpackages')
AUTOTHUMBS     = wiz.getS('clearthumbs')
AUTOFEQ        = wiz.getS('autocleanfeq')
AUTONEXTRUN    = wiz.getS('nextautocleanup')
TRAKTSAVE      = wiz.getS('traktlastsave')
REALSAVE       = wiz.getS('debridlastsave')
LOGINSAVE      = wiz.getS('loginlastsave')
KEEPTRAKT      = wiz.getS('keeptrakt')
KEEPREAL       = wiz.getS('keepdebrid')
KEEPLOGIN      = wiz.getS('keeplogin')
INSTALLED      = wiz.getS('installed')
EXTRACT        = wiz.getS('extract')
EXTERROR       = wiz.getS('errors')
NOTIFY         = wiz.getS('notify')
NOTEDISMISS    = wiz.getS('notedismiss')
NOTEID         = wiz.getS('noteid')
BACKUPLOCATION = ADDON.getSetting('path') if not ADDON.getSetting('path') == '' else HOME
MYBUILDS       = os.path.join(BACKUPLOCATION, 'SalonDigital_Backup', '')
NOTEID         = 0 if NOTEID == "" else int(NOTEID)
AUTOFEQ        = int(AUTOFEQ) if AUTOFEQ.isdigit() else 0
TODAY          = date.today()
TOMORROW       = TODAY + timedelta(days=1)
TWODAYS        = TODAY + timedelta(days=2)
THREEDAYS      = TODAY + timedelta(days=3)
ONEWEEK        = TODAY + timedelta(days=7)
KODIV          = float(xbmc.getInfoLabel("System.BuildVersion")[:4])
EXCLUDES       = [ADDON_ID , 'repository.salondigital']
UPDATECHECK    = 0
NEXTCHECK      = TODAY + timedelta(days=UPDATECHECK)
NOTIFICATION   = 'http://'
ENABLE         = 'No'
HEADERMESSAGE    = 'SalonDigital Updater.....'
AUTOUPDATE     = 'No'
WIZARDFILE     = 'https://salondigital.es/wizard.php'
AUTOINSTALL    = 'Yes'
REPOID         = 'repository.salondigital'
REPOADDONXML   = 'https://github.com/salondigital/salondigital/raw/master/repository.salondigital/addon.xml'
REPOZIPURL     = 'https://github.com/salondigital/salondigital/raw/master/'
COLOR1         = 'orange'
COLOR2         = 'white'
WORKING        = True if wiz.workingURL(BUILDFILE) == True else False
FAILED         = False

#######################################
#### Comprobar actualizaciones   ######
#######################################
def checkUpdate():
    BUILDNAME      = wiz.getS('buildname')
    BUILDVERSION   = wiz.getS('buildversion')
    link           = wiz.openURL(BUILDFILE).replace('\n','').replace('\r','').replace('\t','')
    match          = re.compile('name="%s".+?ersion="(.+?)".+?con="(.+?)".+?anart="(.+?)"' % BUILDNAME).findall(link)
    if len(match) > 0:
        version = match[0][0]
        icon    = match[0][1]
        fanart  = match[0][2]
        wiz.setS('latestversion', version)
        if version > BUILDVERSION:
            if DISABLEUPDATE == 'false':
                wiz.log("[Comprobar actualizaciones] [Version instalada: %s] [Version mas actual: %s] Abriendo ventana de actualizacion" % (BUILDVERSION, version), xbmc.LOGNOTICE)
                notify.updateWindow(BUILDNAME, BUILDVERSION, version, icon, fanart)
            else: wiz.log("[Comprobar actualizaciones] [Version instalada: %s] [Version mas actual: %s] Ventana de actualizacion desactivada" % (BUILDVERSION, version), xbmc.LOGNOTICE)
        else: wiz.log("[Comprobar actualizaciones] [Version instalada: %s] [Version mas actual: %s]" % (BUILDVERSION, version), xbmc.LOGNOTICE)
    else: wiz.log("[Comprobar actualizaciones] ERROR: Imposible encontrar actualizaciones el archivo txt de SalonDigital", xbmc.LOGERROR)

def checkSkin():
    wiz.log("[Comprobacion de actualizacion] Fallo en comprobacion inicial de skin")
    DEFAULTSKIN   = wiz.getS('defaultskin')
    DEFAULTNAME   = wiz.getS('defaultskinname')
    DEFAULTIGNORE = wiz.getS('defaultskinignore')
    gotoskin = False
    if not DEFAULTSKIN == '':
        if os.path.exists(os.path.join(ADDONS, DEFAULTSKIN)):
            if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Parece que Kodi ha vuelto a poner la skin predeterminada por defecto llamada [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, SKIN[5:].title()), "Quieres volver a poner la skin por defecto de SalonDigital?[/COLOR]", '([COLOR %s]%s[/COLOR])' % (COLOR1, DEFAULTNAME)):
                gotoskin = DEFAULTSKIN
                gotoname = DEFAULTNAME
            else: wiz.log("La skin no se ha reseteado", xbmc.LOGNOTICE); wiz.setS('defaultskinignore', 'true'); gotoskin = False
        else: wiz.setS('defaultskin', ''); wiz.setS('defaultskinname', ''); DEFAULTSKIN = ''; DEFAULTNAME = ''
    if DEFAULTSKIN == '':
        skinname = []
        skinlist = []
        for folder in glob.glob(os.path.join(ADDONS, 'skin.*/')):
            xml = "%s/addon.xml" % folder
            if os.path.exists(xml):
                f  = open(xml,mode='r'); g = f.read().replace('\n','').replace('\r','').replace('\t',''); f.close();
                match  = wiz.parseDOM(g, 'addon', ret='id')
                match2 = wiz.parseDOM(g, 'addon', ret='name')
                wiz.log("%s: %s" % (folder, str(match[0])), xbmc.LOGNOTICE)
                if len(match) > 0: skinlist.append(str(match[0])); skinname.append(str(match2[0]))
                else: wiz.log("ID no encontrada para %s" % folder, xbmc.LOGNOTICE)
            else: wiz.log("ID no encontrada para %s" % folder, xbmc.LOGNOTICE)
        if len(skinlist) > 0:
            if len(skinlist) > 1:
                if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Parece que Kodi ha vuelto a poner la skin predeterminada por defecto llamada [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, SKIN[5:].title()), "Quieres ver la lista de skins instaladas en Kodi?[/COLOR]"):
                    choice = DIALOG.select("Selecciona una skin para aplicar los cambios!", skinname)
                    if choice == -1: wiz.log("La skin no se ha reseteado", xbmc.LOGNOTICE); wiz.setS('defaultskinignore', 'true')
                    else: 
                        gotoskin = skinlist[choice]
                        gotoname = skinname[choice]
                else: wiz.log("La skin no se ha reseteado", xbmc.LOGNOTICE); wiz.setS('defaultskinignore', 'true')
            else:
                if DIALOG.yesno(ADDONTITLE, "[COLOR %s]Parece que Kodi ha vuelto a poner la skin predeterminada por defecto llamada [COLOR %s]%s[/COLOR]" % (COLOR2, COLOR1, SKIN[5:].title()), "Quieres volver a poner la skin por defecto de SalonDigital?[/COLOR]", '([COLOR %s]%s[/COLOR])' % (COLOR1, skinname[0])):
                    gotoskin = skinlist[0]
                    gotoname = skinname[0]
                else: wiz.log("La skin no se ha reseteado", xbmc.LOGNOTICE); wiz.setS('defaultskinignore', 'true')
        else: wiz.log("No se han encontrado skins en la instalacion.", xbmc.LOGNOTICE); wiz.setS('defaultskinignore', 'true'); gotoskin = False
    if gotoskin:
        skinSwitch.swapSkins(gotoskin)
        x = 0
        xbmc.sleep(1000)
        while not xbmc.getCondVisibility("Window.isVisible(yesnodialog)") and x < 150:
            x += 1
            xbmc.sleep(200)

        if xbmc.getCondVisibility("Window.isVisible(yesnodialog)"):
            wiz.ebi('SendClick(11)')
            wiz.lookandFeelData('restore')
        else: wiz.LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, ADDONTITLE),'[COLOR %s]Se ha agotado el tiempo para cambair la skin![/COLOR]' % COLOR2)
    wiz.log("[Comprobacion de actualizacion] Fallo en comprobacion final de skin", xbmc.LOGNOTICE)

while xbmc.Player().isPlayingVideo():
    xbmc.sleep(1000)

if KODIV >= 17:
    NOW = datetime.now()
    temp = wiz.getS('kodi17iscrap')
    if not temp == '':
        if temp > str(NOW - timedelta(minutes=2)):
            wiz.log("Matando el script de inicio de Kodi")
            sys.exit()
    wiz.log("%s" % (NOW))
    wiz.setS('kodi17iscrap', str(NOW))
    xbmc.sleep(1000)
    if not wiz.getS('kodi17iscrap') == str(NOW):
        wiz.log("Matando el script de inicio de Kodi")
        sys.exit()
    else:
        wiz.log("Continua el script de inicio de Kodi")

wiz.log("[Comprobacion de ruta] Iniciada", xbmc.LOGNOTICE)
path = os.path.split(ADDONPATH)
if not ADDONID == path[1]: DIALOG.ok(ADDONTITLE, '[COLOR %s]Por favor, asegurate de que la carpeta del addon es la misma que el ADDON_ID.[/COLOR]' % COLOR2, '[COLOR %s]Plugin ID:[/COLOR] [COLOR %s]%s[/COLOR]' % (COLOR2, COLOR1, ADDONID), '[COLOR %s]Carpeta del plugin:[/COLOR] [COLOR %s]%s[/COLOR]' % (COLOR2, COLOR1, path)); wiz.log("[Comprobacion de ruta] El ADDON_ID y la carpeta del plugin no coinciden. %s / %s " % (ADDONID, path))
else: wiz.log("[Comprobacion de ruta] Perfecto!", xbmc.LOGNOTICE)

if KODIADDONS in ADDONPATH:
    wiz.log("Copiando ruta al directorio de addons", xbmc.LOGNOTICE)
    if not os.path.exists(ADDONS): os.makedirs(ADDONS)
    newpath = xbmc.translatePath(os.path.join('special://home/addons/', ADDONID))
    if os.path.exists(newpath):
        wiz.log("La carpeta ya existia, limpiando...", xbmc.LOGNOTICE)
        wiz.cleanHouse(newpath)
        wiz.removeFolder(newpath)
    try:
        wiz.copytree(ADDONPATH, newpath)
    except Exception, e:
        pass
    wiz.forceUpdate(True)

try:
    mybuilds = xbmc.translatePath(MYBUILDS)
    if not os.path.exists(mybuilds): xbmcvfs.mkdirs(mybuilds)
except:
    pass

wiz.log("[Auto Instalacion de repositorio] Iniciado", xbmc.LOGNOTICE)
if AUTOINSTALL == 'Yes' and not os.path.exists(os.path.join(ADDONS, REPOID)):
    workingxml = wiz.workingURL(REPOADDONXML)
    if workingxml == True:
        ver = wiz.parseDOM(wiz.openURL(REPOADDONXML), 'addon', ret='version', attrs = {'id': REPOID})
        if len(ver) > 0:
            installzip = '%s-%s.zip' % (REPOID, ver[0])
            workingrepo = wiz.workingURL(REPOZIPURL+installzip)
            if workingrepo == True:
                DP.create(ADDONTITLE,'Descargando repositorio...','', 'Por favor, espere.')
                if not os.path.exists(PACKAGES): os.makedirs(PACKAGES)
                lib=os.path.join(PACKAGES, installzip)
                try: os.remove(lib)
                except: pass
                downloader.download(REPOZIPURL+installzip,lib, DP)
                extract.all(lib, ADDONS, DP)
                try:
                    f = open(os.path.join(ADDONS, REPOID, 'addon.xml'), mode='r'); g = f.read(); f.close()
                    name = wiz.parseDOM(g, 'addon', ret='name', attrs = {'id': REPOID})
                    wiz.LogNotify("[COLOR %s]%s[/COLOR]" % (COLOR1, name[0]), "[COLOR %s]Add-on actualizado[/COLOR]" % COLOR2, icon=os.path.join(ADDONS, REPOID, 'icon.png'))
                except:
                    pass
                if KODIV >= 17: wiz.addonDatabase(REPOID, 1)
                DP.close()
                xbmc.sleep(500)
                wiz.forceUpdate(True)
                wiz.log("[Auto Instalacion de repositorio] Instalado correctamente", xbmc.LOGNOTICE)
            else: 
                wiz.LogNotify("[COLOR %s]Fallo en la instalacion del repositorio[/COLOR]" % COLOR1, "[COLOR %s]URL o ZIP no validos![/COLOR]" % COLOR2)
                wiz.log("[Auto Instalacion de repositorio] Imposible crear una URL valida para el repositorio. %s" % workingrepo, xbmc.LOGERROR)
        else:
            wiz.log("URL no valida para fichero ZIP", xbmc.LOGERROR)
    else: 
        wiz.LogNotify("[COLOR %s]Fallo en la instalacion del repositorio[/COLOR]" % COLOR1, "[COLOR %s]Archivo addon.xml no valido![/COLOR]" % COLOR2)
        wiz.log("[Auto Instalacion de repositorio] Imposible leer el archivo addon.xml.", xbmc.LOGERROR)
elif not AUTOINSTALL == 'Yes': wiz.log("[Auto Instalacion de repositorio] No activado", xbmc.LOGNOTICE)
elif os.path.exists(os.path.join(ADDONS, REPOID)): wiz.log("[Auto Instalacion de repositorio] El repositorio ya esta instalado")

wiz.log("[Auto Instalacion de actualizaciones] Iniciado", xbmc.LOGNOTICE)
if AUTOUPDATE == 'Yes':
    wiz.wizardUpdate('startup')
else: wiz.log("[Auto Instalacion de actualizaciones] No activado", xbmc.LOGNOTICE)

wiz.log("[Servicio de Notificaciones] Iniciado", xbmc.LOGNOTICE)
if ENABLE == 'Yes':
    if not NOTIFY == 'true':
        url = wiz.workingURL(NOTIFICATION)
        if url == True:
            id, msg = wiz.splitNotify(NOTIFICATION)
            if not id == False:
                try:
                    id = int(id); NOTEID = int(NOTEID)
                    if id == NOTEID:
                        if NOTEDISMISS == 'false':
                            notify.notification(msg)
                        else: wiz.log("[Servicio de Notificaciones] id[%s] No funciona" % int(id), xbmc.LOGNOTICE)
                    elif id > NOTEID:
                        wiz.log("[Servicio de Notificaciones] id: %s" % str(id), xbmc.LOGNOTICE)
                        wiz.setS('noteid', str(id))
                        wiz.setS('notedismiss', 'false')
                        notify.notification(msg=msg)
                        wiz.log("[Servicio de Notificaciones] Completado", xbmc.LOGNOTICE)
                except Exception, e:
                    wiz.log("Error en el Servicio de Notificaciones: %s" % str(e), xbmc.LOGERROR)
            else: wiz.log("[Servicio de Notificaciones] Archivo de texto no formateado correctamente")
        else: wiz.log("[Servicio de Notificaciones] URL(%s): %s" % (NOTIFICATION, url), xbmc.LOGNOTICE)
    else: wiz.log("[Servicio de Notificaciones] Apagado", xbmc.LOGNOTICE)
else: wiz.log("[Servicio de Notificaciones] No activado", xbmc.LOGNOTICE)

wiz.log("[Comprobacion de version] Iniciado", xbmc.LOGNOTICE)
if INSTALLED == 'true':
    if KODIV >= 17:
        wiz.kodi17Fix()
        if SKIN in ['skin.confluence', 'skin.estuary']:
            checkSkin()
        FAILED = True
    elif not EXTRACT == '100' and not BUILDNAME == "":
        wiz.log("[Comprobacion de version] Version descomprimida %s/100 con [ERRORS: %s]" % (EXTRACT, EXTERROR), xbmc.LOGNOTICE)
        yes=DIALOG.yesno(ADDONTITLE, '[COLOR %s]%s[/COLOR] [COLOR %s]no instalado correctamente!' % (COLOR1, COLOR2, BUILDNAME), 'Instalado: [COLOR %s]%s[/COLOR] / Errores: [COLOR %s]%s[/COLOR]' % (COLOR1, EXTRACT, COLOR1, EXTERROR), 'Quieres volver a intentarlo?[/COLOR]', nolabel='[B]No, gracias[/B]', yeslabel='[B]Si[/B]')
        wiz.clearS('build')
        FAILED = True
        if yes: 
            wiz.ebi("PlayMedia(plugin://%s/?mode=install&name=%s&url=fresh)" % (ADDON_ID, urllib.quote_plus(BUILDNAME)))
            wiz.log("[Instalacion] Instalacion limpia reactivada", xbmc.LOGNOTICE)
        else: wiz.log("[Instalacion] Instalacion limpia ignorada")
    elif SKIN in ['skin.confluence', 'skin.estuary']:
        wiz.log("[Instalacion] Skin incorrecta: %s" % SKIN, xbmc.LOGNOTICE)
        defaults = wiz.getS('defaultskin')
        if not defaults == '':
            if os.path.exists(os.path.join(ADDONS, defaults)):
                skinSwitch.swapSkins(defaults)
                x = 0
                xbmc.sleep(1000)
                while not xbmc.getCondVisibility("Window.isVisible(yesnodialog)") and x < 150:
                    x += 1
                    xbmc.sleep(200)

                if xbmc.getCondVisibility("Window.isVisible(yesnodialog)"):
                    wiz.ebi('SendClick(11)')
                    wiz.lookandFeelData('restore')
        if not wiz.currSkin() == defaults and not BUILDNAME == "":
            gui = wiz.checkBuild(BUILDNAME, 'gui')
            FAILED = True
            if gui == 'http://':
                wiz.log("[Instalacion] Copia de la skin encontrada en http://", xbmc.LOGNOTICE)
                DIALOG.ok(ADDONTITLE, "[COLOR %s]Parece que la skin y sus opciones no se han instalado correctamente." % COLOR2, "Desafortunadamente, esta actualizacion no contiene una copia individual de la skin", "Necesitas reinstalar la actualizacion y forzar el cierre de Kodi[/COLOR]")
            elif wiz.workingURL(gui):
                yes=DIALOG.yesno(ADDONTITLE, '%s no se ha instalado correctamente!' % BUILDNAME, 'Parece que la skin y sus opciones no se han instalado correctamente.', 'Quieres instalar la copia de la skin y sus opciones?', nolabel='[B]No[/B]', yeslabel='[B]Si, por favor[/B]')
                if yes: wiz.ebi("PlayMedia(plugin://%s/?mode=install&name=%s&url=gui)" % (ADDON_ID, urllib.quote_plus(BUILDNAME))); wiz.log("[Instalacion] Intentando instalar la copia de la skin")
                else: wiz.log('[Instalacion] Copia de la skin encontrada y funcional pero se ha cancelado: %s' % gui, xbmc.LOGNOTICE)
            else:
                DIALOG.ok(ADDONTITLE, "[COLOR %s]Parece que la skin y sus opciones no se han instalado correctamente." % COLOR2, "Desafortunadamente, esta actualizacion no contiene una copia individual de la skin", "Necesitas reinstalar la actualizacion y forzar el cierre de Kodi[/COLOR]")
                wiz.log('[Instalacion] Copia de la skin no funcional: %s' % gui, xbmc.LOGNOTICE)
    else:
        wiz.log('[Instalacion] Todo parece haber ido correctamente', xbmc.LOGNOTICE)
    if not wiz.getS('pvrclient') == "":
        wiz.toggleAddon(wiz.getS('pvrclient'), 1)
        wiz.ebi('StartPVRManager')
    wiz.addonUpdates('reset')
    if KEEPTRAKT == 'true': traktit.traktIt('restore', 'all'); wiz.log('[Instalacion] Restaurando datos de Trakt', xbmc.LOGNOTICE)
    if KEEPREAL  == 'true': debridit.debridIt('restore', 'all'); wiz.log('[Instalacion] Restaurando datos de Real Debrid', xbmc.LOGNOTICE)
    if KEEPLOGIN == 'true': loginit.loginIt('restore', 'all'); wiz.log('[Instalacion] Restaurando datos de Login', xbmc.LOGNOTICE)
    wiz.clearS('install')
else: wiz.log("Instalacion] No iniciada", xbmc.LOGNOTICE)

if FAILED == False:
    wiz.log("[Comprobacion de version] Iniciada", xbmc.LOGNOTICE)
    if not WORKING:
        wiz.log("[Comprobacion de version] No se ha encontrado ninguna URL valida para esta version: %s" % BUILDFILE, xbmc.LOGNOTICE)
    elif BUILDCHECK == '' and BUILDNAME == '':
        wiz.log("[Comprobacion de version] Primer inicio", xbmc.LOGNOTICE)
        notify.firstRunSettings()
        xbmc.sleep(500)
        notify.firstRun()
        xbmc.sleep(500)
        wiz.setS('lastbuildcheck', str(NEXTCHECK))
    elif not BUILDNAME == '':
        wiz.log("[Comprobacion de version] Version instalada", xbmc.LOGNOTICE)
        if SKIN in ['skin.confluence', 'skin.estuary'] and not DEFAULTIGNORE == 'true':
            checkSkin()
            wiz.log("[Comprobacion de version] Version instalada: Comprobando actualizaciones", xbmc.LOGNOTICE)
            wiz.setS('lastbuildcheck', str(NEXTCHECK))
            checkUpdate()
        elif BUILDCHECK <= str(TODAY):
            wiz.log("[Comprobacion de version] Version instalada: Comprobando actualizaciones", xbmc.LOGNOTICE)
            wiz.setS('lastbuildcheck', str(NEXTCHECK))
            checkUpdate()
        else: 
            wiz.log("[Comprobacion de version] Version instalada: Siguiente comprobacion programada para: %s / HOY is: %s" % (BUILDCHECK, str(TODAY)), xbmc.LOGNOTICE)

wiz.log("[Auto Guardado de Datos de Trakt] Iniciado", xbmc.LOGNOTICE)
if KEEPTRAKT == 'true':
    if TRAKTSAVE <= str(TODAY):
        wiz.log("[Auto Guardado de Datos de Trakt] Guardando todos los datos", xbmc.LOGNOTICE)
        traktit.autoUpdate('all')
        wiz.setS('traktlastsave', str(THREEDAYS))
    else: 
        wiz.log("[Auto Guardado de Datos de Trakt] Siguiente autoguardado programado para: %s / HOY es: %s" % (TRAKTSAVE, str(TODAY)), xbmc.LOGNOTICE)
else: wiz.log("[Auto Guardado de Datos de Trakt] No activado", xbmc.LOGNOTICE)

wiz.log("[Auto Guardado de Datos de Real Debrid] Iniciado", xbmc.LOGNOTICE)
if KEEPREAL == 'true':
    if REALSAVE <= str(TODAY):
        wiz.log("[Auto Guardado de Datos de Real Debrid] Guardando todos los datos", xbmc.LOGNOTICE)
        debridit.autoUpdate('all')
        wiz.setS('debridlastsave', str(THREEDAYS))
    else: 
        wiz.log("[Auto Guardado de Datos de Real Debrid] Siguiente autoguardado programado para: %s / HOY es: %s" % (REALSAVE, str(TODAY)), xbmc.LOGNOTICE)
else: wiz.log("[Auto Guardado de Datos de Real Debrid] No activado", xbmc.LOGNOTICE)

wiz.log("[Auto Guardado de Datos de Login] Iniciado", xbmc.LOGNOTICE)
if KEEPLOGIN == 'true':
    if LOGINSAVE <= str(TODAY):
        wiz.log("[Auto Guardado de Datos de] Guardando todos los datos", xbmc.LOGNOTICE)
        loginit.autoUpdate('all')
        wiz.setS('loginlastsave', str(THREEDAYS))
    else: 
        wiz.log("[Auto Guardado de Datos de] Siguiente autoguardado programado para: %s / HOY es: %s" % (LOGINSAVE, str(TODAY)), xbmc.LOGNOTICE)
else: wiz.log("[Auto Guardado de Datos de] No activado", xbmc.LOGNOTICE)

wiz.log("[Auto Limpieza] Iniciado", xbmc.LOGNOTICE)
if AUTOCLEANUP == 'true':
    service = False
    days = [TODAY, TOMORROW, THREEDAYS, ONEWEEK]
    feq = int(float(AUTOFEQ))
    if AUTONEXTRUN <= str(TODAY) or feq == 0:
        service = True
        next_run = days[feq]
        wiz.setS('nextautocleanup', str(next_run))
    else: wiz.log("[Auto Limpieza] Proxima limpieza %s" % AUTONEXTRUN, xbmc.LOGNOTICE)
    if service == True:
        AUTOCACHE      = wiz.getS('clearcache')
        AUTOPACKAGES   = wiz.getS('clearpackages')
        AUTOTHUMBS     = wiz.getS('clearthumbs')
        if AUTOCACHE == 'true': wiz.log('[Auto Clean Up] Cache: On', xbmc.LOGNOTICE); wiz.clearCache(True)
        else: wiz.log('[Auto Limpieza] Cache: Off', xbmc.LOGNOTICE)
        if AUTOTHUMBS == 'true': wiz.log('[Auto Limpieza] Miniaturas antiguas: On', xbmc.LOGNOTICE); wiz.oldThumbs()
        else: wiz.log('[Auto Limpieza] Miniaturas antiguas: Off', xbmc.LOGNOTICE)
        if AUTOPACKAGES == 'true': wiz.log('[Auto Limpieza] Paquetes: On', xbmc.LOGNOTICE); wiz.clearPackagesStartup()
        else: wiz.log('[Auto Limpieza] Paquetes: Off', xbmc.LOGNOTICE)
else: wiz.log('[Auto Limpieza] Apagada', xbmc.LOGNOTICE)

wiz.setS('kodi17iscrap', '')"))
